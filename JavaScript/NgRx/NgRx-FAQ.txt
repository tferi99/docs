========
NgRx FAQ
========

Basics
------
- Installation
- How to generate basics?
- How to use NgRx in Nx monorepo?
- Scaffolding tips

General
-------
- Concept
- Steps - How to use it?
- How to setup Store Development Tools?
- How we can specify initial state of store?

Actions
-------
- Grouping feature actions
 
Reducers
--------
- What is a metareducer?

Selectors
---------
- Evolution of selectors
- How to call a selector from a reducer?							UNDER CONSTRUCTION
- How to call a selector from an effect?							UNDER CONSTRUCTION

- How to re-use a selector?
- Parameterized selectors

Effects
-------
- What is a side-effect?
- How to create an effect?

Tips
----
- How to specify feature-level reducers?
- How to specify root object of module specific part of store?
- How to retrieve an object tree for modification?
- How to protect immutable state from writing?

Troubleshooting
---------------
- ERROR: StaticInjectorError... [...Effects -> Actions]: ... NullInjectorError: No provider for Actions!
- ERROR: NullInjectorError: No provider for EffectsRootModule!
- Application hangs when an action dispatched


---------------------------------------------------------------------------------------------------------------
Scaffolding tips
================
- generate actions file:

	- go to module directory (where you want to generate actions)
	- call:
	
		ng g action Presence
	
		

- Generating a feature:

	- add Angular module for feature:

		- go to Angular project into /src/app
		- call:
		
			ng g module presence
		
		  OR use right-mouse/New here.
		
	- generate feature elements:
		
		- go to module directory
		- call:
		
			ng g @ngrx/schematics:f presence -m presence.module.ts --skipTests true
			
			OR use here right-mouse/New with: presence -m presence.module.ts --skipTests true
		

---------------------------------------------------------------------------------------------------------------
Installation
============
- install:

	npm install @ngrx/schematics --save-dev
	npm install @ngrx/store @ngrx/effects @ngrx/store-devtools @ngrx/router-store @ngrx/entity --save

- set @ngrx/schematics as default schematic collection:

	ng config cli.defaultCollection @ngrx/schematics

  This command adds the following to the angular.json file:

	"cli": {
		"defaultCollection": "@ngrx/schematics"
	}


---------------------------------------------------------------------------------------------------------------
How to setup Store Development Tools?
=====================================
1. npm install @ngrx/store-devtools --save

2. If you generate a store with schematics this way:

		ng generate store AppState --root --module app.module.ts
		
	It adds Store and StoreDevtoolsModule to module:

		@NgModule({
		  ...
		  imports: [
			...
			StoreModule.forRoot(reducers, { metaReducers }),											<<<<< store
			!environment.production ? StoreDevtoolsModule.instrument() : [],							<<<<< dev tools
		  ]
		})

3. Install Chrome extension:	Redux DevTools


---------------------------------------------------------------------------------------------------------------
Concept
=======
1. Action dipatched to store
2. Store calculates new store from current state and action payload
	- by calling all reducers from reducers map
	- a reducer catches action by type and handles it 


         dispatch
Action -----------> 


- Application state fragmented into 'state' (pieces) which are maintained by reducers.
- A single reducer is responsible only for a piece of the state
- state partitions are embedded by state interface

Elements:
	- Store (imported into module)
		--> Reducers (reducers/index.js) - is a map of application state partition and reducer functions
			--> Reducer function
				- swith-case by action types --> <module>/<module>Actions.js		
		
			--> State partition <--- embedded by AppState interface
				- piece-1 ---> type state1 (or interface)
				- piece-2 ---> type state2 (or interface)
				...
				- piece-N ---> type stateN (or interface)
	
	
	
	
Store --> Reducers --> Reducer function
                   --> State partition
	




---------------------------------------------------------------------------------------------------------------
How we can specify initial state of store?
==========================================
- Initial state calculated in response of first 'init' action
- On 'init' action - as usual - ALL REDUCERS are called
- initially reducer get 'undefined' as initial state, so we can assign initial state as DEFAULT PARAMATER to reducer

For example:

	reducers/index.js

	type AuthState = {
	  loggedIn: boolean,
	  user: User
	};

	const initialAuthState: AuthState = {
	  loggedIn: false,
	  user: undefined
	};

	function authReducer(state: AuthState = initialAuthState, action): AuthState {
	  switch (action.type) {
		case AuthActionTypes.LoginAction:
		  return {
			loggedIn: true,
			user: action.payload.user
		  };
		  ...
		default:
		  return state;
	  }
	}

	
- Usable commands	

---------------------------------------------------------------------------------------------------------------
Steps - How to use it?
======================

1. At the beginning add a store to a package

	Generate store into a package:

		ng generate store AppState --root --module app.module.ts
		
		
	By default index.js is generated into /reducers directory.
	To change it specify --statePath <dir>

	For example:

		ng generate store AppStore --statePath ngrx/reducers --root --module ngrx/ngrx.module.ts

		
2. Define action file
	Action file contains action types and actions which are emitted by this module.
	File:
	
		<module path>/<action file>.action.ts
	
	You can generate action file into your module with schematics:
	
		ng generate action <module path>/<action file>
		
	For example:
	
		ng generate action auth/Auth
		
	Here you have to specify:
		- action types
		- actions with payloads
		
	FREQUENTY USED CONVENTION: 
	Data object shipped by action contained by 'payload' member of action:
	
		export enum AuthActionTypes {
		  LoginAction = '[Login] Action',
		  // ... other action types
		}

		// Login action
		export class Login implements Action {
		  readonly type = AuthActionTypes.LoginAction;

		  constructor(public payload: {user: User}) {}					// <<<<<<<<<<<<<<<<< payload
		}
			
		
3. Dispatch action from a component or backend service with a payload:

	store.dispatch(new Login({user}))

	
4. Build state, add reducers

	- reducers/index.js
		Reducers are in index.js generated by store generation.
		
		This JS contains:
		- state interface
		- map of reducers 
	
	- Method 1: add everything to global reducers directly
	
		- add action payload to state interface as property
	
		- add reducer function into reducers action map
	
		- add action handlers (switch-case)
		
	- Method 2: add modul-specific elements to module:

		ng generate reducer <Module> --flat=false --module <module>/<module>.module.ts
			
		It generates: <module>/<module>.reducer.ts		
	
		NOTE: 
			- it works with lazy loaded modules, too
			- during startup 2 actions generated: 
				- 'init' 				: store initialized
				- 'update-reducers'		: module registered
		
5. Create side-effect services
	A side effect is a usual way to synchronize the state of elements
	outside the store transparently in the background.

	You can generate side-effect service into your module with schematics:
	
		ng generate effect <module>/<Module> --module <module>/<module>.module.ts
		
	For example:
	
		ng generate effect auth/Auth --module auth/auth.module.ts


6. Add selector to access a piece of state


7. Do all in a single step:

	ng generate feature <module>/<Module> --module <module>/<module>.module.ts

		
---------------------------------------------------------------------------------------------------------------
What is a side-effect?
======================
A side effect is a usual way to synchronize the state of elements
outside the store transparently in the background.

So the state is also being sent to 3rd-party elements (database, local storage).

Side effects are implemented as services:

	import { Injectable } from '@angular/core';
	import { Actions, Effect } from '@ngrx/effects';

	@Injectable()
	export class NgrxEffects {

	  constructor(private actions$: Actions) {}
	}

	'actions$' observable injected into effect service.
	Whenever an action is dispatched to store this observable emits a value.

---------------------------------------------------------------------------------------------------------------
ERROR: StaticInjectorError... [...Effects -> Actions]: ... NullInjectorError: No provider for Actions!
======================================================================================================
After added Effects I got this error:

	main.ts:12 Error: StaticInjectorError(AppModule)[NgrxEffects -> Actions]: 
	  StaticInjectorError(Platform: core)[NgrxEffects -> Actions]: 
		NullInjectorError: No provider for Actions!
		at NullInjector.push../node_modules/@angular/core/fesm5/core.js.NullInjector.get (core.js:8896)
		at resolveToken (core.js:9141)
		at tryResolveToken (core.js:9085)
		at StaticInjector.push../node_modules/@angular/core/fesm5/core.js.StaticInjector.get (core.js:8982)
		at resolveToken (core.js:9141)
		at tryResolveToken (core.js:9085)
		...

Fix-1
-----
If EffectsModule added before StoreModule into imports of (app) module, change the order.
StoreModule SHOULD BE THE 1ST.
		
Fix-2
-----
If you generated Effects into a module add EffectsModule import into app module, too - after StoreModule:

	@NgModule({
	  declarations: [
		...
	  ],
	  imports: [
		...
		StoreModule.forRoot(reducers, { metaReducers }),
		!environment.production ? StoreDevtoolsModule.instrument() : [],
		EffectsModule.forRoot([])															<<<<<<<<< here
	  ],
	  providers: [],
	  bootstrap: [AppComponent]
	})
	export class AppModule { }

	
---------------------------------------------------------------------------------------------------------------
How to specify feature-level reducers?
======================================



			
---------------------------------------------------------------------------------------------------------------
How to specify root object of module specific part of store?
============================================================
If a module has its own reducer then payload of actions will be mapped into state with a module specific offset.

This node will be specified during registering StoreModule into module:

	@NgModule({
	  declarations: [MainComponent, LoginComponent, LogoutComponent],
	  imports: [
		CommonModule,
		ReactiveFormsModule,
		StoreModule.forFeature('auth', fromAuth.authReducer),					<<<<<<<< here: 'auth'
		EffectsModule.forFeature([AuthEffects]),
	  ]
	})
	export class NgrxModule { }

---------------------------------------------------------------------------------------------------------------
How to protect immutable state from writing?
============================================
Why state mutating is a problem?
- it breaks time traveling (we cannot go back)
- it breaks on-push change detection

New method (Angular)
--------------------
	@NgModule({
		...
		StoreModule.forRoot(reducers, {
			metaReducers,
			runtimeChecks : {
				strictStateImmutability: true,
				strictActionImmutability: true,
				strictActionSerializability: true,
				strictStateSerializability:true
			}
		}),
		...
	})
	export class AppModule {}


Old method - with ngrx-store-freeze
-----------------------------------
In development time use 'storeFreeze'. 
If you change incoming state in this case an error will be thrown:

	at authReducer (http://localhost:4201/main.js:1791:28)
	core.js:15724 ERROR TypeError: Cannot assign to read only property 'loggedIn' of object '[object Object]'
		at http://localhost:4201/vendor.js:89792:20
		at combination (http://localhost:4201/vendor.js:89744:35)
		...
		
Configuration:
--------------
1. install:
	
	npm i --save-dev ngrx-store-freeze

2. Put 'storeFreeze' into root store config (reducers/index.ts) into metaReducers:

	export const metaReducers: MetaReducer<AppState>[] = !environment.production ? [storeFreeze] : [];


'storeFreeze' is a meta-reducer (running before/after? normal reducers) which sets walks the current state 
recursively and sets all propeties to read-only. It also protects against adding new properties.

---------------------------------------------------------------------------------------------------------------
How to retrieve an object tree for modification?
================================================
Main rule: don't mutate previos state.

That means if you retrieve an object from store you cannot change members of it.

- Solution 1 - simple object:
	If you have a simple object in sub-tree and you want to change properties directly use spread operator:
	
	
- Solution 2 - multi-level object tree:
	If you have a complex object you want to change properties directly create a deep-copy from it:
	
		import * as _ from 'lodash';

		ngOnInit() {
			this.gridSubscription = this.store.pipe(
				select(selectGrids),
			).subscribe(
				grids => this.dashboard = _.cloneDeep(grids)					<<<<<<<<<<<<<<<<<< deep copy
			);
		}
		
- Solution 3 - simple object with form
	With reactive form (created by FormBuilder) you can change a properties of an object directly,
	since inthis case form values copied from store object:
	
	
		this.form = fb.group({
			description: [course.description, Validators.required],						<<<<<< course is an object from state
			category: [course.category, Validators.required],
			longDescription: [course.longDescription, Validators.required],
			promo: [course.promo, []]
		}


---------------------------------------------------------------------------------------------------------------
Evolution of selectors
======================
Example store data:

{
	auth: {
		user : {
			id: 1,
			email: "test@a.b"
		}
	}
}


1. How you get 'authenticated' flag from state?
	- Inject store (State) into component.
	- Store is itself an observable which always returns the whole state object.
	- Select user with rx-js operators:
	
		this.isLoggedIn$ = this.store.pipe(
			map(state => !!state['auth'].user)
		);

2. Elminate duplications:

		this.isLoggedIn$ = this.store.pipe(
			map(state => !!state['auth'].user),
			distinctUntilChanged()
		);

3. 'select' is an NgRx operation which maps value and eliminates duplications:

		this.isLoggedIn$ = this.store.pipe(
			select(state => !!state['auth'].user)
		);
	 
4. The calculation (a pure mapping function) in select() can be make reusable.
	Collect selecton mappings which gets information from the same feature data node into a separate file
	and add memory optimization.

		export const isLoggedIn = createSelector(
			state => state['auth'],				// mapping(s): here we select one or multiple parts of state
			(auth) => !!auth.user				// projector: here we project them into arguments and process them
		);
	
	and use it:
	
		this.isLoggedIn$ = this.store.pipe(
			select(isLoggedIn)
		);
	
	
5. You can use a selector to create other selectors, too:

		export const isLoggedOut = createSelector(
			isLoggedOut,
			(loggedIn) => !loggedIn				
		);

6. Put selection of feature nodes into type-safe feature selectors:

		export const selectAuthState = createFeatureSelector<AuthState>('auth');
		
	and use it:
	
		export const isLoggedIn = createSelector(
			selectAuthState,
			(auth) => !!auth.user				// projector: here we project them into arguments and process them
		);
	
	
	
---------------------------------------------------------------------------------------------------------------
How to call a selector from a reducer?
======================================
It depends on. Sometimes you cannot access state from selector.

- By design a reducer only can access the feature slide of the root state. Initial state of a reducer is always the feature state. 
	So if you want to select comething from feature slide it's not a problem but...

There are 2 scenarios:	
	
1. You need data from the same feature state slide.
	
	In this case you cannot use original selectors which are built up from the feature selector because it based on absolute path:
	
		root/feature/....
		
	In a feature reducer it provides the feature state. In this case you need a feature store relative selector.

		export const selectPresenceState = createFeatureSelector<fromPresence.PresenceState>(fromPresence.presenceFeatureKey);			<<< feature selector
		
|--->	export const selectAllPresence = createSelector(																				<<< get the entity data from feature
|			selectPresenceState,
|	|--->	fromPresence.selectAll
|	|	);
|	|
|	|	// props: {olderThan} timestamp to choose old entries																			
|	|	export const selectOldPresentsIds = createSelector(																				<<< selector derived from root
|---|--->	selectAllPresence,																	
	|	 	(presences: AppPresenceItem[], props) => {
	|			return presences.filter(p => p.lastKeepAlive < props.olderThan).map(p => p.id)
	|		}
	|	)
	|
	|	/**
	|	 * Feature-relative version of selectOldPresentsIds
	|	 */
	|	export const _selectOldPresentsIds = createSelector(																			<<< almost the same as selectOldPresentsIds but it uses feaure state
	|--->	fromPresence.selectAll,																										<<< this is the same operation but without feature selector
			(presences: AppPresenceItem[], props) => {
			return presences.filter(p => p.lastKeepAlive < props.olderThan).map(p => p.id)
		  }
		)

		
		
2. You need data from a different feature or from root state (outside of this feaure).

	Feature reduces cannot access outer state directly. You have to push information:
	- catch action with an effect
	- inject root store into effect
	- get current state data using withLatestFrom
		
	SEE ALSO: How to call a selector from an effect?
		

		
SEE ALSO:	Pass the root state as an optional argument to the reducers.		https://github.com/ngrx/platform/issues/1437

---------------------------------------------------------------------------------------------------------------
How to call a selector from an effect?
======================================
Join data from other stream with withLatestFrom():


		@Injectable()
		export class AuthEffects {
			constructor(private store$: Store<AuthState>)
			
		@Effect({dispatch: false})
		logoutPopup$ = this.actions$.pipe(
			ofType<LogoutPopupAction>(AuthActionTypes.LogoutPopupAction),
			withLatestFrom(this.store$.pipe(select(selectUserSettings()))),					<<< selecting user settings and adding to current stream
			map(([action, userSettings]) => {												<<< original and assigned data are in an array
				...
			}),
		);


- How to pass parameter to selector called from effect with eithLatestFrom?


	map(action => action.payload),
	mergeMap((id) =>
		of(id).pipe(
			withLatestFrom(
				this.store.pipe(select(state => getEntityById(state, id))),
				this.store.pipe(select(state => getWhateverElse(state)))
			)
		),
		(id, latestStoreData) => latestStoreData
	),
	switchMap(([id, entity, whateverElse]) => callService(entity))


OR
	

	loadLocalSubServices$: Observable<Action> = this.actions$.pipe(
		ofType(LocalSubServiceTemplateActions.LocalSubServicesTemplateActionTypes.LoadLocalSubService),
		map((action: LocalSubServiceTemplateActions.LoadLocalSubService) => action.payload.globalSubServiceId),
		(globalSubServiceId) => {
			return withLatestFrom(this.store.pipe(select(fromLocalSubservices.getSearchParams(globalSubServiceId))));
		},
		map(searchParams => searchParams[1]),
		mergeMap((params) =>
			this.subServiceService.getLocalSubServices(params).pipe(
				map(localSubServices => (new LocalSubServiceTemplateActions.LocalSubServiceLoadSuccess(localSubServices))),
				catchError(err => of(new LocalSubServiceTemplateActions.LocalSubServiceLoadFail(err)))
			)
		)
	);     	

---------------------------------------------------------------------------------------------------------------
How to re-use a selector?
=========================
If you want to re-use a selector and you want to utilize memoization efficiently then use a little bit different method.

- DEFAULT WAY (SHARED SINGLETON):

	Selector:
	
		export const getCount = createSelector(
		  getCounterValue,
		  (counter, props) => counter * props.multiply
		);

	Usage:
	
		ngOnInit() {
		  this.counter2 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter2', multiply: 2 }))
		  this.counter4 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter4', multiply: 4 }))
		  this.counter6 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter6', multiply: 6 }))
		}
		
	Keep in mind that a selector only keeps the previous input arguments in its cache. 
	If you re-use this selector with another multiply factor, the selector would always have to re-evaluate its value. 
	This is because it's receiving both of the multiply factors (e.g. one time 2, the other time 4). In order to correctly 
	memoize the selector, wrap the selector inside a factory function to create different instances of the selector.

- FACTORY CREATION (INSTANCE PER CREATION):
	
	The following is an example of using multiple counters differentiated by id. It does not return a selector but a 
	factory function:
	
		export const getCount = () => createSelector(
			(state, props) => state.counter[props.id],
			(counter, props) => counter * props.multiply
		  );	
			
			
	Usage:
	
		ngOnInit() {
		  this.counter2 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter2', multiply: 2 }))
		  this.counter4 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter4', multiply: 4 }))
		  this.counter6 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter6', multiply: 6 }))
		}
		
	The select() operator gives you an observable that calls distinctUntilChanged() internally, 
	meaning it will only fire when the state actually changes. ( a reference check ).
	
	Here we created 3 independent selectors, memoization works more efficiently.
	
	
	
---------------------------------------------------------------------------------------------------------------
How to create an effect?
========================
New style:
----------

	@Injectable()
	export class AuthEffects {

		login$ = createEffect(() =>
			this.actions$
				.pipe(
					ofType(AuthActions.login),
					tap(action => localStorage.setItem('user',
							JSON.stringify(action.user))
					)
				)
		,
		{dispatch: false});																<<< disable dispatch

		
		constructor(private actions$: Actions, ...) {}
	}

Old style:
----------

	@Injectable()
	export class AuthEffects {
		constructor(private actions$: Actions<AuthActions>, ...) {}
		
		@Effect({dispatch: false})														<<< disable dispatch
		login$ = this.actions$.pipe(
		  ofType<LoginAction>(AuthActionTypes.LoginAction),
		  map((action: LoginAction) => action.payload),
		  ))
		);
		...
	}
	
	
---------------------------------------------------------------------------------------------------------------
What is a metareducer?	
======================
Metareducers follow the same concept as reducers. 
A metareducer takes the current state and action and produces a new version of a state but the difference is that
a metareducer is going to be processsed BEFORE the normal reducer.

Developers can think of meta-reducers as hooks into the action->reducer pipeline. Meta-reducers allow developers 
to pre-process actions before normal reducers are invoked.

Possible use-cases of a metareducer:
- logging store before changes


---------------------------------------------------------------------------------------------------------------
Parameterized selectors
=======================
SEE ALSO:	https://medium.com/angular-in-depth/ngrx-parameterized-selector-e3f610529f8

- props:

	export const getCount = () =>  createSelector(
		(state, props) => state.counter[props.id],
		(counter, props) => counter * props.multiply
	);
  
	this.counter2 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter2', multiply: 2 }))
	this.counter4 = this.store.pipe(select(fromRoot.getCount(), { id: 'counter4', multiply: 4 }))

		
- static parameter with factory:

	export const selectCustomer = (id: string) => createSelector(
		selectCustomers,
		customers => customers[id]
	);

	this.customer = store.pipe(
		select(customers.selectCustomer('47'))
	);
	
	
--------------------------------------------------------------------------------------------------------------------------------------------------
How to use NgRx in Nx monorepo?
===============================
SEE ALSO: ../Nx/Nx-FAQ.txt/How to use NgRx in Nx monorepo?


--------------------------------------------------------------------------------------------------------------------------------------------------
ERROR: NullInjectorError: No provider for EffectsRootModule!
============================================================
Error in console during start application in browser:

	main.ts:13 NullInjectorError: R3InjectorError(AppModule)[EffectsFeatureModule -> EffectsRootModule -> EffectsRootModule -> EffectsRootModule]: 
	  NullInjectorError: No provider for EffectsRootModule!
	  ...
	  
	  
Fix:

	Add to imports of AppModule:
	
		EffectsModule.forRoot([])
		

--------------------------------------------------------------------------------------------------------------------------------------------------
Grouping feature actions
========================
For most clear code it worths to group your feature action by feature.

Add action-types.ts to your feature (module) directory with a content lik this:

	import * as PresenceActions from './presence.actions'
	export {PresenceActions}

 
It will minimize import lines in action user classes.
		
--------------------------------------------------------------------------------------------------------------------------------------------------
Application hangs when an action dispatched
===========================================
In general effects dispatch new action(s) at the end of action processing.

If you have an effects which does not dispatch new action 
then you have to inform NgRx Effects otherwise it dispatches incoming action by default and it leads to an infinite loop
which hangs application.

	@Injectable()
	export class PresenceEffects {


	  loadPresences$ = createEffect(() => this.actions$.pipe(
		ofType(PresenceActions.presencesPushed),
		...
	  ), {dispatch: false});

	  constructor(private actions$: Actions) {}
	}

