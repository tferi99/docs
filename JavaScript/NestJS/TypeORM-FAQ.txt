===========
TypeORM-FAQ
===========

- How to specify LIKE query?
- How to implement a unique database field?

Troubleshooting
---------------
- ERROR: No metadata for "..." was found. EntityMetadataNotFound: No metadata for ""..." was found.

--------------------------------------------------------------------------------------------------------------------------------------
How to specify LIKE query?
==========================

	@EntityRepository(Cat)
	export class CatRepository extends Repository<Cat> {

	  async search(filter: CatFilterDto): Promise<Cat[]> {
		const {name, color} = filter;
		const query = this.createQueryBuilder('cat');

		if (name) {
		  query.andWhere('cat.name like :name', {name: `%${name}%`});			<<<<<<<<<<<<<<<<<<<<<<<
		}

		if (color) {
		  query.andWhere('cat.color = :color', {color});
		}

		return await query.getMany();
	  }
	  ...
	}

	
--------------------------------------------------------------------------------------------------------------------------------------
ERROR: No metadata for "..." was found. EntityMetadataNotFound: No metadata for ""..." was found.
=================================================================================================
- You have created an Entity
- You have created an EntityRepository for Entity

and you have this error during startup.

Solution:
	- Maybe you have created a configuration for TypeORM and added to AppModule:
	
		typeorm.config.ts:
		
			export const typeOrmConfig: TypeOrmModuleOptions = {
			  type: 'postgres',
			  host: 'localhost',
			  port: 5432,
			  username: 'postgres',
			  password: 'postgres',
			  database: 'my-nestjs-demo',
			  entities: [Cat],								<<<<<<<<<<<<<<<< HERE
			  synchronize: true,
			  // logging: true,
			};
		
			
	app.module.ts:
	
			@Module({
				imports: [
					TypeOrmModule.forRoot(typeOrmConfig),
					...
				],
				...
			})
			export class AppModule {
			  constructor(private readonly connection: Connection) {}
			}

	- This configuration contains an 'entities' array.
	
		Add your new entity to this array.


--------------------------------------------------------------------------------------------------------------------------------------
How to implement a unique database field?
=========================================
Method 1: check existing values in repository before saving entity:

    const exist = await this.findOne({username});
    if (exist) {
      throw new ConflictException('User already exists');
    }

Method 2 (RECOMMENDED): unique constraint:

	Annotate entity:
	
		@Entity('appuser')
		@Unique(['username'])     						<<<<<<<<<<<< unique constraint
		export class User extends BaseEntity {
		  @PrimaryGeneratedColumn()
		  id: number;

		  @Column()
		  username: string;

		  @Column()
		  password: string;
		}

	Handle error in repository:
	
		try {
		  return await user.save();
		} catch (e) {
		  console.log(`Error code: ${e.code}`);
		  if (e.code === '23505') {
			throw new ConflictException('User already exists');
		  } else {
			throw new InternalServerErrorException();
		  }
		
		