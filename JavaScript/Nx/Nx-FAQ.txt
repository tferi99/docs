======
Nx FAQ
======

Basics
------
- What is Nx?
- How to setup Nx?
- How to create a workspace?
- Tips

Projects
--------
- Nest project
- Lib project
- How to delete a project?

NgRx
----
- How to use NgRx in Nx monorepo?

Troubleshooting
---------------
- ERROR: Module not found: Error: Can't resolve 'cache-manager' in '.....\node_modules\@nestjs\common\cache'

-------------------------------------------------------------------------------------------------------------------------------------
What is Nx?
===========
Nx is the preeminent toolkit for Monorepo development, which helps you to build software smarter and faster. 
With Nx you can build full-stack applications with your preferred framework.

Nx is an extension for the Angular CLI and is made up of the following:
- A set of schematics for project and code generation (@nrwl/schematics)
- A helper library for handling common tasks like data persistence with NgRx and testing (@nrwl/nx)
- A set of binaries that can be run from the terminal to help with formatting, linting and code base analysis

-------------------------------------------------------------------------------------------------------------------------------------
How to setup Nx?
================
npm install -g @nrwl/cli


-------------------------------------------------------------------------------------------------------------------------------------
How to create a workspace?
==========================
npx create-nx-workspace@latest


-------------------------------------------------------------------------------------------------------------------------------------
Tips
====
nx list		: list plugins (installed/available)



Nx course:		https://www.youtube.com/watch?v=2mYLe9Kp9VM&list=PLakNactNC1dH38AfqmwabvOszDmKriGco

-------------------------------------------------------------------------------------------------------------------------------------
Nest project
============
Add Nest dependency (if not added before):

	npm install --save-dev @nrwl/nest

Generate Nest project:

	nx generate @nrwl/nest:application <nest-app> --frontendProject my-angular-app


- it generates a project into 'apps'
- it creates 'proxy.conf.json' into client frontend  project (e.g Angular)
- run:

		nx server <nest-app>
		
  OR

	- create a new entry into package.json, for example ('api' is Nest project):
	
		"start-api": "ng serve api",

	By default, the serve command will run in watch mode. This allows code to be changed, and the Nest application to be rebuilt automatically. 
	Nest applications also have the inspect flag set, so you can attach your debugger to the running instance.		
	
SEE ALSO:	https://nx.dev/angular/plugins/nest/overview


-------------------------------------------------------------------------------------------------------------------------------------
Lib project
===========
Generate a lib project:
nx g @nrwl/workspace:lib commondata


-------------------------------------------------------------------------------------------------------------------------------------
How to delete a project?
========================
- delete project directory from 'apps' or from 'libs'
- delete project entry from "projects" node of nx.json
- delete project entry from "projects" node of angular.json


-------------------------------------------------------------------------------------------------------------------------------------
How to use NgRx in Nx monorepo?
===============================
The structure of Nx project is a little bit different than standar Angular project:
	- there are multiple project with a single package.json
	- projects are in apps
	
If you create elements with schematics you have to add options for proper result.

Steps are:

- go to Angular project directory

- intall @ngrx/store:

	ng add @ngrx/store --module src/app/app.module.ts --minimal false
	
	NOTE: move 'reducers' directory into 'src' directory.
	
- install @ngrx/store-devtools:

	ng add @ngrx/store-devtools --module src/app/app.module.ts
	

TEST:
	- 'app.module.ts' will contain:
		
		...
		StoreModule.forRoot(reducers, {
		  metaReducers
		}),
		StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),
		...
		
	- There is a reducers/index.ts with reducers and metaReducers
	
- move into monorepo root directory (to package.json) and install other packages
		
		npm install @ngrx/effects
		npm install @ngrx/entity
		npm install @ngrx/data 		(optional)
		
TEST:
	Start application and goto Redux in devtools.
	- inspector contains initial action:		@ngrx/store/init
	- State/Raw contains:						{}
	
- add Angular module for feature:

	- go to Angular project into /src/app
	- call:
	
		ng g module presence
	
	  OR use right-mouse/New here.
	
- generate feature elements:
	
	- go to module directory
	- call:
	
		ng g @ngrx/schematics:f presence -m presence.module.ts --skipTests true
		
		OR use here right-mouse/New with: presence -m presence.module.ts --skipTests true
		
		
TEST: 	
	Start application and goto Redux in devtools.
	- State/Raw contains:			{
										presence: {}
									}
									


	
									
- Generate action file:

	- go to module directory (where you want to generate actions)
	- call:
	
		ng g @ngrx/schematics:action Presence
		
--------------------------------------------------------------------------------------------------------------------------------------------------
ERROR: Module not found: Error: Can't resolve 'cache-manager' in '.....\node_modules\@nestjs\common\cache'
==========================================================================================================
Problem:
If you have a monorepo environment with NestJS and Angular project and you accidentally imported a NestJS 
class/module into Angular project.

In this case 'ng build' detects similar problem.

