==============
Spring MVC FAQ
==============

- How to ignore null fields during mapping into json?

Troubleshooting
---------------
- Spring MVC - HTTP status code 400 (Bad Request)
- Spring MVC - HTTP status code 405 (Method Not Allowed)
- Spring MVC not returning JSON content - Error 406
- Spring MVC not returning XML content - Error 406
- Controller called but result code is Error 404

-----------------------------------------------------------------------------------------------------------------------------------------
How to ignore null fields during mapping into json?
===================================================
Depending on version of Jaskcon you use:

on class:
		@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)
	OR
		@JsonInclude(JsonInclude.Include.NON_NULL)

or in global config:

	<mvc:annotation-driven>
		<!-- to remove null values from json -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="serializationInclusion">
							<value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	
-----------------------------------------------------------------------------------------------------------------------------------------
Spring MVC - HTTP status code 400 (Bad Request)	
===============================================
If your JSON and Java classes don’t match, Spring MVC will return a 400 Bad Request without telling you why. 
You can get a better insight at what’s going wrong by adding an exception handler in the controller.

	@ExceptionHandler
	@ResponseStatus(HttpStatus.BAD_REQUEST)
	public void handle(Exception e) {
		log.error("Returning HTTP 400 Bad Request", e);
	}
	
Troubleshooting:	find detailed info in server log.	
	
-----------------------------------------------------------------------------------------------------------------------------------------
Spring MVC - HTTP status code 405 (Method Not Allowed)
======================================================
This error found if URL does not match with controller methods.

Troubleshooting:	find detailed info in server log.

Example controller:

	@Controller
	@RequestMapping("/gridster")
	public class GridsterController extends WebAttendantControllerBase
	{
		...
		
		@RequestMapping(value="/featuredata/{widgetId:[\\d]}", method = RequestMethod.PUT)
		public @ResponseBody void updateWidgetFeatureData(@PathVariable("widgetId") int widgetId, @RequestBody String data, HttpServletRequest request, HttpServletResponse response)
		{
			...
		}	
	}


	- PROBLEM:	URL matches but HTTP method not (GET instead of PUT)
			
		Result in browser:
		
			Request URL: http://localhost:4200/andphone/webattendant-api/gridster/featuredata/5
			Request Method: GET
			Status Code: 405 Method Not Allowed
			
		Result in log:
			
			[2019-09-19 08:50:21,920] [WARN] [http-nio-8080-exec-5] [DefaultHandlerExceptionResolver.java:198] - Request method 'GET' not supported
			
			
	- PROBLEM:	Path contains a typo:
	
		Result in browser:
		
			Request URL: http://localhost:4200/andphone/webattendant-api/gridster/featuredataX/5
			Request Method: PUT
			Status Code: 405 Method Not Allowed
	
		Result in log:
		
			[2019-09-19 08:53:32,730] [WARN] [http-nio-8080-exec-7] [DispatcherServlet.java:1120] - No mapping found for HTTP request with URI [/andphone/webattendant-api/gridster/featuredataX/5] in DispatcherServlet with name 'springWebattendantAPI'

	- PROBLEM:	bad data in path (e.g. regular expression protects a path variable)
		Result in browser:
		
			Request URL: http://localhost:4200/andphone/webattendant-api/gridster/featuredata/5X
			Request Method: PUT
			Status Code: 405 Method Not Allowed
			
		Result in log:
		
			[2019-09-19 08:58:53,295] [WARN] [http-nio-8080-exec-5] [DispatcherServlet.java:1120] - No mapping found for HTTP request with URI [/andphone/webattendant-api/gridster/featuredata/5X] in DispatcherServlet with name 'springWebattendantAPI'
			
			
-----------------------------------------------------------------------------------------------------------------------------------------
Spring MVC not returning JSON content - Error 406
=================================================
To return JSON response from @ResponseBody-annotated method, you need 2 things:

	- <mvc:annotation-driven /> (you already have it)
	- Jackson JSON Mapper in the classpath for JSON
	
You don't need ContentNegotiatingViewResolver and headers in @RequestMapping.

E.g. in Maven:

		<!-- =============================== json mapper =============================== -->
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
			<version>1.9.12</version>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
			<version>1.9.12</version>
		</dependency>

-----------------------------------------------------------------------------------------------------------------------------------------
Spring MVC not returning XML content - Error 406
=================================================
To return XML response from @ResponseBody-annotated method, you need 3 things:

	- <mvc:annotation-driven /> (you already have it)
	- JAXB in the classpath for XML
	- XML format is more strict than JSON, here you have to specify XML root elements with @XmlRootElement annotation on DTOs
		which will be returned as root elements.
	
You don't need ContentNegotiatingViewResolver and headers in @RequestMapping.

E.g. in Maven:

		<!-- =============================== xml mapper =============================== -->
		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<version>2.2.12</version>
		</dependency>
		<dependency>
			<groupId>javax.xml</groupId>
			<artifactId>jaxb-impl</artifactId>
			<version>2.1</version>
		</dependency>


-----------------------------------------------------------------------------------------------------------------------------------------
Controller called but result code is Error 404
==============================================
You call the good REST URL, controller called properly (checked by log/debugger) still you have 
404 responce code on the client side.

Possible reason:
	You have almost proper configuration (web.xml, component-scan, @RequestMapping)
	but you forgot to add @ResponseBody annotation for return type of controller method.
	
	
		public @ResponseBody String init() 
		{
			...
		}
