====================
Maven 1.x kick guide
====================

1. What is Maven? 
2. Installation
3. Tips
4. Files
5. Glossary
6. Being prepared a project
7. POM (Project Object Model) - project.xml
7.1 POM inheritance
8. Repositories

....


1. What is Maven? 
-----------------
The Maven web site (http://maven.apache.org) states the following:

Maven is a software project management and comprehension tool. Based on the concept of a Project Object Model (POM), 
Maven can manage a project's build, reporting, and documentation from a central piece of information.

Some functions:
• Maven extends Ant to let you download dependencies
• Maven is a set of reusable Ant scriptlets
• Maven is a site and documentation tool

Maven's objectives:
• Making the build process easy
	Maven does provide a lot of shielding from the details.

• Providing a uniform build system
	• Providing quality project information
	• Change log document created directly from source control.
	• Cross referenced sources
	• Mailing lists
	• Dependency list
	• Unit test reports including coverage

• Providing guidelines for best practices development
	• Keeping your test source code in a separate, but parallel source tree
	• Using test case naming conventions to locate and execute tests
	• Have test cases setup their environment and don't rely on customizing the build for test preparation.

• Allowing transparent migration to new features


2. Installation
---------------
- uncompress
- set MAVEN_HOME
- set JAVA_HOME


3. Tips
-------
Options:

	-e			: full stack trace when an error occured

	maven -g		: listing available plugins/goals:

	maven -i		: listing installed plugins

	-o			: offline build

	maven -P <plugin>	: to display help on using a given plugin

			  (same as -g but only for given plugin)

	maven -u		: displays help on the current project (usage)

	-X			: debug information


Goals:
	maven ant		: to create build.xml for Ant.

	maven build:start	: to do 'nothing' but download all dependencies

	maven console		: to run Maven Console and to avoid waiting for the Java Virtual Machine (JVM) 
				  to start up every time you want to run a Maven goal.
	maven eclipse		: to create Eclipse project files.

	maven [jar]		: default goal

	maven javadoc		: it creates Java Doc for project.

	maven plugin:download	: downloading a plugin on demand (see more below).


Dependencies:
	to list available JARs	: use a browser (see example later).


4. Files
--------
project.xml		: POM (Project Object Model), the base of build
project.properties	: Adding custom properties to modify behavior of Jelly plugins
maven.xml		: A Jelly script to extend goals and pre-requisity chain.


5. Glossary
-----------
Project
	Maven thinks in terms of projects. Everything that you will build are projects.	

Project Object Model (POM)
	The Project Object Model, almost always referred as the POM for brevity, is the metadata 
	that Maven needs to work with your project. Its name is "project.xml" and it is located 
	in the root directory of each project.

Artifact
	An artifact is something that is either produced or used by a project. Examples of artifacts
	produced by Maven for a project include: JARs, source and binary distributions, WARs. Each 
	artifact is uniquely identified by a 
	
		<group ID> and an <artifact ID>
	
	which is unique within a group.

	IMPORTANT:	
	A Maven project generates only one primary artifact.
	In Maven, the following rule applies: one build project must generate only one primary artifact (JAR, WAR, EAR, etc.)
	one project, one artifact. All the existing Maven plug-ins are built following this rule. Maven projects can generate 
	multiple secondary artifacts such as JavaDoc files, sources packaged as zip files, and reports, but a single project 
	can generate only a single primary artifact.


Group ID
	A group ID is a universally unique identifier for a project. 
	While this is often just the project name (eg. commons-collections), it is helpful to use a fully-qualified
	package name to distinguish it from other projects with a similar name (eg. org.apache.maven).

Dependency
	A typical Java project relies on libraries to build and/or run. Those are called "dependencies" 
	inside Maven. Those dependencies are usually other projects' JAR artifacts, but are referenced 
	by the POM that describes them.	

Plugin
	Maven is organized in plugins. Every piece of functionality in Maven is provided by a plugin. 
	Plugins provide goals and use the metadata found in the POM to perform their task. Examples 
	of plugins are: jar, eclipse, war. Plugins are written in Jelly and can be added, removed 
	and edited at runtime.

Jelly
	Jelly is a tool for turning XML into executable code. So Jelly is a Java and XML based 
	scripting and processing engine.
	Jelly can be both generic and powerful XML processing and transformation engine, a web 
	and XML based scripting engine as well as a unit testing framework for testing web applications 
	and web services.

Goal
	Goals are what are executed to perform an action on the project. For example, the jar:jar 
	will compile the current project and produce a JAR. Each goal exists in a plugin (except 
	for those that you define yourself), and the goal name usually reflects the plugin 
	(eg. java:compile comes from the java plugin).

Repository
	A repository is a structured storage of project artifacts. Those artifacts are organized 
	under the following structure: 

		$MAVEN_REPO/group id/artifact type/project-version.extension

	For instance, a Maven JAR artifact will be stored in a repository under 
	
		/repository/maven/jars/maven-1.0-beta-8.jar.

	There are different repositories that Maven uses. The "remote repositories" are a list of repositories
	to download from. This might include an internet repository, its mirrors, and a private company 
	repository. The "central repository" is the one to upload generated artifacts to (for developers of 
	a company for instance). The "local repository" is the one that you will have on your computer. 
	Artifacts are downloaded just once (unless they are a SNAPSHOT) from the remote repository to 
	your local repository.

Snapshots
	Projects can (and should) have a special version including SNAPSHOT to indicate that they are 
	a "work in progress", and are not yet released. When a snapshot dependency is encountered, it
	is always looked for in all remote repositories, and downloaded again if newer than the local copy.

XDoc
	XDoc is the format of documentation that Maven currently understands. It is quite simple, and
	allows embedding XHTML within a simple layout that is transformed into a uniform site.



6. Being prepared a project
---------------------------
The first time a project is built or a specific plugin is used, you may need to be online to obtain
dependencies. If you have them, JARs can be put into your local repository manually if desired, and you
can also run a local mirror of needed dependencies.

This might seem onerous, but remember the following advantages:
• All Maven projects (including Maven and its plugins) share the repository, so each dependency is only
	downloaded once.
• This avoids needing to download each dependency manually and place it in the correct place for each
	build.
• No large binaries need to be stored in CVS where they are downloaded and checked for updates
	often.
• Maven automatically and uniformly handles proxy servers, multiple remote sources and mirrors.

Occasionally, some dependencies will not be downloadable because of the distribution license they have.
These must be downloaded manually and placed into the local repository.



- Creating project:

	maven genapp

- Compiling testing project, making JAR:
	
	maven jar[:jar]



7. POM (Project Object Model) - project.xml
-------------------------------------------
Build controlled by this file.

<project>
  <extend/>
  <pomVersion/>
  <id/>
  <name/>
  <groupId/>
  <currentVersion/>
  <organization/>
  <inceptionYear/>
  <package/>
  <logo/>
  <gumpRepositoryId/>
  <description/>
  <shortDescription/>
  <url/>
  <issueTrackingUrl/>
  <siteAddress/>
  <siteDirectory/>
  <distributionSite/>
  <distributionDirectory/>
  <repository/>
  <versions/>
  <branches/>
  <mailingLists/>
  <developers/>
  <contributors/>
  <licenses/>
  <dependencies/>
  <build/>
  <reports/>
  <properties/>
</project>

7.1 POM inheritance
-------------------
POM can be inherited. You can put the common part of POM of several projects into a common project.xml,
and it can be referenced by the following way:

<?xml version="1.0"?>
<project>
  <extend>../common/project.xml</extend>			<--------------------------------
	....
	....


This extend element tells Maven to inherit not only from a parent's project.xml, but also from the parent's 
maven.xml and project.properties files. Actually you can't decide what you inherit: IT'S EVERYTHING OR NOTHING.

Most elements in the parent POM are OVERRIDDEN by the child's POM elements. However, the DEPENDENCIES ELEMENTS 
ARE ADDITIVE (i.e., these elements will be aggregated).


8. Repositories
---------------
To specifying remote repository set 

	maven.repo.remote

entry of $HOME/build.properties. For example:


maven.repo.remote=http://www.ibiblio.org,http://maven-plugins.sf.net/maven

To download a plugin on demand:

	maven plugin:download -DgroupId=<groupId> -DartifactId=<artifactId> -Dversion=<version>

	This will be resolved in remote repository into:
	
		[repository URL]/[groupId]/plugins/[artifactId]-[version].jar

	For example:

		maven plugin:download -DgroupId=maven-plugins -DartifactId=maven-axis-plugin -Dversion=0.7


	Local repository:

		maven.repo.local

		default:	$HOME/.maven/repository


Manual installation of plugin:

	It is also possible to install a plug-in manually. Simply download the plug-in JAR and drop it 
	in your $MAVEN_HOME/plugins directory (or in your ~user/.maven/plugins directory if you wish it 
	to be independent of your Maven installation).


Plugins can be found in 3 directories:

	$HOME/repository	: This directory is your local Maven repository and it contains all the 
				  artifacts that are cached locally on your machine.

	$HOME/cache		: which contains all the Maven plug-ins found in $MAVEN_HOME/plugins in expanded format 
				  (they are JAR files). You can safely delete this directory, and Maven will re-create 
				  it at the next run.

	$MAVEN_HOME/plugins	: which is the user plug-in directory. Maven does not create this directory automatically
				  this directiry has been created during maven installation.
				  Any JAR plug-in that you drop in this directory will be expanded by Maven in the cache directory. 
				  Note that in the case of a version conflict, the plug-ins in this plugins/ directory take 
				  precedence over the plug-ins in $MAVEN_HOME/plugins. 
				  Using the plugins/ directory is a good way to customize a read-only Maven installation.



Dependencies
------------
You have to specify dependencies in project.xml. For example:

<dependencies>
  <dependency>
    <groupId>springframework</groupId>
    <artifactId>spring-core</artifactId>
    <version>1.1.4</version>
  </dependency>
</dependencies>

This will be resolved to:

	[REPO_ROOT]/<groupId>/<type>s/<artifactId>-<currentVersion>.<type>


in the default remote repository. For example:

http://www.ibiblio.org/maven
    /springframework
        /jars
            spring-core-1.1.4.jar


And it will be downloaded into local repository:

	$HOME/.maven/repository 

If version is in format a 'xxx-SNAPSHOT', Maven will check for a new version of the 
dependency from the remote repository.

To get available JARS list remote repository using a browser. For example from ibilio:

	http://www.ibiblio.org/maven/

NOTE: / is important at the end of URL.


Default goal
------------
Calling maven without any parameters will run the default goal.
To set the default goal for a project, simply list the goal name in the
default attribute of the project element:

	<?xml version="1.0" encoding="UTF-8"?>
	  
	<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" 
	    xmlns:maven="jelly:maven" default="weather:run">
	  
	    // ...snip...
	  
	</project>

Default goal in plugin:	create goal with the name of plugin.


Customizing maven
-----------------
- setting properties
- scripting:
	- maven.xml
	- plugin

Properties
----------
There are 2 sets of properties:
- standard properties
- plugin properties

Properties can be set in project.properties file.

Properties in project.properties can be accessed by ${context.<prop>} 
from Jelly (e.g. from plugins or maven.xml).

Built-in properties:

${basedir}
	Root of a given project. The directory which contains project.xml and maven.xml.
 
${maven.build.dir}
	${basedir}/target directory. Destination directory for intermediate files and
	generated artifacts.
 
${maven.build.dest}
	${basedir}/classes directory. Destination directory for class files.
 
${user.home}
	A user's home directory. On Unix, this is usually something like /home/tobrien, 
	and on Windows this is C:\Documents and Settings\tobrien.
 
${maven.home.local}
	${user.home}/.maven directory.
 
${maven.repo.remote}
	The remote repository from which Maven will download artifacts. Defaults to 
	http://www.ibiblio.org/maven/. This property is a comma-delimited list of
	remote repositories. If an artifact isn't found in the first repository listed, 
	it will try the next repository in the list until either the artifact is 
	located or the end of the list is reached.
 
${maven.repo.local}
	${maven.home.local}/repository directory.
 
${context}
	This is a built-in variable in all Jelly scripts, and it is of type JellyContext. 
	This object provides access to the variables a Jelly script has access to. For more 
	information about this object, see http://jakarta.apache.org/commons/jelly/apidocs.
 
${pom}
	Exposes an org.apache.maven.project.Project object for the current project. Use 
	this object to access project paths and resolve dependency paths.
 
All System properties
	The System class exposes a set of properties which can also be accessed. Properties 
	such as java.home, os.arch, and file.separator are among the many System properties exposed.
 
Properties can be overridden, Maven reads properties from the following sources, in the order shown:
	- ${basedir}/project.properties
	- ${basedir}/build.properties 
	- ${user.home}/build.properties 
	- System properties (specified with the -D flag)

	The last one wins.


Scripting maven
---------------
If the provided plugins do not give all the flexibility needed to do the required tasks, you can add
scripting to your project to go the last steps.

There are two ways to add additional goals and hooks to your project 

	- maven.xml
	- writing your own plugin

Maven uses Jelly as it's scripting language, and any valid jelly tags can be placed in the maven.xml, or
inside a plugin.

It is generally recommended to write your own plugin for any significant
well as basic Jelly script.


maven.xml
---------
The maven.xml file is tied to the project.xml file in the same directory, in the same way as
project.properties is. This means that it is loaded and its goals processed whenever your project is,
and also means that it is inherited from any projects you extend.

The format of maven.xml is typically like this:

	<project default="jar:jar" xmlns:j="jelly:core">
	...
	</project>

Within this file, you can define new goals, or attach hooks to existing ones, 
write logic using Jelly tag libraries, and use existing Ant tasks to add build behaviour.


Custom goals, preGoals
----------------------
To write your own goal, add some Jelly script to the maven.xml file. 

Decraling goal:

	<goal name="my-goal" prereqs="some-other-goal" description="My Goal">
	...
	</goal>


Here's a simple custom goal that retrieves a WSDL document with Ant's get task. The custom goal is defined as follows:

<?xml version="1.0" encoding="UTF-8"?>
  
<project xmlns:j="jelly:core" xmlns:ant="jelly:ant" 
    xmlns:maven="jelly:maven" default="jar">
  
  <goal name="weather:get-wsdl" description="Retrieves WSDL document">
    <j:set var="wsdl" 
        value="http://weather.gov/forecasts/xml/DWMLgen/wsdl/ndfdXML.wsdl"/>
    <ant:echo>Retrieving WSDL from ${wsdl}</ant:echo>
    <ant:get src="${wsdl}" dest="${basedir}/src/wsdl/weather.wsdl"/>
  </goal>
  
</project>


To bind a pre-action to goals define preGoal tag in maven.xml:

	<preGoal name="java:compile">
		<attainGoal name="axis:compile" />
	</preGoal>

This will call axis:compile before java:compile. You can insert your custom actions into 
default pre-requisity chain.

Calling goals
-------------
If, within a goal, you need to execute another goal, it can be done using:

	<attainGoal name="my-goal" />

This is usually used in preGoal and postGoal definitions that can not specify prereqs, as you'll see
in the next section.



Enumeration dependencies from POM
---------------------------------
If you wasnt to run application you need CLASSPATH with built JAR and dependencies. 
You can assemble it by getting information from POM:

<goal name="weather:run" prereqs="jar">
  
  <ant:java classname="mdn.weather.Weather" fork="true">
    <ant:arg value="41.30"/>
    <ant:arg value="-87.51"/>
    <ant:arg value="1"/>
    <ant:classpath>
      <ant:pathelement location="${maven.build.dir}/${maven.final.name}.jar"/>
      <j:forEach var="lib" items="${pom.artifacts}">
        <ant:pathelement path="${lib.path}"/>
      </j:forEach>      
    </ant:classpath>
  </ant:java>
  
</goal>



Multiproject
------------
A Maven project generates only one primary artifact.
In Maven, the following rule applies: one build project must generate only one primary artifact (JAR, WAR, EAR, etc.)
one project, one artifact. All the existing Maven plug-ins are built following this rule. Maven projects can generate 
multiple secondary artifacts such as JavaDoc files, sources packaged as zip files, and reports, but a single project 
can generate only a single primary artifact.

If you want to generate more artifacts, yoo have to divide your project into subprojects.

Some usable goals:

	multiproject:install		: Run 'artifact':install goal for all project.

	multiproject:clean		: Run goal clean:clean for all projects

	multiproject:goal		: Run the comma separated list of goals provided by the variable goal for all projects e.g.
	

multiproject:goal

which executes the goal specified by the Maven goal property on all the subprojects it can find. 
For example, executing maven multiproject:goal -Dgoal=clean will execute the clean goal on all subprojects. 

However, before executing this command you need to tell the Multiproject plug-in which projects are considered subprojects. 
You configure this through Maven properties. Three properties control the list of projects to include/exclude, 
and their default values are as follows:

maven.multiproject.basedir=${basedir}

	This property represents the location from which the plug-in will look for Maven projects. (In practice, 
	the Multiproject implementation looks for project.xml files. When it finds one, it knows it has found a 
	Maven project.)

maven.multiproject.includes=*/project.xml

	This property defines which Maven project to include. The default value says to look for all project.xml 
	files located in any directory directly under the top-level directory.

maven.multiproject.excludes=

	This is the counterpart of the maven.multiproject.includes property. It says which project to exclude 
	from the multiproject build.

As you can see, the Multiproject plug-in has automatically discovered the right project build order.


Creating multiproject build
---------------------------
- You need to define some common goals in your subprojects that you can call from your master project.
	You can do this easily, by creating a maven.xml file in each subproject and defining a custom 
	goal in there. For example:

	Subproject 1:

		<?xml version="1.0"?>
		  
		<project default="qotd:build">
		  <goal name="qotd:build" prereqs="jar:install"/>
		</project>

	
	Subproject 2:
 
		<?xml version="1.0"?>
		  
		<project default="qotd:build">
		  <goal name="qotd:build" prereqs="war:install"/>
		</project>

	To manage different types of subproject builds, define the same custom goal in 
	each subproject and use the Multiproject plug-in to execute it.


- Now that each subproject has a qotd:build goal that builds it, you can also create a 
  qotd:build goal in the master project's maven.xml file. This goal uses the Multiproject 
  plug-in to call the qotd:build goal on all the subprojects:

		<?xml version="1.0"?>
		  
		<project default="qotd:build"
		    xmlns:j="jelly:core">
		    
		  <goal name="qotd:build">
		    <j:set var="goal" value="qotd:build"/>
		    <attainGoal name="multiproject:goal"/>
		  </goal>
		  
		  <goal name="qotd:clean" prereqs="multiproject:clean,clean"/>
		  
		</project>



Writing plug-ins
----------------
Reasons:
- modularity
- reusability

The first thing to know is that a Maven plug-in is just another Maven project; any plug-in project 
will have the same structure as a normal Maven project

plugin.jelly

This file defines a plug-in's goals, and it is where you will put all the plug-in logic in the form
of Jelly script. This file resembles maven.xml as seen in previous chapters. While plugin.jelly and
maven.xml contain similar goal definitions, they are separated to avoid conflicts: the maven.xml
file is used at build time to build your plug-in, whereas plugin.jelly is used at runtime by users
of your plug-in.

plugin.properties

This file defines default values for plug-in properties. A plug-in property is a property that end 
users of your plug-in can modify to suit their setup. The format of the plugin.properties file is the
same as that of the project.properties file but, like plugin.jelly, plugin.properties is separated
from project.properties (project.properties is used at build time to build your plug-in, whereas 
plugin.properties is used at runtime).


Steps:
- Write a plugin.jelly
	- same structure as maven.xml, since maven.xml is a Jelly script
	- name of the default goal has to be the same as the name of plugin

	Example:

		<?xml version="1.0" encoding="UTF-8"?>
		  
		<project 
			xmlns:j="jelly:core" xmlns:ant="jelly:ant" 
		    xmlns:maven="jelly:maven" default="helloworld:message">

			<goal name="helloworld" description="Hello World examle">
				<attainGoal name="helloworld:message"/>
			</goal>
		  
			<goal name="helloworld:message" description="Hello World examle">
				<j:set var="msg" value="Hello World!!!"/>
				<ant:echo>${msg}</ant:echo>
			</goal>

			.....
			.....
		</project>

- Write a simple project.xml
	- add <resources> tag into <build>:

			.....
  			  <resources>
			    <resource>
			      <directory>src/plugin-resources</directory>
			      <targetPath>plugin-resources</targetPath>
			    </resource>
			    <resource>
			      <directory>.</directory>
			      <includes>
			        <include>plugin.jelly</include>
			        <include>plugin.properties</include>
			        <include>project.xml</include>
			      </includes>
			    </resource>
			  </resources>
			</build>


- Call 
	maven plugin:install

	This will install plugin into $MAVEN_HOME/plugins (and so into $HOME/.maven/cache).



