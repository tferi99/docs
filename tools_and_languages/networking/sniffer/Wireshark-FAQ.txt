=============
Wireshark FAQ
=============
- Whow to decrypt SSL/TLS traffic with Wireshark?
- SSL cannot decrypted with Wireshark
- BER Error: This field lies beyond the end of the known sequence definition.
- HTTP SSL protocol not recognized
- How to capture packets with tcpdump for Wireshark?
- How to capture tcpdump remotely?
- How to recognize if this is RTP or SRTP packet?


Filters
-------
- How to get packages by byte content?


Protocols
---------
- How Wireshark identifies RTP?
- How to recognize if this is RTP or SRTP packet?

-------------------------------------------------------------------------------------------------------------------------------------
Whow to decrypt SSL/TLS traffic with Wireshark?
===============================================
- obsolete method: RSA keys

	- go to Wireshark/Edit/Preferences/RSA Keys
	- upload private keys (because sender used public key of receiver to encrypt)

	Why obsolete?
	
		"The reason decrypting SSL with an RSA key isn’t commonly used anymore is that Perfect Forward Encryption (PFE) 
		has made it obsolete. Sessions negotiated with Diffie-Hellman don’t use the RSA key directly; instead they generate 
		a one-time key, stored only in RAM, that is encrypted using the key on disk."

- using SSLKEYLOGFILE

	- set SSLKEYLOGFILE, specify output log files
	- restart system (or just source applications)
	- browsers (Chrome, Firefox) will write dynamically generated DHE keys
		- start a browser and connect to HTTPS resource you want to decrypt
	- configure Wireshark to use it:
		- go to Wireshark/Edit/Preferences/Protocols/TLS
		- in (Pre)-Master-Secret log filename browse to the log file created by source applications
	- reload pre-captured file or capture new 
	
	- troubleshooting:
		- go to Wireshark/Edit/Preferences/Protocols/TLS
		- specify 'TLS debug file'
			This file will contain decrypting steps
	
SEE ALSO:	https://www.comparitech.com/net-admin/decrypt-ssl-with-wireshark/

-------------------------------------------------------------------------------------------------------------------------------------
SSL cannot decrypted with Wireshark
===================================
- If you find this in ssl.log:		

		ssl_restore_session can't find stored session
	
	This line indicates that the SSL session at hand is actually a reused
	SSL session with a short handshake. Wireshark needs the full SSL handshake
	to be able to calculate all the keys.

	Best practice is to start capturing before you start up the browser. 
	
- If the SSL/TLS session is using a DiffieHellman cipher (0x39 = TLS_DHE_RSA_WITH_AES_256_CBC_SHA). 
	This means the session key is transferred encrypted with a dynamically generated keypair (instead of encrypted with the public key from the certificate). 
	This means you can't decrypt this session with wireshark by providing the private key.

	"The reason decrypting SSL with an RSA key isn’t commonly used anymore is that Perfect Forward Encryption (PFE) 
	has made it obsolete. Sessions negotiated with Diffie-Hellman don’t use the RSA key directly; instead they generate 
	a one-time key, stored only in RAM, that is encrypted using the key on disk."
	
	
	UPDATE: using SSLKEYLOGFILE client writes dynamic keys into a log-file which can be used by Wireshark
		SEE MORE:	https://www.comparitech.com/net-admin/decrypt-ssl-with-wireshark/
	
SEE ALSO:	
	Whow to decrypt SSL/TLS traffic with Wireshark?
	https://www.comparitech.com/net-admin/decrypt-ssl-with-wireshark/
	
-------------------------------------------------------------------------------------------------------------------------------------
BER Error: This field lies beyond the end of the known sequence definition.
===========================================================================
If you find this message in a captured packet:

	Go to edit->preferences->protocol->ber and set the option:		Show inerenal ber...
	
	
------------------------------------------------------------------------------------------------------------------------------
HTTP SSL protocol not recognized
================================
If you don't use standard ports (e.g. Tomcat with custom ports: 18080, 18443) Wireshark cannot recognize protocol by default settings.

For HTTP protocol ports should be specified in Preferences dialog. Here should be also SSL/TLS specified.
If port not listed here, packets from this port won't be recognized.	




------------------------------------------------------------------------------------------------------------------------------
How to get packages by byte content?
====================================
You can refer to a byte in data part of a specific package like this:


	data-type[position:bytes] == number(s)

e.g:

	(udp && udp[8:1] == 0x80 && udp[9:1] == 0x0d)
	

------------------------------------------------------------------------------------------------------------------------------
How Wireshark identifies RTP?
=============================
Wireshark identifies RTP packets via two methods. 
	1) Parses out the SDP info inside of SIP packets and then tracks the associated IP/Port pair as RTP traffic.
	
	2) Compares the first few bytes of every UDP packet to the known signature of an RTP packets and if its close enough, 
		treats it as RTP.


Filtering RTP related packets:

	rtcp || rtp || udp && udp[8:1] == 0x80
	
If RTP cannot be recognized by Wireshark (because of lack of SIP dialog or RTCP) you can force RTP stream recognition by selecting an UDP package (length is 214) and (rightmouse + Decode as...).
Here add RTP an entry for current packet with RTP protocol. If it is really an RTP packet you will be able to analyse and play stream under Telephony/RTP.


------------------------------------------------------------------------------------------------------------------------------
How to capture packets with tcpdump for Wireshark?
==================================================

tcpdump -i <interface> -s 65535 -w <some-file>		
		
	Older versions of tcpdump truncate packets to 68 or 96 bytes. If this is the case, use -s to capture full-sized packets:		

OR use tshark. E.g:

	tshark -R "ip.addr == 10.51.51.32" -w tls.pcap 


------------------------------------------------------------------------------------------------------------------------------
How to capture tcpdump remotely?
================================
ssh user@host "tcpdump -s0 -w -" | wireshark -k -i -


NOTE:	Wireshark GUI will be started but watch the console in the background, password prompt is waiting.

------------------------------------------------------------------------------------------------------------------------------
How to recognize if this is RTP or SRTP packet?
===============================================
Actually you cannot differentiate between SRTP and RTP packets as they have the exact same headers.
So even if the packet is encrypted the header is not. So you will still see them as rtp packets in Wireshark!


