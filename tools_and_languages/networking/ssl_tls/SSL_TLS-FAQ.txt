===========
SSL/TLS FAQ
===========
- PKI basics
- TLS basics
- Man-in-the-middle problem and solution
- How to create a signature?
- Key exchange algorythm
- Certificate in details
- What is a certificate fingerprint?

- TLS record
- TLS handshake
- Testing SSL/TLS			!!!!!!!!!!!!!!! UNDER COSTRUCTION !!!!!!!!!!!!!!!
- TLS alerts
- Certificates for SSL
- How to get SSL certificate from a server?
- How to eliminate certificate alerts in a browser?
- How to create intermediate key for CA?
- OpenSSL tips
- How to filter Wireshark for TLS traffic?
- How to get certificates which are exchanged during TLS handshake?

---------------------------------------------------------------------------------------------------------------------------------
PKI basics
==========
- Encryption:
	- an encryption algorithm E is applied to 
	- the sensitive plaintext P along with a 
	- secret key K to produce 
	- the ciphertext C 
	which can be safely transmitted over an open channel.

		C = E(P,K)

- Decryption:
	- a decryption algorithm D is applied by the recipient to retrieve 
	- the original plaintext: 
	
		P = D(C,K)
		
Although there are a few different public-key encryption algorithms, the most popular — and fortunately, the easiest to understand — is the RSA algorithm, 
named after its three inventors Rivest, Shamir and Adelman.

To apply the RSA algorithm, you must find three numbers: e, d and m
related such that:

	((m^e)^d) % n = m
	
					############################################
					- where the PUBLIC key is:			e (exponent) and n (modulus)
					- and the PRIVATE key is:			d
					############################################
					
- Sending a message (encryption):
	When one party wishes to send a message in confidence to the holder of the private key, he computes and transmits 

	c = (m^e) % n
	
- Receiving a message (decryption):
	The recipient then recovers the original message m using 
	
	m = (c^d) % n
		
		
SEE ALSO:		http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art012
	
---------------------------------------------------------------------------------------------------------------------------------
TLS basics
==========
(From RFC-5246)

- The protocol is composed of two layers: 
	1. the TLS Record Protocol 
	2. and the TLS Handshake Protocol. 	
	At the lowest level, layered on top of some reliable transport protocol (e.g., TCP [TCP]), is the TLS Record Protocol.
	
- Symmetric cryptography is used for data encryption.
	The keys for this symmetric encryption are generated uniquely for each connection and are based on a secret 
	negotiated by another protocol (such as the TLS Handshake Protocol).
	
- The Record Protocol can also be used without encryption.	

- The TLS Record Protocol is used for encapsulation of various higherlevel protocols. 
	One such encapsulated protocol, the TLS Handshake Protocol, allows the server and client to authenticate each other and
	to negotiate an encryption algorithm and cryptographic keys before the application protocol transmits or receives its first byte of data.
	
- The TLS Handshake Protocol provides connection security that has three basic properties:
	1. The peer’s identity can be authenticated using asymmetric, or public key, cryptography (e.g., RSA [RSA], DSA [DSS], etc.). 
		This authentication can be made optional, but is generally required for at least one of the peers.
	2. The negotiation of a shared secret is secure: the negotiated secret is unavailable to eavesdroppers, and for any authenticated
		connection the secret cannot be obtained, even by an attacker who can place himself in the middle of the connection.
	3. The negotiation is reliable: no attacker can modify the negotiation communication without being detected by the parties to
		the communication.	
		
SEE ALSO: 
	TLS Handshake : Under The Hood - https://medium.com/@technospace/tls-handshake-under-the-hood-79d20c0020de
		
---------------------------------------------------------------------------------------------------------------------------------
Man-in-the-middle problem and solution
======================================
- When the would-be recipient transmits his public key, the eavesdropper intercepts it and replaces it with his own public key.
- The sender uses this fake public key to encrypt his data. 
- The eavesdropper decrypts it using his own private key, re-encrypts using the recipients public key, and sends it on its way. 
- Neither the sender nor the receiver can detect this, and the whole point of using encryption has been defeated 

===> any sufficiently motivated attacker can listen in on any seemingly secure conversation

Solution:
---------
The best known solution is "public key infrastructure" (PKI). 
At the heart of a PKI is a SET OF TRUSTED AUTHORITIES who can vouch for the validity of a public key.

The same encryption but REVERSED:
Instead of the sender encrypting the data with the public key, the asserting party (the one with the private key) 
ENCRYPTS A BIT OF DATA WITH THE PRIVATE KEY, and sends both that data (in the clear) and the encrypted data itself. 
So if you have access to the public key, you can use it to decrypt the data. 

	
	SUCH A TOKEN/ENCRYPTED DATA PAIR IS CALLED A DIGITAL SIGNATURE.
	
	s = (m^d) % n

the recipient, who has the public key, can verify the signature by verifying that 

	m = (s^e)% n

One practical problem with this approach is that 's' would be very long (as long as m), so a cryptographically secure hash (such as MD5 or SHA-1[2])
which was generated uniquely from 'm' is typically used instead.
One trusted party (CA - Certificate Authority) can sign the public key of another - the recipient, if he trusts the signer - can check the signature.

What is certificate?
--------------------
A certificate is a holder for public key, along with a few assertions about the owner of the public key:


	CERTIFICATE   =   <the public key of the site>  +  <digital signature supplied by a trusted CA>
	
	
SEE ALSO:		http://commandlinefanatic.com/cgi-bin/showarticle.cgi?article=art012	


---------------------------------------------------------------------------------------------------------------------------------
How to create a signature?
==========================
Signature is generated by a trusted party from data, for example from a public key 
to prove that public key really owned by the other endpoint. 
Trusted party (CA) creates certificates from the protected data and the signature

	certificate = public_key + signature
	
Signature is a small data which generated:
- from the protected data with HASH ALGORYTHM
	and
- encrypted by private key of CA

	Plain text ==== hash function ===> Hash

Hash algorythms:
		- MD5 (5th version of Message Digest algorythm) : Most of these WEAKNESSES manifested themselves as COLLISIONS. Because of this, MD5 began to be phased out.		
		- SHA-1, SHA-2, SHA-3 (Secure Hash Algorythm)
	
People focus on the BIT-LENGTH as the important distinction. 
SHA-1 is a 160-bit hash. SHA-2 is actually a “family” of hashes and comes in a variety of lengths, the most popular being 256-bit.

- If you see “SHA-2”, “SHA-256” or “SHA-256 bit” those NAMES ARE REFERRING TO THE SAME THING.
- If you see “SHA-224”, “SHA-384” or “SHA-512” those are REFERRING TO THE ALTERNATE BIT-LENGTHS OF SHA-2.

	
SEE ALSO:		
	https://www.sciencedirect.com/topics/computer-science/hashing-algorithm
	https://en.wikipedia.org/wiki/Secure_Hash_Algorithms
	
	
	
---------------------------------------------------------------------------------------------------------------------------------
Key exchange algorythm
======================
Hybrid Encryption Systems: 	which use of both SYMMETRIC and ASYMMETRIC keys.

 These systems often make use of a KEY EXCHANGE PROTOCOL like the DIFFIE-HELLMAN ALGORITHM. 
 
In these systems:
- an ASYMMETRIC algorithm is used to establish a connection. Then, a key is transferred between the two systems. 
- This key is then used for establishing SYMMETRIC encryption between the two systems.
	
	
Steps in draft:
	- client send a request to server

	- server responses a certificate (with e (exponent) and n (modulus))

	- client verified signature of certificate:
		- First, it computes the secure hash of the whole certificate using the identified signature algorithm
		- Then it takes the signature and computes:			(s^e) % n
		- if they match, the certificate is valid 			
		
	- if signature accepted then client creates a symmetric SESSION KEY and encrypts it with public key of server: c = (k^e) % n

	- client sends encrypted symmetric key to server, which uses that key for subsequent communications.
		Web Browser and server encrypt data over the connection using the SESSION KEY.
		
	
SEE ALSO:	
	https://www.sciencedirect.com/topics/computer-science/hashing-algorithm
	http://www.steves-internet-guide.com/ssl-certificates-explained/
	
	
---------------------------------------------------------------------------------------------------------------------------------
Certificate in details
======================
You can dump a certificate from a file:
	
	$ openssl x509 -text -noout -in signed.pem
	Certificate:
		Data:
			Version: 3 (0x2)
			Serial Number:
				e1:07:13:67:48:94:92:ab
			Signature Algorithm: sha256WithRSAEncryption
			Issuer: C = HU, ST = Vp, L = BFured, O = Andtek, OU = Dev, CN = andtek.lab.eu													<<< signed by
			Validity
				Not Before: Sep 14 05:39:30 2020 GMT
				Not After : Sep 12 05:39:30 2030 GMT
			Subject: C = HU, ST = veszprem, L = bfured, O = andtek, OU = company, CN = ceerd-ftoth-apas1.andtek.cee.cs.eilab.biz			<<< protected resource
			Subject Public Key Info:
				Public Key Algorithm: rsaEncryption
					RSA Public-Key: (2048 bit)
					Modulus:																												<<< modulus of public key
						00:86:79:a1:cc:56:88:ae:ac:ab:c7:05:c7:11:04:																		<<< 2048 bits - it's always prefixed by a 0x00 placeholder 
						69:00:de:f5:0c:7f:b1:11:63:e3:37:7e:eb:0c:f6:																		<<< this is used to stop some large-number libraries from interpreting this as a negative two's-complement number	
						d9:c8:b2:ba:b0:33:91:77:63:fe:4f:ac:67:95:13:
						07:90:18:2a:01:74:ce:2e:6f:1c:a3:a5:e6:d9:63:
						74:7b:cf:85:cc:a1:60:74:74:c6:a0:e4:36:c6:f4:
						d3:26:19:d6:9c:0d:32:06:b8:ee:7e:2d:b8:b8:89:
						96:99:8b:c7:e0:18:c3:aa:99:db:d4:c2:44:a6:e5:
						93:5a:1c:99:95:36:56:6d:a2:f0:93:f3:26:38:e0:
						a4:c1:70:d4:97:3c:c0:28:84:84:1b:21:97:92:73:
						bc:ff:27:f1:a1:31:89:dd:6e:f2:e2:6d:2b:a7:ed:
						8a:94:5b:38:52:8d:42:6b:e0:2b:30:e6:6a:f6:94:
						40:ed:b2:52:3d:5c:81:a6:4e:39:c7:b8:31:58:62:
						2f:df:cb:1f:35:2d:90:6a:53:c9:32:e8:1b:61:d3:
						da:1d:3a:1e:5c:5f:8d:3f:7d:55:f4:be:5e:96:31:
						06:4f:c0:9b:37:b7:ce:7c:39:a6:05:29:de:d2:c6:
						34:cc:8f:a2:33:86:db:41:c7:2d:31:93:45:15:5e:
						13:b5:73:2e:4d:0c:27:af:ff:2b:21:31:a2:8f:94:
						a2:4b
					Exponent: 65537 (0x10001)																								<<< exponent of public key
			X509v3 extensions:
				X509v3 Subject Alternative Name:
					DNS:ceerd-ftoth-apas1.andtek.cee.cs.eilab.biz, IP Address:10.51.51.121
				X509v3 Key Usage:
					Digital Signature, Key Encipherment
		Signature Algorithm: sha256WithRSAEncryption
			 6d:b2:e9:39:b2:26:ca:8c:02:cc:38:df:41:c5:8d:44:ee:05:
			 d9:68:7c:69:f1:45:06:ed:f8:1c:e5:b7:57:01:49:14:04:a0:
			 df:b5:f4:b9:30:98:47:3c:56:29:80:e0:f7:44:05:e1:70:f9:
			 8f:ef:a4:7f:b3:e9:df:dc:e1:d8:19:e7:38:98:3b:aa:1d:00:
			 c6:a4:a9:e5:ee:ed:af:69:ed:aa:1d:0c:0a:eb:6d:02:f5:7c:
			 8b:34:62:ad:d5:df:bb:b4:64:a5:fb:de:e8:8e:c9:c9:c7:34:
			 7e:c7:ea:10:e6:90:95:1d:0a:de:94:ce:45:5a:f6:c4:7b:3d:
			 2f:8b:81:a8:79:be:59:a5:ef:07:13:27:19:eb:e4:45:82:e0:
			 bf:2b:a9:37:d9:cb:52:c9:d3:8a:69:e1:64:61:a2:50:69:17:
			 f7:72:17:35:0a:d8:ff:29:0f:97:81:5c:6d:c0:2c:45:44:38:
			 51:93:d2:05:cc:6d:f3:3e:a8:c8:f4:b3:76:53:ae:43:4a:c0:
			 31:89:23:73:d8:f9:f5:b6:de:68:2e:e7:6a:cc:a3:34:7e:59:
			 62:7d:16:8c:81:12:65:84:f0:40:8b:90:0e:c5:b3:b3:a1:b8:
			 35:32:ee:2b:64:42:52:95:cd:06:af:23:0d:99:5f:72:61:d2:
			 b9:28:43:b3:94:37:f1:05:bb:82:22:3c:be:c4:c5:fa:59:73:
			 fc:a7:cd:ae:73:59:6f:ce:72:a7:ad:58:01:6b:0e:64:5e:fc:
			 34:9b:3b:f2:40:fb:18:5d:d1:4a:43:0f:50:8f:d4:62:9b:9a:
			 86:a5:48:85:b5:d3:f6:03:38:90:47:6f:ee:78:f1:29:cb:d7:
			 be:6d:93:35:3b:0b:4e:7c:3a:35:29:2f:5d:ca:52:86:95:01:
			 66:60:59:dc:e1:61:be:ac:86:f4:7f:e6:04:f1:a3:f3:77:b6:
			 73:27:d2:e3:e0:b4:07:08:02:00:73:90:8d:26:00:81:c0:4b:
			 1b:ab:91:2f:5c:27:9a:c5:9f:89:e8:23:a9:e6:86:cd:2a:9b:
			 91:23:ff:d3:4b:db:a3:c1:62:ea:93:31:7e:95:55:a7:56:3c:
			 46:8b:d9:55:f3:f6:84:a8:6a:ad:d7:ca:45:01:e4:e8:d6:69:
			 cf:18:4b:65:4f:14:d5:41:72:af:01:29:17:c4:b3:aa:12:4f:
			 8d:76:eb:0a:d4:b0:df:78:4f:e9:95:dc:67:60:1d:92:5b:26:
			 96:40:84:72:4f:b0:f0:7f:be:26:a9:d4:af:bc:3c:25:f6:75:
			 0a:2b:65:53:a6:70:63:66:a8:25:a5:82:df:28:d7:7a:73:5f:
			 6c:20:cf:66:97:74:33:ad
	
---------------------------------------------------------------------------------------------------------------------------------	
What is a certificate fingerprint?
==================================
It is a hash of the actual certificate, and can be used to verify the certificate without the need to have the CA certificate installed.
This is very useful in small devices that don’t have a lot of memory to store CA files.

	
---------------------------------------------------------------------------------------------------------------------------------
TLS record
==========

byte 0	: content type
	- ChangeCipherSpec (0x14 20)
	- Alert (0x15	21)
	- Handshake (0x16	22)
	- Application (0x17 23)
	
byte 1-2	Version
byte 3-4	Length of message

byte 5 		message type
	- 0		HelloRequest
	- 1		ClientHello
	- 2		ServerHello
	- 11	Certificate
	- 12	ServerKeyExchange
	- 13	CertificateRequest
	- 14	ServerHelloDone
	- 15	CertificateVerify
	- 16	ClientKeyExchange
	- 20	Finished
	
byte 6-8	message data length

byte 9-		message data

SEE ALSO: 
	doc\software\network\ssl_tls.zip\Transport Layer Security (TLS).mht
	
---------------------------------------------------------------------------------------------------------------------------------
TLS handshake
=============
ClientHello
	A client sends a ClientHello message specifying the highest TLS protocol version it supports, a random number, a list of suggested CipherSuites and suggested compression methods
	
ClientHello
	It contains the chosen protocol version, a random number, CipherSuite and compression method from the choices offered by the client. To confirm or allow resumed handshakes the server may send a session ID.
	
ServerHelloDone 
	Message to indicate server is done with handshake negotiation.	
	
ClientKeyExchange	
	The client responds with a ClientKeyExchange message, which may contain a PreMasterSecret, public key, or nothing. 	

ChangeCipherSpec 
	Essentially telling the other side , "Everything I tell you from now on will be authenticated (and encrypted if encryption parameters were present in the server certificate)." 
	
	
	
Simple TLS handshake:
	CLIENT										SERVER
			--- Handshake: ClientHello	--->					
			<--- Handshake: ServerHello ---
			<--- Handshake: Certificate ---
			<--- Handshake: ServerHelloDone ---
			--- Handshake: ClientKeyExchange --->
			--- ChangeCipherSpec --->							<<<<<<< CLIENT: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).
			--- Handshake: Finished (ENCRYPTED) --->
			<--- ChangeCipherSpec ---							<<<<<<< SERVER: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).
			<--- Finished (ENCRYPTED) ---
			
			=== Application (ENCRYPTED) ===>
			<=== Application (ENCRYPTED) ===
			...
			...
	
Client-authenticated TLS handshake
	CLIENT										SERVER
			--- Handshake: ClientHello	--->
			<--- Handshake: ServerHello ---
			<--- Handshake: Certificate ---
			<--- Handshake: CertificateRequest ---			
			<--- Handshake: ServerHelloDone ---
			--- Handshake: Certificate --->
			--- Handshake: ClientKeyExchange --->
			--- Handshake: CertificateVerify --->
			--- ChangeCipherSpec --->							<<<<<<< CLIENT: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).
			--- Handshake: Finished (ENCRYPTED) --->
			<--- ChangeCipherSpec ---							<<<<<<< SERVER: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).
			<--- Finished (ENCRYPTED) ---
			
			=== Application (ENCRYPTED) ===>
			<=== Application (ENCRYPTED) ===
			...
			...
	
Resumed TLS handshake	
	CLIENT										SERVER
			--- Handshake: ClientHello	--->
			<--- Handshake: ServerHello ---
			<--- ChangeCipherSpec ---							<<<<<<< SERVER: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).	
			<--- Finished (ENCRYPTED) ---
			--- ChangeCipherSpec --->							<<<<<<< CLIENT: Everything I tell you from now on will be authenticated (and encrypted, if encryption was negotiated).
			--- Handshake: Finished (ENCRYPTED) --->
			
			=== Application (ENCRYPTED) ===>
			<=== Application (ENCRYPTED) ===
			...
			...

				
			
---------------------------------------------------------------------------------------------------------------------------------
Testing SSL/TLS			
================

Tools
-----
- OpenSSL (RECOMMENDED)

	Test connection with OpenSSL:

		openssl s_client <host>:<port>
	
	SEE ALSO:	doc\software\network\ssl_tls\OpenSSL-FAQ.txt
				doc\software\network\ssl_tls\OpenSSL-FAQ.txt/Testing SSL/TLS with OpenSSL
	
- ssltap 
	The ssltap command opens a socket on a rendezvous port and waits for an incoming connection from the client side. 
	It works as a proxy which calls the input host:port if you make a request to default port (1924).
	
	- Installation:		
	
		apt-get install libnss3-tools
	
	- Usage:
		- On proxy specify target host:port :
		
			ssltap -s -x -f index.hu:443
			
		- In Client browser call:
		
			https://PROXY_HOST:1924
		

	It prints SSL/TLS handshaking and saves certificates into DER files into local directory of proxy.
	
	HINTS:
	- Often, you'll find that the server certificate does not get transferred, or other parts of the handshake do not happen. This is because the browser is taking advantage 
		of session-id-reuse (using the handshake results from a previous session). If you restart the browser, it'll clear the session id cache.
	- If you run the ssltap on a different machine that the ssl server you're trying to connect to, the browser will complain that the host name you're trying
		to connect to is different to the certificate, but it will still let you connect, after showing you a dialog.	
	
	
	SEE ALSO:
		http://web.mit.edu/Ghudson/dev/third/mozilla/security/nss/cmd/ssltap/ssltap-manual.html
		https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSS/tools/NSS_Tools_ssltap

- Wireshark

	You can trace TLS handhaking if you set appropriate filter, e.g:
	
		ip.addr == 10.51.51.124 && ssl
		
	Then make a HTTPS connection to target host in a local browser.
		

- SSLScan
	
	SSLScan is a fast SSL port scanner. SSLScan connects to SSL ports and determines 
	
		- what ciphers are supported
		- which are	the servers  preferred  ciphers
		- which  SSL  protocols  are supported  
		- and returns  the   SSL   certificate.   
		
		Client certificates / private key can be configured and output is to text / XML.

		sslscan [Options] [host:port | host]
		
		Supported platforms: Linux, Windows
		
		
- Portecle

	Portecle is a user friendly GUI application for creating, managing and examining keystores, keys, 
	certificates, certificate requests, certificate revocation lists and more.
	
	How to examine an SSL/TLS connection:
	
		- From the Examine menu, choose Examine SSL/TLS Connection.
		- The Examine SSL/TLS Connection dialog will appear.
		- Enter the host name or IP address for the connection to be examined, for example sourceforge.net.
		- Enter the port number for the connection to be examined, for example 443 for HTTPS.
		- Click on the Examine button.
		- The Certificate Details for SSL/TLS Connection dialog will appear.
		- After viewing the details acknowledge the dialog by pressing the OK button.

	
	
---------------------------------------------------------------------------------------------------------------------------------
TLS alerts
==========
(From RFC-5246)

	enum { warning(1), fatal(2), (255) } AlertLevel;
	enum {
		close_notify(0),
		unexpected_message(10),
		bad_record_mac(20),
		decryption_failed_RESERVED(21),
		record_overflow(22),
		decompression_failure(30),
		handshake_failure(40),
		no_certificate_RESERVED(41),
		bad_certificate(42),
		unsupported_certificate(43),
		certificate_revoked(44),
		certificate_expired(45),
		certificate_unknown(46),
		illegal_parameter(47),
		unknown_ca(48),
		access_denied(49),
		decode_error(50),
		decrypt_error(51),
		export_restriction_RESERVED(60),
		protocol_version(70),
		insufficient_security(71),
		internal_error(80),
		user_canceled(90),
		no_renegotiation(100),
		unsupported_extension(110),
		255)
	} AlertDescription;

	struct {
		AlertLevel level;
		AlertDescription description;
	} Alert;
		
For detailed description of alerts see RFC-5246.


		
---------------------------------------------------------------------------------------------------------------------------------
Certificates for SSL
====================
Client should contain/access a certificate which can verify signed resources.
Certificates are identified by CN field.

The Common Name (CN), also known as the Fully Qualified Domain Name (FQDN), is the characteristic value within a Distinguished Name. 

The Common Name (also CN) identifies the host name associated with the certificate, for example www.example.com or example.com.
It consists of a single host name in case of a single-name certificate (e.g. example.com, www.example.com), or a wildcard name 
in case of a wildcard certificate (e.g. *.example.com). In all cases, it is not an URL and therefore it doesn’t include any protocol 
(e.g. http:// or https://), port number, or pathname.

The common name represents the name protected by the SSL certificate. The certificate is valid only if the request hostname matches the certificate common name. 
Most web browsers displays a warning message when connecting to an address that does not match the common name in the certificate.

	E.g:	
		if URL: 
		
			 https://idp2.example.com:8443/openam/saml2/jsp/exportmetadata.jsp?entityid=https://idp2.example.com:8443/openam&realm=/MSAD
			 
		then you need something like this:
	
			Alias name: tomcat
			Creation date: Jul 19, 2018
			Entry type: PrivateKeyEntry
			Certificate chain length: 1
			Certificate[1]:
			Owner: CN=idp2.example.com, OU=Tomcat, O=Tomcat, L=Tomcat, C=HU					<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
			Issuer: CN=idp2.example.com, OU=Tomcat, O=Tomcat, L=Tomcat, C=HU
			Serial number: 216629f6
			Valid from: Thu Jul 19 16:08:07 CEST 2018 until: Sun Dec 03 15:08:07 CET 2045
			Certificate fingerprints:
					 MD5:  81:A0:17:05:18:5B:F9:38:A4:47:FE:A5:B5:4A:E9:2B
					 SHA1: 04:FF:BC:1B:61:B9:AA:66:D7:05:A1:58:89:A2:C5:3B:4B:83:6F:23
					 SHA256: 20:29:92:64:21:8C:11:4A:52:1F:8A:1D:BF:C0:0B:91:E6:0F:26:52:39:84:92:B1:92:E2:50:40:12:16:2E:88
					 Signature algorithm name: SHA256withRSA
					 Version: 3


---------------------------------------------------------------------------------------------------------------------------------
How to get SSL certificate from a server?
=========================================
Method 1: sslscan

		sslscan [Options] [host:port | host]
		

Method 2:

		openssl s_client -host <host> -port <port> -prexit -showcerts  </dev/null
		
---------------------------------------------------------------------------------------------------------------------------------
How to eliminate certificate alerts in a browser?
=================================================
Sometimes when you are connecting to a server with HTTPS browser issues a warning about this site is not secure (e.g. Chrome: Your connection is not private).
Here you can ignore this warning and you can go to site or you can leave this page.

Possible causes:
	- Server has self-signed certificate so it's not signed by a well-known CA (installed with browser) - so certificate is not trusted.
	
		FIX: 
			Server side solution: Sign server certificate by a CA. Or create you CA cerificate and sign server certificate with this CA certificate.
			In this case you have to install CA certificate into your servers and client browsers.
		
	
	- Server certificate is CA signed.
	
		FIX: 
			Check if CA certificate is installed into browser (Trusted Root Certificate Authorities).
			If not, install it.

	- Name-mismatch:
	
		Sometimes URL typed into the browser and the information contained in the certificate don't match.
		The CN field of the subject should contain FQDN of the site. Access site always with matching FQDN.
		
		In additionally, certificates have extended SAN (Subject Alternative Name) fields which should contain exact information:
		
		For example:
		
			X509v3 Extensions:
				X509v3 Subject Alternative Name:
					DNS:ceerd-openam.andtek.cee.cs.eilab.biz, IP Address:10.51.51.120
		
		
	!!! IMPORTANT !!!		
		
	After importing certificates into a browser always restart it, e.g. in Chrome:
	
		chrome://restart
		


---------------------------------------------------------------------------------------------------------------------------------
How to create intermediate key for CA?
======================================
SEE HERE:
	https://jamielinux.com/docs/openssl-certificate-authority/index.html
SEE ALSO:
	Scripts in:
		- tools_and_languages\networking\ssl_tls\OpenSSL\create-ca
		- apas_trunk\development\keystore-tools\keystore-tools 

		
---------------------------------------------------------------------------------------------------------------------------------
OpenSSL tips
============
SEE MORE: https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs		


---------------------------------------------------------------------------------------------------------------------------------
How to filter Wireshark for TLS traffic?
========================================
Simple:				tls

Handshake type:		tls && 	ssl.handshake.type == X

	where type: 
	
		0	HelloRequest
		1	ClientHello
		2	ServerHello
		4	NewSessionTicket
		8	EncryptedExtensions (TLS 1.3 only)
		11	Certificate
		12	ServerKeyExchange
		13	CertificateRequest
		14	ServerHelloDone
		15	CertificateVerify
		16	ClientKeyExchange
		20	Finished	


SEE ALSO:
	https://davidwzhang.com/2018/03/16/wireshark-filter-for-ssl-traffic/
	https://tools.ietf.org/html/rfc5246

	
---------------------------------------------------------------------------------------------------------------------------------
How to get certificates which are exchanged during TLS handshake?
=================================================================
- collect packets with Wireshark

- add filter:	tls && ssl.handshake.type == 11

	SEE: How to filter Wireshark for TLS traffic?

	TLS handshaking packets are where Handshake type: Certificate (11)
	
- open protocol details:
		- Transport Layer Security
			- TLSv.. Reecord Layer
				- Handshake Protocol: Certificate
					- Certificates
						- Certificate
						
- RighClick / Export packet bytes...

- save into SomeName.cer file

							
