=============================
Data flow in AndroMDA usecase
=============================

1. UseCase and requests

2. Data exchange objects
2.1 Controller-calling forms
2.2 Request data exchange form (request-form)
3. Data flow
3.1 Data flow between client-side states
3.2 Data flow between usecases
4. Modelling data flow
4.1 Sending data for the next usecase
4.2 Getting data from HTTP request parameters
5. Using VOs for data exchange

1. UseCase and requests
-----------------------
Base unite of dynamic modeling of AndroMDA is usacase.
Usecase contains a set of actions that are logically belonging together.

Entry point of usecase is always a WEB request but usecase can contain more
than one request. Request is starting when WEB page has been
submitted and finished when next WEB page has been rendered.

That means request boundaries are not correspond to usecase boundaries.
They are overlapped. A request started in the last client-side state of usecase
will be completed in the forst client-side state of the next usecase.

SO REQUEST IS ALIVE FROM THE OUTGOING TRANSITION OF A CLIENT SIDE STATE 
TO THE NEXT CLIENT SIDE STATE.
SERVER SIDE STATES BETWEEN 2 CLIENT SIDE STATES BELONG TO THE SAME REQUEST, AND 
THEY ARE RESPONSIBLE FOR PROCESSING PARAMETERS COMING FROM THE FIRST CLIENT STATE
AND PASSING PARAMETERS TO THE NEXT CLIENT STATE.

You can consider initial state as the first client side state.

2. Data exchange objects
------------------------

2.1 Controller-calling forms
----------------------------
If you adds a deferrable event to a server side state it calls a controller method.
Controller methods DOESN'T have the same number of parameters as you specified in modell of 
controller class, but every controller method has its own form that contains parameter set
specified by the model.

CONTROLLER-CALLING FORMS ARE GENERATED AS INTERFACES WHICH CONTAIN PROPERTIES 
MODELLED AS CONTROLLER METHOD PARAMETERS.

Form interfaces are implemented by request-forms. Controller methods called during the same 
request are implemented by the same form.


2.2 Request data exchange form (request-form)
---------------------------------------------
Request data exchange form (or shortly called Request-form) is responsible for collecting data during 
processing a request, and it used for data exchange between server- and clien-side states, and between 
request and moreover between usecases.

A request-form fields are collected from the DISTINCT UNIO of the followings:

	(1) all EVENT PARAMETERS are sent on any transition between start and end client-side states

	(2) all EVENT PARAMETERS are sent by NEXT(!) CLIENT-SIDE STATES 

	If this is the first request of the usecase:
	(3) all OUTGOING PARAMETERS FROM PREVIOUS USECASES 
		Event parameters come from server-side state and going into final 
		state of last usecase.

		
NOTE: 
	Request-form implements CONTROLLER-CALLING FORM interfaces called during this request.
	These forms don't add new fields since controller methods can contain fields already 
	exist as event parameters (see (1)).
	
	
3. Data flow
------------
3.1 Data flow between client-side states
----------------------------------------
So how data will be sent to a GUI page to another GUI page, and how will be processed data by controller.

1. GUI page submitted (in the same page in JSF)

2. Calling page-submit controller method.
	This is controller method bound to outgoing transition of client-side state and name of method:
	
		StateName + EventName
		
	Steps are:
		- getting previous request-form from ADF/JSF context or session (from "form" variable)
			This form was created by previous request and collected data during propcessing previous request.
		- creating request-form for new request
		- populating NEW request-form from OLD request-form 
		- populating NEW request-form from REQUEST PARAMETERS
		- storing NEW request-form back
	
3. Processing form data in server side states.
	When a deferrable event calls a controller method, request-form will be passed as parameter to this 
	controller method (In fact not as request-form , but as a controller-calling form. But this is an interface 
	implemented by request-form).
	
4. Finally next client-side state will be reached, and GUI page will be rendered based on data of request 
	form. 
	
	
3.2 Data flow between usecases
------------------------------	
Data will be passed to next usecase in the same way described in 3.1 .
In fact data exchange is not performed between usecases, but between the last client-side state and 
next usecase.

THE ONLY DIFFERENCE THAT NOT A PAGE-SUBMIT WILL BE CALLED BUT ENTRY METHOD OF NEXT USECASE.


4. Modelling data flow
----------------------
4.1 Sending data for the next usecase
-------------------------------------
A. Event parameters of transitions going to FINAL STATES will be generated into starting requrest form
	of next usecase.

B. EVERY MEMBER OF LAST REQUEST-FORM OF THE CURRENT USECASE WILL BE SENT TO NEXT USECASE.
	
	So every event parameter between the last client-side state and final state will be
	sent. They will be mapped into next usecase if your first request-form contains 
	variables with the same name.
	

4.1 Receiving data from the previous usecase
--------------------------------------------
New request-form is populated from the previous request-form in usecase entry method.
That means variables will be sent which have THE SAME NAME as variables in the previous
request-form.
		
		
4.2 Getting data from HTTP request parameters		
---------------------------------------------
Incoming variables of usecases can be specified by request parameters.
If you add a parameter with a name existing in the first request-form of usecase, parameter will
be populated into request form. In addition, this value will be overwrite value come from previous
usecase.

		
5. Using VOs for data exchange
------------------------------