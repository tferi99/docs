============
MikroORM FAQ
============

- Fundamentals
	- Managed entity
	- Unit of Work
	- Change detection
	- Modeling Entity Relationships
	
- Modeling Entity Relationships		
	
Entities
--------
- Entity properties


UnitOfWork
----------
- How to enumerate UnitOfWork identity map?
- How to clear identity map cache?

Fetching data
-------------
- How to get entity by primary key?
- Specifying loading strategy

Data manipulation
-----------------
- How to delete by primary key?

Schema management
-----------------
- How to generate/update DB schema?
- Howto check DB schema?

Troubleshooting
---------------
- ERROR: TypeError: Cannot read property '...' of undefined
- ERROR: column ... is of type jsonb but expression is of type ...
- ERROR: invalid input syntax for type json
- ERROR: To use assign() on not managed entities, explicitly provide EM instance

NestJS
------
- How to configure NestJS?

------------------------------------------------------------------------------------------------------------------------------------------------
Fundamentals
============
- Managed entity:
	Entity is managed if 
		- itâ€™s fetched from the database							2 options to create managed objects:
			- via em.find(), em.findOne() 								- fetch existing objects from DB
			- or via other managed entity) 								- em.persist() new objects
		- or registered as new through em.persist()

- MikroORM uses identity map in background so you will always get the SAME INSTANCE OF ONE ENTITY.		
		
- Unit of Work
	- MikroORM uses the Identity Map pattern to track objects. Whenever you fetch an object from the database, 
		MikroORM will keep a reference to this object inside its UnitOfWork.
		
		Instead of creating a second object MikroORM first gets the primary key from the query result row and checks if it already has an object 
		inside the UnitOfWork with that primary key.		
	
	- If different fetch operations returns the same object only one entry will be created for this object in UnitOfWork.
	
- Change detection
	Whenever you call em.flush() MikroORM will iterate over all entities you previously marked for persisting via em.persist(). 
	For each object it will compare the original property and association values with the values that are currently set on the object. 
	If changes are detected then the object is queued for a UPDATE operation. Only the fields that actually changed are updated.	

	
------------------------------------------------------------------------------------------------------------------------------------------------
Modeling Entity Relationships
=============================

- Relations can be unidirectional and bidirectional.

- Unidirectional are defined only on one side (the owning side). 

- Bidirectional are defined on both sides, while one is 
	- OWNING SIDE (where references are store), 
	- marked by inversedBy attribute pointing to the INVERSE SIDE. 
	
- On the inversed side we define it with mappedBy attribute pointing back to the owner:	
	When modeling bidirectional relationship, you can also omit the inversedBy attribute, defining mappedBy on the inverse side is enough as it will be auto-wired.	

		OWNING SIDE --------------------- INVERSE SIDE
			[inversedBy] <------------> mappedBy 
			
			ManyToOne					OneToMany
			


------------------------------------------------------------------------------------------------------------------------------------------------
How to generate/update DB schema?
=================================
Use MkroORM CLI.

- prerequisite:
	- install:		npm install --save-dev @mikro-orm/cli
	
	- config: you need mikro-orm.config.ts for CLI
	
		import { UnderscoreNamingStrategy } from '@mikro-orm/core';
		import { SqlHighlighter } from '@mikro-orm/sql-highlighter';
		import { logger } from '@mikro-orm/nestjs';

		export default {
		  type: 'postgresql',
		  dbName: 'mymikroormdemo',
		  entitiesTs: ['./src/entities'],
		  entities: ['./dist/entities'],
		  autoLoadEntities: true,
		  discovery: {
			warnWhenNoEntities: true
		  },
		  namingStrategy: UnderscoreNamingStrategy ,
		  highlighter: new SqlHighlighter(),
		  debug: true,
		  logger: logger.log.bind(logger)
		};
		

- run manually:
	
	node_modules/.bin/mikro-orm schema:update --fk-checks -r

- add to package.json:

	"db-update": "node_modules/.bin/mikro-orm schema:update --fk-checks -r",

- in a script:

	recreateDbWithSchema.bat:
	
		dropDb -U postgres mikroormnestts
		createDb -U postgres mikroormnestts
		call node_modules/.bin/mikro-orm schema:update --fk-checks -r

		
------------------------------------------------------------------------------------------------------------------------------------------------
Howto check DB schema?
======================
- Method 1:	script

	pg_dump -U postgres <db-name> > db.sql
	
	
- Method 2: ER diagram

	- create ER diagram in Aqua DB Studio with:				ER Modeler/Generate
		
	- format diagram with:									Sheet/Layout/Hierarchical (or Tree)
	

------------------------------------------------------------------------------------------------------------------------------------------------
ERROR: TypeError: Cannot read property '...' of undefined
=========================================================
If you hava this error related to an association then you have likely a circular dependency.

If you encounter this, you have basically 2 options:

1. Entities array
	Use entity references in entities array to have control over the order of discovery. 
	You might need to play with the actual order you provide here, or possibly with the order of import statements.

2. Use strings instead of references in annotations	
	Use strings instead of references (e.g. @OneToMany('Book', 'author')). 
	The downside here is that you will lose the typechecking capabilities of the decorators.
	
	
------------------------------------------------------------------------------------------------------------------------------------------------
Entity properties
=================
- auto-increment PK:

	@PrimaryKey()
	id!: number; // auto increment PK in SQL drivers
	
- Optional values (null)
	
	When you define the property as optional (marked with ?), this will be automatically considered as nullable property (mainly for SQL schema generator).	
	
		@Property()
		age?: number;
	
- Mandatory values (not null)
	
	Define property with '!':
	
		@Property()
		title!: string;

- Default values:

	- runtime default:
	
		This approach should be preferred as long as you are NOT USING ANY NATIVE DATABASE function like now(). 
		With this approach your entities will have the default value set even before it is actually persisted into the database
		(e.g. when you instantiate new entity via new Author() or em.create(Author, { ... }).
		
			@Property()
			foo!: number = 1;
		
	- database default:
	
		This way the actual default value will be provided by the database, and automatically mapped to the entity property after 
		it is being persisted (after flush). To use SQL functions like now(), use defaultRaw.
		
			@Property({ default: 1 })
			foo!: number;

			@Property({ default: 'abc' })
			bar!: string;

			@Property({ defaultRaw: 'now' })
			baz!: Date;		

- Enums:

			@Enum()
			role!: UserRole; // string enum

			@Enum()
			status!: UserStatus; // numeric enum

			@Enum(() => OutsideEnum)
			outside!: OutsideEnum; // string enum defined outside of this file

			@Enum({ items: () => OutsideNullableEnum, nullable: true })
			outsideNullable?: OutsideNullableEnum; // string enum defined outside of this file, may be null
			
			export enum UserRole {
			  ADMIN = 'admin',
			  MODERATOR = 'moderator',
			  USER = 'user',
			}

			export const enum UserStatus {
			  DISABLED,
			  ACTIVE,
			}			
			
- map to PK:

	number:
	
		@ManyToOne(() => User, { mapToPk: true })
		user: number;
		
	composite:
	
		@ManyToOne(() => User, { mapToPk: true })
		user: [string, string]; // [first_name, last_name]
		
		
SEE ALSO:	https://mikro-orm.io/docs/defining-entities



------------------------------------------------------------------------------------------------------------------------------------------------
How to configure NestJS?
========================
- install:

	$ npm i -s @mikro-orm/core @mikro-orm/nestjs @mikro-orm/postgresql  # for postgresql

- config EntityManager:

	With this config the EntityManager will be available to inject across entire project (without importing any module elsewhere).

	- Method 1:	config in src/mikro-orm.config.ts:

			import { UnderscoreNamingStrategy } from '@mikro-orm/core';
			import { SqlHighlighter } from '@mikro-orm/sql-highlighter';
			import { logger } from '@mikro-orm/nestjs';

			export default {
			  type: 'postgresql',
			  dbName: 'mymikroormdemo',
			  entitiesTs: ['./src/entities'],
			  entities: ['./dist/entities'],
			  autoLoadEntities: true,
			  discovery: {
				warnWhenNoEntities: true
			  },
			  namingStrategy: UnderscoreNamingStrategy ,
			  highlighter: new SqlHighlighter(),
			  debug: true,
			  logger: logger.log.bind(logger)
			};
		
		
	- Method 2: config in AppModule:

			@Module({
			  imports: [
				MikroOrmModule.forRoot({
				  entities: ['./dist/entities'],
				  entitiesTs: ['./src/entities'],
				  dbName: 'my-db-name.sqlite3',
				  type: 'sqlite',
				}),
			  ],
			  controllers: [AppController],
			  providers: [AppService],
			})
			export class AppModule {}
			
			
		NOTE: 
			If you have src/mikro-orm.config.ts you don't need any configuration in AppModule,
			you can omit config param from MikroOrmModule.forRoot()
		
- config EntityRepository:

	To define which repositories shall be registered in the current scope you can use the forFeature() method. For example, in this way:
	
		// photo.module.ts

		@Module({
		  imports: [MikroOrmModule.forFeature([Photo])],
		  providers: [PhotoService],
		  controllers: [PhotoController],
		})
		export class PhotoModule {}
		
	and import it into the root AppModule:

		// app.module.ts
		@Module({
		  imports: [
			MikroOrmModule.forRoot(...),
			PhotoModule],
		})
		export class AppModule {}	
	
	
	In this way we can inject the PhotoRepository to the PhotoService using the @InjectRepository() decorator:

		@Injectable()
		export class PhotoService {
		  constructor(
			@InjectRepository(Photo)
			private readonly photoRepository: EntityRepository<Photo>
		  ) {}

		  // ...
		}	
		
	NOTE:
		You should not register your base entities via forFeature(), as there are no repositories for those. 
		On the other hand, base entities need to be part of the list in forRoot() (or in the ORM config in general).
	
SEE ALSO:	https://mikro-orm.io/docs/usage-with-nestjs	


------------------------------------------------------------------------------------------------------------------------------------------------
How to enumerate UnitOfWork identity map?
=========================================
UnitOfWork can e retrieved from EntityManager.
You can read content of it directly by enumerating map entries:

	constructor(
		private readonly em: EntityManager,
	) {}
	...
	test() {
		const uw = this.em.getUnitOfWork();
		const im = uw.getIdentityMap();
		const keys = im.keys();
		for (const key of keys) {
		  console.log('UoW[' + key + ']: ', im.get(key));
		}
	}


------------------------------------------------------------------------------------------------------------------------------------------------
How to get entity by primary key?
=================================
- simple entity:

  async get(id: number): Promise<User> {
    return this.repo.findOne({id});
  }

- entity extends BaseEntity (@mikro-orm/core):

  async get(id: number): Promise<User> {
    const u = this.repo.getReference(id);
    return u.init();
  }
	


	
------------------------------------------------------------------------------------------------------------------------------------------------
How to delete by primary key?
=============================
- get entity reference
- call EntityReposiory.remove()

Example:

	async delete(id: number) {
		const u = this.repo.getReference(id);
		await this.repo.removeAndFlush(u);
	}

	
------------------------------------------------------------------------------------------------------------------------------------------------
How to clear identity map cache?
================================

	em.clear();

------------------------------------------------------------------------------------------------------------------------------------------------
ERROR: column ... is of type jsonb but expression is of type ...	
ERROR: invalid input syntax for type json
================================================================

previous error: insert into "author" ("created_at", "email", "id", "name", "terms_accepted", "updated_at") values ('2021-02-01T11:58:57.539Z', 'gj@hollywood.com', 0, 'George Lucas', false, '2021-02-01T11:58:57.539Z') returning "id" - column "terms_accepted" is of
type jsonb but expression is of type boolean
    at Parser.parseErrorMessage (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:357:11)
    at Parser.handlePacket (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:186:21)
    at Parser.parse (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:101:30)
    at Socket.<anonymous> (D:\a\nestjs-example-app\node_modules\pg-protocol\src\index.ts:7:48)
    at Socket.emit (events.js:315:20)
    at Socket.EventEmitter.emit (domain.js:486:12)
    at addChunk (_stream_readable.js:309:12)
    at readableAddChunk (_stream_readable.js:284:9)
    at Socket.Readable.push (_stream_readable.js:223:10)
    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)
	
previous error: insert into "author" ("created_at", "email", "name", "terms_accepted", "updated_at") values ('2021-02-01T12:35:03.632Z', 'gj@hollywood.com', 'George Lucas', false, '2021-02-01T12:35:03.632Z') returning "id" - invalid input syntax for type json
    at Parser.parseErrorMessage (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:357:11)
    at Parser.handlePacket (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:186:21)
    at Parser.parse (D:\a\nestjs-example-app\node_modules\pg-protocol\src\parser.ts:101:30)
    at Socket.<anonymous> (D:\a\nestjs-example-app\node_modules\pg-protocol\src\index.ts:7:48)
    at Socket.emit (events.js:315:20)
    at Socket.EventEmitter.emit (domain.js:486:12)
    at addChunk (_stream_readable.js:309:12)
    at readableAddChunk (_stream_readable.js:284:9)
    at Socket.Readable.push (_stream_readable.js:223:10)
    at TCP.onStreamRead (internal/stream_base_commons.js:188:23)	
	
In this case the possible reason of problem is that DB table contains fields with 'jsonb' type, as here:


	CREATE TABLE public.author (
		id integer NOT NULL,
		created_at jsonb NOT NULL,									<<<<<
		updated_at jsonb NOT NULL,									<<<<<
		name character varying(255) NOT NULL,
		email character varying(255) NOT NULL,
		age integer NOT NULL,
		terms_accepted jsonb NOT NULL,								<<<<<
		born timestamp(0) with time zone NOT NULL,
		favourite_book_id integer NOT NULL
	);

Problem:
	Generally property types are not specified exactly:

		@Entity()
		export class Author {
		  @PrimaryKey()
		  id!: number;

		  @Property()
		  name: string;

		  @Property()
		  email: string;

		  @Property()
		  age?: number;

		  @Property()
		  termsAccepted = false;														<<< missing type

		  @Property()
		  born?: Date;

		  @OneToMany(() => Book, b => b.author, { cascade: [Cascade.ALL] })
		  books = new Collection<Book>(this);

		  @ManyToOne(() => Book)
		  favouriteBook?: Book;

		  @Property()
		  createdAt = new Date();														<<< missing type

		  @Property({ onUpdate: () => new Date() })
		  updatedAt = new Date();														<<< missing type
		  
		  constructor(name: string, email: string) {
			super();
			this.name = name;
			this.email = email;
		  }
		}

			
	
Fix:				

		  @Property()
		  termsAccepted: boolean = false;

		  @Property()
		  createdAt: Date = new Date();

		  @Property({ onUpdate: () => new Date() })
		  updatedAt: Date = new Date();


		  
    @mikro-orm/core @mikro-orm/nestjs @mikro-orm/postgresql @mikro-orm/reflection

    "@mikro-orm/cli": "^4.0.0-rc.6",	
	
------------------------------------------------------------------------------------------------------------------------------------------------
ERROR: To use assign() on not managed entities, explicitly provide EM instance	
==============================================================================
Error if you want to assign a not-managed class.

- For example here we assign a data from REST to a weapped entity:

		const author = new Author(body.name, body.email);
		wrap(author).assign(body);
		await this.authorRepository.persistAndFlush(author);

	and you have this error message:

		[Nest] 9848   - 2021. 02. 01. 14:34:36   [ExceptionsHandler] To use assign() on not managed entities, explicitly provide EM instance: wrap(entity).assign(data, { em: orm.em }) +32135ms
		Error: To use assign() on not managed entities, explicitly provide EM instance: wrap(entity).assign(data, { em: orm.em })

	
- Fix:	
	
	
------------------------------------------------------------------------------------------------------------------------------------------------
Specifying loading strategy
===========================
- Strategies:
	- LoadStrategy.SELECT_IN	: this strategy issues one additional SELECT statement per relation being loaded
	- LoadStrategy.JOINED		: issued a single, joined SELECT

- Default load strategy:		LoadStrategy.SELECT_IN

- Specifying:

	- globally:

		You can use loadStrategy option in the ORM config:

			MikroORM.init({
			  loadStrategy: LoadStrategy.JOINED,
			});	

	- per entity relation:
	
		@Entity()
		export class Author {
		  @OneToMany({
			entity: () => Book,
			mappedBy: b => b.author,
			strategy: LoadStrategy.JOINED,
		  })
		  books = new Collection<Book>(this);
		}

		WARNING: in cersion 4.4 it seems to BE NOT WORKING.
		
		
	- per operation:
	
		const author = await this.em.findOne(Author, id, {populate: ['books']})												// default
		const author = await this.em.findOne(Author, id, {populate: ['books'], strategy: LoadStrategy.JOINED})				// joined
		
		const author = await this.authorRepository.findOne(id, ['books']);													// default
		const author = await this.authorRepository.findOne(id, { populate: ['books'], strategy: LoadStrategy.JOINED});		// joined
		
		
		