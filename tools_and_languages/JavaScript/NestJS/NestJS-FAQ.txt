==========
NestJS-FAQ
==========

- Howto build-up a NestJS development environment?

Dependency injection
--------------------
- How to resolve circular dependency between services?
- Howto access injectables during the startup?

Controllers, validations
------------------------
- @Param, @Query
- Validation, transformation
- How class-validator and class-transformer work?
- How to validate input data in controllers?
- How to validate a DTO member agains enum?
- How to specify optional search criteria?

Error handling
--------------
- Error handling
- How to create and register custom exception filters?

Scheduler
---------
- How to call background job repeatedly?

Websocket
---------
- How to create WebSocket server?

Logging
-------
- Logging architecture

Troubleshooting
---------------
- How to attach debugger to NestJS project?

--------------------------------------------------------------------------------------------------------------------------------------
Howto build-up a NestJS development environment?
================================================
- Base app:

	nest new <project>

- Dependencies:

	Class validator:			npm i class-validator class-transformer
	TypeORM with PostgreSQL:	npm i @nestjs/typeorm typeorm pg
	
- Create a module:

		nest g module <module>

- Create a controller:
		
		  nest g controller <controller> --no-spec

- Create a service:
		
		  nest g service <service> --no-spec
		  
- Database:
	- Create config/typeorm.config.ts:

		export const typeOrmConfig: TypeOrmModuleOptions = {
		  type: 'postgres',
		  host: 'localhost',
		  port: 5432,
		  username: 'postgres',
		  password: 'postgres',
		  database: 'my-nestjs-demo',
		  entities: [Cat, User],					<<<<<<<< entities
		  synchronize: true,
		  logging: true,
		};

	- put config into AppModule imports:
	
		@Module({
			imports: [
				TypeOrmModule.forRoot(typeOrmConfig),
				...
			]
			...
		})
		export class AppModule {}
		
		

Troubleshooting
---------------
- ERROR: Nest can't resolve dependencies of the XXX. Please make sure that the argument at index [0] is available in the current context


--------------------------------------------------------------------------------------------------------------------------------------
ERROR: Nest can't resolve dependencies of the XXX. Please make sure that the argument at index [0] is available in the current context
======================================================================================================================================
This error generated when component XXX cannot inject element specified in constructor.

Fix:	maybe expected component did not added to 'providers' of current module.


--------------------------------------------------------------------------------------------------------------------------------------
Validation, transformation
==========================
We are now talking about payload/parameter validation in controllers, WebSockets and Microservices.

- How to activate validation?

	- add class-validator to project
	- apply ValidationPipe on parameter/method/controllel/global scope, e.g:
	
		app.useGlobalPipes(new ValidationPipe());
		
	- how validation works for
		- parameters which are primitive members:
			
		- DTO:
		



Example controller method where DTO used to collect query params:

	@Get()
	async getAllFiltered(@Query() filter: PersonFilterDto): Promise<Person[]> {
		console.log('FILTER:', filter);
		return this.personService.getAll(filter);
	}

	export class PersonFilterDto {
	  id: number;
	  name: string;
	  test: boolean;
	}
  
  
- No validation, no transformation:			

	app.useGlobalPipes(new ValidationPipe());

	- request: 	GET http://localhost:3000/person?id=2&dummy=abc
	- output:	FILTER: { id: '2', dummy: 'abc' }

	- By default, every path parameter and query parameter comes over the network as a string.
	- All query parameters are mapped into DTO as strings, all parameters are mapped even if they are not member of DTO.
	- Without any validation arbitrary parameters and values are mapped to DTO as is.

- Validation but no transformation:

	app.useGlobalPipes(new ValidationPipe());

	If you want to check if 'id' is number use @IsNumberString because input parameters are not converted.

		export class PersonFilterDto {
			@IsNumberString
			id: number;
			...
		}

	NOTE: if you use @IsNumber() now you get a validation error:	"id must be a number conforming to the specified constraints"
	
- Transformation + validation:				

	app.useGlobalPipes(new ValidationPipe({ transform: true }));	
	
	- request: 	GET http://localhost:3000/person?id=2&dummy=abc
	- output:	FILTER: PersonFilterDto { id: '2', dummy: 'abc' }						<<<<<<<<<<<<<<< JSON object transformed into PersonFilterDto
	
	Validation is still @IsNumberString bacause because auto-transformation only converts primitive types (but not a DTO).
	As you can see, 'id' is '2' (string).
	
- Transformation + validation + conversion:	
	
	app.useGlobalPipes(new ValidationPipe({ transform: true, transformOptions: { enableImplicitConversion: true }}));	
	
	- request: 	GET http://localhost:3000/person?id=2&dummy=abc
	- output:	FILTER: PersonFilterDto { id: 2, dummy: 'abc' }							<<<<<<<<<<<<<<< JSON object transformed into PersonFilterDto + 'id' converted into number
	
	NOTE: Validation should be @IsNumber since 'id' has been converted to number.
		
	+ if you omit 'id' query param in URL:		http://localhost:3000/person?dummy=abc
		then you will get validation error about missing 'id' -> add @IsOptional
	
		export class PersonFilterDto {
			@IsOptional()
			@IsNumber
			id: number;
			...
		}
		
	
SEE ALSO:
	https://docs.nestjs.com/techniques/validation#auto-validation
	https://docs.nestjs.com/techniques/validation#transform-payload-objects
		
	
	
--------------------------------------------------------------------------------------------------------------------------------------
How to validate input data in controllers?
==========================================
Recommended pattern:
	- use global-scoped ValidationPipe with class-validator and class-transformer
	
		app.useGlobalPipes(new MyValidationPipe({ transform: true, transformOptions: { enableImplicitConversion: true } }));
	
	
		NOTE: 	Before v6 'transformation: true' was enough but since v7 you need also this:
		
			transformOptions: { enableImplicitConversion: true }
	
	- use DTO in controllers instead of using simple @Param and @Query variables
	
		export class PersonFilterDto {
		  @IsOptional()
		  @IsInt()
		  id: number;

		  @IsOptional()
		  name: string;
		}
				

		@Get()
		async getAllFiltered(@Query() filter: PersonFilterDto): Promise<Person[]> {
			return this.personService.getAll(filter);
		}

############################################# Explanation #############################################
- You can use pipes to validate input.
- Pipes can be 

	- parameter-scoped:

		@Post()
		async create(@Body(new ValidationPipe()) createCatDto: CreateCatDto) {				<<<<<< parameter-scoped
			this.catsService.create(createCatDto);
		}

	- method-scoped:
	
		@Post()
		@UsePipes(new JoiValidationPipe(createCatSchema))									<<<<<< method-scoped
		async create(@Body() createCatDto: CreateCatDto) {
		  this.catsService.create(createCatDto);
		}	

	- controller-scoped: same as method-scoped but decoration is in controller head.
	
	- global-scoped:
	
		main.ts

		async function bootstrap() {
		  const app = await NestFactory.create(AppModule);
		  app.useGlobalPipes(new ValidationPipe());
		  await app.listen(3000);
		}
		bootstrap();
		
- pipes can be:

	- built-in:
	
		ValidationPipe
		ParseIntPipe
		ParseBoolPipe
		ParseArrayPipe
		ParseUUIDPipe
		DefaultValuePipe		
	
	- custom pipe:
	
		@Injectable()
		export class MyValidationPipe implements PipeTransform {
		  transform(value: any, metadata: ArgumentMetadata) {
			return value;
		  }
		}		
	
	
	
- pipe instantiating:

	- framework instantiates the pipe:
	
		@Get(':id')
		async findOne(@Param('id', ParseIntPipe) id: number) {
		  return this.catsService.findOne(id);
		}	
		
	- OR when we instantiate a pipe:
	
		@Get(':id')
		async findOne(
		  @Param('id', new ParseIntPipe({ errorHttpStatusCode: HttpStatus.NOT_ACCEPTABLE }))
		  id: number,
		) {
		  return this.catsService.findOne(id);
		}


	
- DTO

	- use a single DTO instead of multiple parameters
	- You need class-validator. Internally uses validator.js to perform validation. Class-validator works on both browser and node.js platforms.
	- Annotate with class-validator decorators, like:
	
		- IsOptional


SEE ALSO:
	Howto build-up a NestJS development environment?
	https://docs.nestjs.com/techniques/validation
	https://docs.nestjs.com/pipes#class-validator
	https://github.com/typestack/class-validator#readme
	
	
--------------------------------------------------------------------------------------------------------------------------------------
How to validate a DTO member agains enum?
=========================================
- create an array from enum values (ColorValues)
- use validator (class-validator) on value property: @IsIn(valuesArray)

	export enum Color {
	  WHITE = 'white',
	  BLACK = 'black',
	  CIRMOS = 'cirmos',
	}

	export const ColorValues = Object.values(Color);

	export class CatsCreateDto {
	  @IsNotEmpty()
	  name: string;

	  @IsNotEmpty()
	  @IsIn(ColorValues)
	  color: Color;
	}

	@Post()
	@UsePipes(ValidationPipe)
	create(@Body() dto: CatsCreateDto) {
		return this.catsService.create(dto);
	}

--------------------------------------------------------------------------------------------------------------------------------------
How to specify optional search criteria?
=========================================
- Generally you can use pipes for validate controller query parameters.
	For example:

		async getAllByName(@Query('username') username?: string, @Query('active', ParseIntPipe) active?: number): Promise<User[]> {
			...
		}

- BUT, ParseBoolPipe and ParseIntPipe has been implemented to allow explicitly validating & transforming NON-OPTIONAL parameters.
	In your case, you can either use the implicit type conversion or define a DTO:
		
Ecample 1:

	export class PersonQueryFilterDto {
	  @IsOptional()
	  @IsNumber()
	  id: number;

	  @IsOptional()
	  name: string;
	}

	export class PersonController {
		...
		@Get()
		async getAllByName(@Query() {id, name} : PersonQueryFilterDto): Promise<Person[]> {
			const filter = {};
			if (id) {
			  filter['id'] = id;
			}

			if (name) {
			  filter['name'] = name;
			}
			return this.personService.getAll(filter);
		}
		...
	}


Example 2:

	export class CatFilterDto {
	  name: string;

	  @IsIn(ColorValues)
	  @IsOptional()
	  color: Color;
	}


NOTE: You need class-validator and class-trasformer package.

SEE ALSO:
	Howto build-up a NestJS development environment?
	https://github.com/nestjs/nest/issues/4328
	
--------------------------------------------------------------------------------------------------------------------------------------
Error handling
==============
SEE ALSO:	https://docs.nestjs.com/exception-filters

- Default global exception filter handles HttpException, other error mapped into 500.
- Throw HttpException or an inherited class to use default exception filter
- Use custom exception filter to achieve the full control. You can assig exception filters on:
	- method level
	- controller level
	- global level


Explanation
-----------
Out of the box, this action is performed by a built-in global exception filter, which handles exceptions of type HttpException (and subclasses of it). 
When an exception is unrecognized (is neither HttpException nor a class that inherits from HttpException), 
the built-in exception filter generates the following default JSON response:

	{
	  "statusCode": 500,
	  "message": "Internal server error"
	}

Nest provides a built-in HttpException class, exposed from the @nestjs/common package. 
It's best practice to send standard HTTP response objects when certain error conditions occur.


For example, in the CatsController, we have a findAll() method (a GET route handler). Let's assume that this route handler throws an exception for some reason. 
To demonstrate this, we'll hard-code it as follows:

	cats.controller.ts:

		@Get()
		async findAll() {
		  throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
		}
		
	HINT
	We used the HttpStatus here. This is a helper enum imported from the @nestjs/common package.
	When the client calls this endpoint, the response looks like this:


	{
	  "statusCode": 403,
	  "message": "Forbidden"
	}

	The HttpException constructor takes two required arguments which determine the response:

By default, the JSON response body contains two properties:

	- statusCode: defaults to the HTTP status code provided in the status argument
	- message: a short description of the HTTP error based on the status
	
- To override just the message portion of the JSON response body, supply a string in the response argument.
- To override the entire JSON response body, pass an object in the response argument.

	Here's an example overriding the entire response body:

	cats.controller.ts:

	@Get()
	async findAll() {
	  throw new HttpException({
		status: HttpStatus.FORBIDDEN,
		error: 'This is a custom message',
	  }, 403);
	}

	{
	  "status": 403,
	  "error": "This is a custom message"
	}
	
- Custom exceptions

	In many cases, you will not need to write custom exceptions, and can use the built-in Nest HTTP exception, as described in the next section. 
	If you do need to create customized exceptions, it's good practice to create your own exceptions hierarchy, where your custom exceptions inherit from the base HttpException class. 
	With this approach, Nest will recognize your exceptions, and automatically take care of the error responses. Let's implement such a custom exception:

	forbidden.exception.ts

		export class ForbiddenException extends HttpException {
		  constructor() {
			super('Forbidden', HttpStatus.FORBIDDEN);
		  }
		}
		
	Since ForbiddenException extends the base HttpException, it will work seamlessly with the built-in exception handler, and therefore we can use it inside the findAll() method.

	cats.controller.tsJS

		@Get()
		async findAll() {
		  throw new ForbiddenException();
		}

- Built-in HTTP exceptions that inherit from the base HttpException:

		BadRequestException
		UnauthorizedException
		NotFoundException
		ForbiddenException
		NotAcceptableException
		RequestTimeoutException
		ConflictException
		GoneException
		PayloadTooLargeException
		UnsupportedMediaTypeException
		UnprocessableEntityException
		InternalServerErrorException
		NotImplementedException
		BadGatewayException
		ServiceUnavailableException
		GatewayTimeoutException

		
--------------------------------------------------------------------------------------------------------------------------------------
How to create and register custom exception filters?
====================================================
- Custom filter:

		@Catch(HttpException)
		export class HttpExceptionFilter implements ExceptionFilter {
		  catch(exception: HttpException, host: ArgumentsHost) {
			const ctx = host.switchToHttp();
			const response = ctx.getResponse<Response>();
			const request = ctx.getRequest<Request>();
			const status = exception.getStatus();

			response
			  .status(status)
			  .json({
				statusCode: status,
				timestamp: new Date().toISOString(),
				path: request.url,
			  });
		  }
		}

	- @Catch() decorator may take a single parameter, or a comma-separated list.
	- In order to catch EVERY UNHANDLED EXCEPTION (regardless of the exception type), leave the @Catch() decorator's parameter list empty, e.g., @Catch().
	
	
- Registerng filters:

	Use custom exception filter to achieve the full control. You can assig exception filters on:
		- method level
		- controller level
		- global level
	 
	- Method level:

		@Post()
		@UseFilters(new HttpExceptionFilter())
		async create(@Body() createCatDto: CreateCatDto) {
			throw new ForbiddenException();
		}

	- Controller level:

		@UseFilters(new HttpExceptionFilter())
		export class CatsController {}
		
	- Global level:

		app.module.ts

			import { Module } from '@nestjs/common';
			import { APP_FILTER } from '@nestjs/core';

			@Module({
			  providers: [
				{
				  provide: APP_FILTER,
				  useClass: HttpExceptionFilter,
				},
			  ],
			})
			export class AppModule {}
		
		
--------------------------------------------------------------------------------------------------------------------------------------
How to resolve circular dependency between services?
====================================================
Use forwardRef().

- Between providers:

	export class ConnectionService {
		constructor(
			@Inject(forwardRef(() => ConfigService))
			private configService: ConfigService,
		) {}
	}


	export class ConfigService {
		constructor(
			@Inject(forwardRef(() => ConnectionService))
			private connectionService: ConnectionService,
		) {}
	}
	
- Between modules:

	In order to resolve circular dependencies between modules, use the same forwardRef() utility on both sides of the modules association. For example:
	
	
	@Module({
	  imports: [forwardRef(() => CatsModule)],
	})
	export class CommonModule {}

		@Module({
			imports: [forwardRef(() => CommonModule)],
		})
		export class CatsModule {}

		
		
--------------------------------------------------------------------------------------------------------------------------------------
Logging architecture
====================
There are 2 methods:

	1. Built-in logger 
		- no DI (dependency injection)
		- can be used during application bootsrtapping (before DI)
		- simple usage with limitations
		
	2. Logger with DI (extended from built-in Logger or external) 



1. Built-in logger
------------------
	Nest comes with a built-in text-based logger which is used during application BOOTSTRAPPING and several other circumstances 
	such as displaying CAUGHT EXCEPTIONS (i.e., system logging).
	
	- To disable built-in logger:
	
	
		const app = await NestFactory.create(ApplicationModule, {
			logger: false,
		});
	
	
	- To enable specific logging levels, set the logger property to an array of strings specifying the log levels to display, as follows:
	
		const app = await NestFactory.create(ApplicationModule, {
			logger: ['error', 'warn'],
		});
	
	- console:
	
		You can provide a custom logger implementation to be used by Nest for system logging by setting the value of the logger property to 
		an object that fulfills the LoggerService interface. For example, you can tell Nest to use the built-in global JavaScript console 
		object (which implements the LoggerService interface), as follows:

		
		const app = await NestFactory.create(ApplicationModule, {
			logger: console,
		});		
		
		
	- you own custom by implementing from scratch (without DI):

		Implementing your own custom logger is straightforward. 
		Simply implement each of the methods of the LoggerService interface as shown below.
		
		IMPL:
			import { LoggerService } from '@nestjs/common';

			export class MyLogger implements LoggerService {
				...
			}
		
		USAGE:
			const app = await NestFactory.create(ApplicationModule, {
				logger: new MyLogger(),
			});
		
		
		NOTE: This technique, while simple, doesn't utilize dependency injection for the MyLogger class.
		
		
	- you own custom by extending built-in logger:
	
		import { Logger } from '@nestjs/common';

		export class MyLogger extends Logger {
		  error(message: string, trace: string) {
			// add your tailored logic here
			super.error(message, trace);
		  }
		}


2. Logger with DI

	2 modes:
		1. using a singleton overall the application
		2. instantiating logger for every unit (where you inject) with different context information
	
	Common tasks:
		- Create your custom logger (MyLogger)
		- create a logger module and export+provide MyLogger
		
		
		1. Singleton
		
			- Logger: default @Injectable
			
			- usage: inject in constuctor
		
			- system logger:
			
				Because application instantiation (NestFactory.create()) happens OUTSIDE THE CONTEXT OF ANY MODULE, it doesn't participate
				in the normal Dependency Injection phase of initialization.
				But we can instruct Nest to use THE SAME SINGLETON instance of MyLogger with the following construction:
				
				const app = await NestFactory.create(ApplicationModule, {
					logger: false,											// disabling built-in logger
				});
				app.useLogger(app.get(MyLogger));							// get logger singleton

			
		2. Logger per unit
		
			- Logger: special @Injectable with TRANSIENT scope
			
				import { Injectable, Scope, Logger } from '@nestjs/common';

				@Injectable({ scope: Scope.TRANSIENT })
				export class MyLogger extends Logger {}
	
			- usage: inject in constuctor and set CONTEXT
			
				import { Injectable } from '@nestjs/common';
				import { MyLogger } from './my-logger.service';

				@Injectable()
				export class CatsService {
				  private readonly cats: Cat[] = [];

				  constructor(private myLogger: MyLogger) {
					this.myLogger.setContext('CatsService');				<<<< context
				  }
				  
				  ....
				}				
	
			- system logger:
			
				const app = await NestFactory.create(ApplicationModule, {
					logger: false,
				});
				const syslog = new MyLogger();
				syslog.setContext('SYSTEM');
				app.useLogger(syslog);								<<<< just create a quite new instance
			
				
		
SEE ALSO:	https://docs.nestjs.com/techniques/logger		


--------------------------------------------------------------------------------------------------------------------------------------
Howto access injectables during the startup?
============================================
Because application instantiation (NestFactory.create()) happens OUTSIDE THE CONTEXT OF ANY MODULE, it doesn't participate
in the normal Dependency Injection phase of initialization.
But we can instruct Nest to use THE SAME SINGLETON instance of an injectable:

Use:	app.get(...)

				const app = await NestFactory.create(ApplicationModule, {
					logger: false,											// disabling built-in logger
				});
				cont logger = app.get(MyLogger));

It retrieves an instance of either injectable or controller, otherwise, throws exception.


--------------------------------------------------------------------------------------------------------------------------------------
How to create WebSocket server?
===============================
- add WebSocket:

	npm install --save @nestjs/websockets
	npm install @nestjs/platform-socket.io
	
- create a gateway:

	nest g gateway App
	
SEE ALSO:	https://www.educba.com/websocket-vs-socket-io/
	

	
--------------------------------------------------------------------------------------------------------------------------------------
How to call background job repeatedly?
======================================
- create a service
- implement job as a method
- decorate method with @Cron(...):

	@Cron('0,30 * * * * *')
	changePresenceState() {
		...
	}

	
--------------------------------------------------------------------------------------------------------------------------------------
How to attach debugger to NestJS project?
=========================================
Normal way:
	NestJs project contains "start:debug" script. If you start this script with 'Debug' then WebStrom generally attaches debugger to
	project:
	
		Debugger listening on ws://127.0.0.1:9229/f883f5e8-fba8-436c-beb6-f1e3a3715cdf
		For help, see: https://nodejs.org/en/docs/inspector
		Debugger attached.
		
but sometimes debugger not attached.

In this case you can attach debugger manually.
	1. go to 'Edit Configurations...' in the launch bar
	2. add 'Attach to Node.js/Chrome' entry
	3. specify port if not the default '9229'
	4. start project (start:debug) first with Debug
	5. start attach entry with Debug

If project started with --watch and it reloaded on code change sometimes debugger should be re-attached (restart step 5).

--------------------------------------------------------------------------------------------------------------------------------------
@Param, @Query
==============
Both of them extract something from request, but...


(from source comments)


- @Param:	it gets value from path.
	
- @Query:	it gets value from query.


	/somepath/param/param2?query1=...&query2=...


NOTE:	There are a lot of other decorators to extract request:

	- @Request(), @Req()
	- @Response(), @Res()
	- @Next()
	- @Session()
	- @Param(param?: string)
	- @Body(param?: string)
	- @Query(param?: string)
	- @Headers(param?: string)
	- @Ip()
	- @HostParam()


SEE ALSO:
	https://docs.nestjs.com/custom-decorators#param-decorators
		