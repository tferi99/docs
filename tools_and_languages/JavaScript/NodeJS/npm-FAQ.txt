=======
npm FAQ
=======

- What is npm?
- 'npm' tips
- Where are global npm packages installed?
- How to install packages?
- How to create package.json?
- How to query versions?
- How to update packages?
- How npm link works?
- NPM versioning

---------------------------------------------------------------------------------------------------------------------------------------------
What is npm?
============
- npm is a package manager for JavaScript, and is the default for Node.js. 
- As of Node.js version 0.6.3, npm is bundled and installed automatically with the environment.[2] 
- npm runs through the command line and manages dependencies for an application. 
- It also allows users to install Node.js applications that are available on the npm registry. 
- npm is written entirely in JavaScript 

---------------------------------------------------------------------------------------------------------------------------------------------
Where are global npm packages installed?
========================================
Global libraries:

	Windows XP - %USERPROFILE%\AppData\npm\node_modules
	Windows 7, 8 and 10 - %USERPROFILE%\AppData\Roaming\npm\node_modules

Non-global libraries:

	Non-global libraries are installed the 'node_modules' sub folder in the folder you are currently in.


---------------------------------------------------------------------------------------------------------------------------------------------
'npm' tips
==========
npm -l							: full list of commands

npm ls/ll/la [-g] [--<options>] : list of installed packages, it draws a dependency tree. ll and la shows detailed info

	npm ls -g --depth=0			: list only the top-level global packages

SEE ALSO:	https://docs.npmjs.com/cli-documentation/cli


---------------------------------------------------------------------------------------------------------------------------------------------
NPM versioning
==============
- 1.2.3

	1:	Major release	- Changes that break backward compatibility
	2:	Minor release	- Backward compatible new features
	3:	Patch release	- Backward compatible bug fixes

- Version ranges
	NPM allows installing newer version of a package than the one specified. 
		- Using tilde (~) gives you bug fix releases. 
		
			Options for patch releases:		1.0 or 1.0.x or ~1.0.4		
		
		- and caret (^) gives you backwards-compatible new functionality as well.
		
			Options for minor releases:		1 or 1.x or ^1.0.4
				
				
		- no limitation:					* or x

- Check update ranges of an NPM package - NPM Semver Calculator:		https://semver.npmjs.com/


SEE ALSO:
	https://docs.npmjs.com/about-semantic-versioning
	https://docs.npmjs.com/cli/v6/using-npm/semver
	
---------------------------------------------------------------------------------------------------------------------------------------------
How to install packages?
========================
npm install <package>

	It installs a package into local node_modules directory

npm install -g <package>


	In global mode (ie, with -g or --global appended to the command), it installs the current package context 
	(ie, the current working directory) as a global package.
	
	c:\Users\<USER>\AppData\Roaming\npm\node_modules 

To install a specific version of a package:
	
	npm install <package>@<version>	
	
	
To list installed packages:

	npm ls [-g]
	
	Without -g it lists packages installed into the current directory (current project).
	With -g it lists global packages.
	
	
npm install --save

	It installs module and adds it to package.json dependencies.
	
npm install --save-dev
	
	It installs module and adds it to package.json DEVELOPMENT dependencies, it won't be shipped with production package.
	
---------------------------------------------------------------------------------------------------------------------------------------------
How to update packages?	
=======================
- Method 1:
	- Check version of NPM:
		
		npm -version

	- Update NPM itself:

		npm install npm@latest -g

	Update all global packages:

		npm update -g	
		
	Update a global packages:

		npm update -g <package_name>
		
	Check outdated global packages:	
		
		
	Project level:
		- go into project directory
		- npm update
		
		
- Method 2: npm-check

	Check for outdated, incorrect, and unused dependencies.
	
	- Install:

		npm install -g npm-check
		
	- Use:
	
		npm-check	
	
		
- Method 3: npm-check-updates

	'npm-check-updates' upgrades your package.json dependencies to the latest versions, ignoring specified versions.
	
	- Installation:

		npm install -g npm-check-updates
		
	- Usage:
	
		ncu


	
---------------------------------------------------------------------------------------------------------------------------------------------
How to create package.json?
===========================
To initialize a project and create package.json call:

	npm init
	
---------------------------------------------------------------------------------------------------------------------------------------------
- How to query versions?
========================
npm -v 
OR 
npm version						: print NPM version

npm view <package>				: get all information about a package
npm view <package> version		: show specified package’s version in the registry
npm view <package>@* version	: show all the published versions of a package (include pre-releases)


---------------------------------------------------------------------------------------------------------------------------------------------
How npm link works?
===================
- There are 2 steps:
	1. npm link
	2. npm link <module name>


	1. In library dist/<lib> directory:
	
		npm link	
		
				symlink in global node_modules ===> lib directory in project-local node_modules

			When you run npm link in a module’s root directory, npm creates a symbolic link from your 'global node_modules'
			directory (where 'npm install -g' are stored) to the local module’s directory.
			
			You can find the path to your global node_modules directory by running:
			
				npm root -g
				
					
	2. In project directory:
		
		npm link <module-name>		

		
			symlink in project-local node_modules ===> global node_modules/<module-name>
		
		When you run npm link <module-name> in a project’s directory, npm creates a symbolic link 
		from ./node_modules/<module-name> to <global_node_modules>/<module-name>.


	It links an external local module into your project.


- How to delete links?
	1. in external lib directory:
		
			npm unlink
			
	2. in project directory
	
			npm unlink <module-name>
			
SEE ALSO:
			https://medium.com/@alexishevia/the-magic-behind-npm-link-d94dcb3a81af
			https://docs.npmjs.com/cli/v6/commands/npm-link

	