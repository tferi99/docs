===========================
WebAttendant startup-reload
===========================

- Data initialization
- Call flow


---------------------------------------------------------------------------------------------------------------------------------------------------------
Data initialization
===================
There are 2 level of data initialization

1. Global
	- can be triggered by sending:
		- AppDataLoadRequestedAction
	  OR
		- AppDataReLoadRequested

	- It calls a single endpoint: /init/reload			
		- This endpoint provides a lot of global initial data via REST in AppResource object:
			- apasVersion
			- user
			- profile
			- gridster
			- phones
			- calls
			- settings
			- queues
			- lastOutgoingLines
			- hotkeys
		
		- then it sends a lot of ...LodedAction to perform feature specific side-effects
		
		- finially AppDataLoadedAction will be sent which performs the followings:
			- re-subscribe Atmosphere connections
			- it sends REST message about loaded presence items to refresh presence subscriptions
			- it starts keep-alive loop in main component
			- it calculates client-server time offset in global reducer and writes into global state (serverClientTimeOffset)
		
2. Widget instance initialization
	This initialization actions are dispatched by WidgetStatusManager (injected into widget instances by WidgetStatusManagerDirective).
	Directive objects are initialized by widget instances which are loaded in 'gridster' step of global initialization.
	Here widget instances send widget specific actions and calls endpoints:
		- DirectoryInitAction => directoryApiService.getDirectories() => /directory/directories
		- CallListInitAction => CallListSearchRequestAction => callListService.getCalls() => /calllist/calls
		- CallCenterInitAction => CallCenterInitAction => nothing
		- CallCenterCallBackInitAction => callCenterCallBackService.getInitdata() => /callcenter/callbacks
		- GroupInitAction => groupService.getGroupList() => /group/getGroupList
	

SUMMARY:

	The full initailization can be triggered by sending 
		- AppDataLoadRequestedAction (called application startup or F5)
		OR 
		- AppDataReLoadRequested (called when reqauired, for example on device/line change)
	
---------------------------------------------------------------------------------------------------------------------------------------------------------
Call flow
=========

Routing
-------
	- default route redirected to 'main'
	- 'main' protected by AuthGuard which redirects to 'login' if not authenticated
	- 'login' navigates to 'main' after logged-in
	
	
Initial data loading
--------------------	
- If authenticated then you are on 'main'
- MainComponent dispatches AppDataLoadRequestedAction which loads (reloads) initial data of application
- Application data in response populated into feature store slides
- Finally dispatcing a AppDataLoadedAction. Subscribers are:
	- MainComponent
	- GlobalEffects



--> MainComponent.ngOnInit()
	==> AppDataLoadRequestedAction

		-->  GlobalEffects.appDataLoadRequested
			--> InitService.appReload()
				==> HTTP GET: '/init/reload'
					HTTP --> InitController.reload(...) ==> AppResource
						
			- checking version in local storeage
			---------------- if version different -----------------
				- store version to local storage
				--> F5 to reload application into brovser
				
			----------------- else --------------------
			==> AppCsrfInitiatingAction(data: AppData)
			
				--> GlobalEffects.appCsrfInitiating$
					--> authService.init_csrf()
						==> HTTP POST: /auth/init-csrf'
					==> AppCsrfInitiatedAction(payload: AppData)
						--> GlobalEffects.appCsrfInitiated$
							- sending actions to feature effects and reducers to load data to feature states
								==> LoginSuccessAction(data.user)
								==> SettingsLoadedAction(data.settings)
								==> ProfileLoadedAction(data.profile)
								==> PhonesLoadedAction({phones: data.phones})
								==> WidgetsLoadedAction(data.gridster)
								==> AllCallsLoaded({calls: data.calls})
								==> BulkLookupRequestAction(data.calls)
								==> QueuesLoadedAction(data.queues)
								==> CallHistoryLoaded(data.lastOutgoingLines)
								==> HotkeysLoadedAction(data.hotkeys)
								==> updatePresenceSubscriptions()						// starting presence update subscription job
								==> presenceStoreCleanup()								// starting presence store cleanup job   
								
								==> AppDataLoadedAction(data)			// LAST
								
									--> MainComponent.initSubscription
										--> startKeepalive()
										
									--> GlobalEffects.appDataLoaded$
										--> initService.subscribeToAtmosphere(data.payload)
											--> atmosphereService.subscribe(atmSubsString)
										
									--> global.reducer - case GlobalActionTypes.AppDataLoadedAction
										info to store:
											- APAS version
											- server time offset
											- loaded = true
											
								