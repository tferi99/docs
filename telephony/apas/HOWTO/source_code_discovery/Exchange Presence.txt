=================
Exchange Presence
=================
- Configuration
- Use Cases
	- Exchange server manual connection test
	- Exchange server automatical (background) connection test
	- Directory search and getting presence information
- Register
- Unregister
- Caching
- Handling calendar events
- How presence information goes from Exchange Server to DC?
- Troubleshooting, tracing

-------------------------------------------------------------------------------------------------------------------
Configuration
=============
- Event pulling period
	set here: 	APAS/General/Servers/CHOOSE/(Event pulling period)
	stored:		config(global/servers.exchange.EventPullingPeriod)
	default:	60
	used:		com.andtek.andphone.presence.msews.ExchangeEventNotificationsManager
	
	initialized:	-- >com.andtek.andphone.presence.Module.init(JTAPIThread jtapi)	during startup
						--> ExchangeEventNotificationsManager.loadConfig()
							--> setPullingPeriod(int period)
								--> ExchangeEventNotificationsPuller.setPullingPeriod(...)
								--> ExchangeEventNotificationsPuller.stopPullingTimer()
								--> startStopPullingIfNecessary()
								
								
	saved:		from GWT config page
					--> RPCglobalServiceImpl.RemoteSaveServer(...)
						--> ExchangeEventNotificationsManager.setPullingPeriod(int period)
							--> saveConfig()
	....
	
	

	ExchangeEventNotificationsManager:
	----------------------------------
	- Class for managing event notifications subscriptions to Exchange server.
	- Push and Pull subscriptions are supported
	- Singleton class - getting:	
 
		public static ExchangeEventNotificationsManager.getInstance()
	
	- It creates ExchangeEventNotificationsPuller

	
- Presence update period
	set here: APAS/Presence/Sources/ITEM/(Status update period) (default: 10)
	
	....
	
-------------------------------------------------------------------------------------------------------------------
Use Cases
=========
- Exchange server manual connection test:

	APAS/General/Servers/CHOOSE/[Servers]/[Server 1]/(Test Connection)
		--> com.andtek.andphone.global.gwtapp.server.RPCglobalServiceImpl.RemoteTestServerConnection()
			--> ExchangeCachedCalendarServer.testConnection()

			
- Exchange server automatical (background) connection test:
	ServerGroup.ServerGroup()
		- verifyThread = new ServerGroupVerifier(this)
		--> ServerGroupVerifier.ServerGroupVerifier()
			--> APASThread.run()
				--> com.andtek.andphone.global.servers.ServerGroup.ServerGroupVerifier.run()
					--> ServerGroup.checkServerAvailability()
						--> ExchangeCachedCalendarServer.verifyConnection()
							--> ExchangeService exchangeService.resolveName(username);
			
- Directory search and getting presence information:
  		
	How does it work?
	-----------------
	- DC makes a directory query and sends <searchDirectory> to APAS
	- APAS sends a <searchDirectoryResult> with directory entries back which contains user records
	- if a user does not have presence information in DC it generates a <PresenceRegister> message with all users which don't not have presence info
	- APAS responds and sends N messages (for every users) and sends <PresenceRegistered>
		- <PresenceRegistered> contains presence information if it already received from Exchange server
		OR 
		- <PresenceRegistered> contains UNKNOWN as presence status. 
			In this case APAS create a subscription to Exchange server in the background and Exchange Server sends back status information asynchronously later.
			In the handler of this status notification APAS sends presence information to DC in <PresenceUpdate>
	- DC only refreshes presence information either during the first occurence of a user in local (DC) cache or in every 10 minutes it generates a new <PresenceRegister>.
		If a user contained by DC cache it won't generate <PresenceRegister> for this user during the next query.
	
		
		
	[NioProcessor-1] [ClientProtocolHandler.java:336] - handleXMLMessage(): ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e] | Received CMINA_XML: <searchDirectory id="1" phone="SEP001EF7C345BB" seq="1">....
	[APAS-Communicator-DirectorySearchThread-1] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e]: sendXml(<searchDirectoryResult seq="1" error="0" errorMessage="" exceptionMessage="">....
	[NioProcessor-1] [ClientProtocolHandler.java:336] - handleXMLMessage(): ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e] | Received CMINA_XML: <Presence><PresenceRegister><ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="adminsso@andtek.cee.cs.eilab.biz"/><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="ssotest1@andtek.cee.cs.eilab.biz"/><ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="ssotest2@andtek.cee.cs.eilab.biz"/></PresenceRegister></Presence>
	[APAS-DesktopMsgQueueWorker-11] [PresenceProtocolHelper.java:86] - Client Message received: <Presence><PresenceRegister><ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="adminsso@andtek.cee.cs.eilab.biz"/><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="ssotest1@andtek.cee.cs.eilab.biz"/><ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz"/><CUPSIdentification userID="ssotest2@andtek.cee.cs.eilab.biz"/></PresenceRegister></Presence>
	[APAS-defaultWorker-14] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e]: sendXml(<Presence><PresenceRegistered><ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz" status="UNKNOWN"></ExchangeCalendarIdentification></PresenceRegistered></Presence>)
	[APAS-defaultWorker-12] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e]: sendXml(<Presence><PresenceRegistered><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="UNKNOWN"></ExchangeCalendarIdentification></PresenceRegistered></Presence>)
	[APAS-defaultWorker-13] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e]: sendXml(<Presence><PresenceRegistered><ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz" status="UNKNOWN"></ExchangeCalendarIdentification></PresenceRegistered></Presence>)
	[APAS-defaultWorker-16] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[2, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=7d21afb9], hashCode=672a540e]: sendXml(<Presence><PresenceUpdate><ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification><ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification></PresenceUpdate></Presence>)


	events:
	-------
	1st query:
		
							DC									APAS
								=== <searchDirectory> ===>									// with directory search attributes
								<=== <searchDirectoryResult> ===							// directory data WITHOUT presence info
								=== <PresenceRegister> ===>									// subscribe data with ALL email addresses
								<=== <PresenceRegistered> * USERS ===						// N events for every user but status is UNKNOWN if not cached before 
								<=== <PresenceUpdate> ===									// with N presence status results, ONLY if user not cached before in APAS
								
	next queries:
							DC									APAS
								=== <searchDirectory> ===>									// with directory search attributes
								<=== <searchDirectoryResult> ===							// directory data WITHOUT presence info								
								PresenceRegister> ===>										// ONLY for users where presence is not cached in DC
								...
								
	automatical presence refresh in every 10 minutes:
		
							DC									APAS
								=== <PresenceRegister> ===>									// subscribe data with ALL email addresses
								<=== <PresenceRegistered> * USERS ===						// N events for every user
								=== <PresenceRegister> ===>									// subscribe data with ALL email addresses
								<=== <PresenceRegistered> * USERS ===						// N events for every user but status is UNKNOWN if not cached before 
								<=== <PresenceUpdate> ===									// with N presence status results, ONLY if user not cached before in APAS
								
	events detailed:
	----------------
		
		DC -> APAS:			
			<searchDirectory id="4" phone="SEP64A0E714F271" seq="1">
				<attribute id="2"/>
				<attribute id="5"/>
				<attribute id="6"/>
				<attribute id="3"/>
				<attribute id="4"/>
				<attribute id="1">sso</attribute>
			</searchDirectory>

							
		APAS -> DC:			
		
			<searchDirectoryResult seq="1" error="0" errorMessage="" exceptionMessage="">
				<attributes>
					<attribute id="1" name="ldap.Display_UserID" displayName="UserID" type="0" />
					<attribute id="2" name="ldap.Display_EMail" displayName="Email" type="6" />
					<attribute id="3" name="ldap.Display_Name" displayName="Name" type="0" />
					<attribute id="4" name="ldap.Display_Tel" displayName="Tel" type="1" />
					<attribute id="5" name="ldap.Display_FirstName" displayName="First Name" type="3" />
					<attribute id="6" name="ldap.Display_LastName" displayName="Last Name" type="2" />
				</attributes>
				<result dirid="1" editable="false">
					<pkid>CN=admin sso</pkid>
					<attribute id="1">adminsso</attribute>
					<attribute id="2">adminsso@andtek.cee.cs.eilab.biz</attribute>
					<attribute id="3">admin sso</attribute>
					<attribute id="5">sso</attribute>
					<attribute id="6">admin</attribute>
				</result>
				<result dirid="1" editable="false">
					<pkid>CN=John Smith,CN=HUN,CN=Development</pkid>
					<attribute id="1">ssotest1</attribute>
					<attribute id="2">ssotest1@andtek.cee.cs.eilab.biz</attribute>
					<attribute id="3">John Smith</attribute>
					<attribute id="4">+3630-ssotest1</attribute>
					<attribute id="5">Smith</attribute>
					<attribute id="6">John</attribute>
				</result>
				<result dirid="1" editable="false">
					<pkid>CN=Jane Doe,CN=HUN,CN=Development</pkid>
					<attribute id="1">ssotest2</attribute>
					<attribute id="2">ssotest2@andtek.cee.cs.eilab.biz</attribute>
					<attribute id="3">Jane Doe</attribute>
					<attribute id="5">Doe</attribute>
					<attribute id="6">Jane</attribute>
				</result>
			</searchDirectoryResult>
		
		DC -> APAS:			
			<Presence>
				<PresenceRegister>
					<ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz"/>
					<CUPSIdentification userID="adminsso@andtek.cee.cs.eilab.biz"/>
					<ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz"/>
					<CUPSIdentification userID="ssotest1@andtek.cee.cs.eilab.biz"/>
					<ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz"/>
					<CUPSIdentification userID="ssotest2@andtek.cee.cs.eilab.biz"/>
				</PresenceRegister>
			</Presence>
		

		APAS -> DC:			
			<Presence>
				<PresenceRegistered>
					<ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz" status="UNKNOWN"></ExchangeCalendarIdentification>
				</PresenceRegistered>
			</Presence>
			<Presence>
				<PresenceRegistered>
					<ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="UNKNOWN"></ExchangeCalendarIdentification>
				</PresenceRegistered>
			</Presence>			
			.... FOR ALL USERS
			
	
		APAS -> DC:
		
			<Presence>
				<PresenceUpdate>
					<ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification>
					<ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification>
					<ExchangeCalendarIdentification email="adminsso@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification>
				</PresenceUpdate>
			</Presence>		
		
		
		
	- Search in DC


		XML message from DC (searchDirectory) ==> ClientConnectionMina.handleEvents(...)
			- getting parameters from XML message
			--> new DirectorySearchThread(this, dirs, inputItems, false, seq, true);
				------------------------------ if isAllowedDynamicPresenceSubscription -------------------------------
					--> searcher = new DynamicBlfPresenceDesktopDirectorySearcher(connection, client, dirs, inputItems, doOr, seq, throwDirException);
				---------------------------- else ---------------------------
					--> searcher = new LegacyDesktopDirectorySearcher(connection, client, dirs, inputItems, doOr, seq, throwDirException);	
				--> searcher.search()
				
				
		NOTE: 
			Search always calls LegacyDesktopDirectorySearcher, DynamicBlfPresenceDesktopDirectorySearcher not completed and NOT USED currently.

				[DEBUG] [APAS-Communicator-DirectorySearchThread-1] [DirectorySearchThread.java:124] - Use the legacy/old desktop directory searcher.		<<<<<<<<<<<<<<<<<
				[DEBUG] [APAS-Communicator-DirectorySearchThread-1] [AbstractDesktopDirectorySearcher.java:76] - Dynamic presence user subscription is ENABLED
				[DEBUG] [APAS-Communicator-DirectorySearchThread-1] [AbstractDesktopDirectorySearcher.java:79] - Dynamic JTAPI presence subscription is DISABLED
							
				
	- AFTER search DC requests presence information from APAS with PresenceRegister:

		<Presence><PresenceRegister>... ==> PresenceProtocolHelper.ClientConnectionMina.handleEvents()
			--> handleClientPresenceMessage(msg)
				--> subscribeEmailToExchangePresence(identification.getIdentifier())
					--> DynamicPresenceSubscriptionManager.subscribe(String id, Object userData)		<< ExchangeCalendarIdentification
						--> globalSubscriptions.put(id, new Date())
				
				?????
				--> PresenceProtocolHelper.parseClientMessage(msgXMLstring)



- You click directory entry in Directory widgeet of DC:

	[DEBUG] [APAS-DesktopMsgQueueWorker-11] [PresenceProtocolHelper.java:86] - Client Message received: <Presence><ExchangeCalendarPresenceRequest end="2018-12-07T05:55" start="2018-12-06T05:55"><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz"/></ExchangeCalendarPresenceRequest></Presence>
	[DEBUG] [APAS-DesktopMsgQueueWorker-11] [ClientConnectionMina.java:2869] - CMINA_XML:ClientConnection[Client[1, support@, , 6.0.3, Windows 10, 1, hashCode=487047b8], hashCode=78f36c8c]: sendXml(<Presence><ExchangeCalendarPresenceResponse start="2018-12-06T05:55" end="2018-12-07T05:55"><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification></ExchangeCalendarPresenceResponse></Presence>)
			
	DC -> APAS:
	
		<Presence>
			<ExchangeCalendarPresenceRequest end="2018-12-07T05:55" start="2018-12-06T05:55">
				<ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz"/>
			</ExchangeCalendarPresenceRequest>
		</Presence>			
				
	APAS -> DC:
	
		<Presence>
			<ExchangeCalendarPresenceResponse start="2018-12-06T05:55" end="2018-12-07T05:55">
				<ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification>
			</ExchangeCalendarPresenceResponse>
		</Presence>			
				
- Presence enry unregistered - APAS sends message per entry:

	APAS -> DC:
		<Presence>
			<PresenceUnregistered>
				<ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification>
			</PresenceUnregistered>
		</Presence>
				
- Calendar entry changed:	Exchange server sends POST request subsribers (APAS):

		10.51.51.175	10.51.51.121	HTTP/XML	619	POST /andphone/exchange/pushlistener HTTP/1.1 
			
	and calls APAS servlet:	
	
	- Exchange server sends a broadcast message, e.g:

		10.51.51.175	10.51.51.255	BROWSER	243	Host Announcement CEECS-WINAW-EX, Workstation, Server, NT Workstation, NT Server

		<?xml version="1.0" encoding="utf-8"?>
		<soap11:Envelope
			xmlns:soap11="http://schemas.xmlsoap.org/soap/envelope/">
			<soap11:Header>
				<t:RequestServerVersion
					xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages" Version="Exchange2010_SP2"
					xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types" />
				</soap11:Header>
				<soap11:Body>
					<m:SendNotification
						xmlns:t="http://schemas.microsoft.com/exchange/services/2006/types"
						xmlns:m="http://schemas.microsoft.com/exchange/services/2006/messages">
						<m:ResponseMessages>
							<m:SendNotificationResponseMessage ResponseClass="Success">
								<m:ResponseCode>NoError</m:ResponseCode>
								<m:Notification>
									<t:SubscriptionId>JgBjZWVjcy13aW5hdy1leC5hbmR0ZWsuY2VlLmNzLmVpbGFiLmJpehAAAAB74/ElmFjbTK+VltnVi/H1O9UWEmVQ1ggQAAAA6qidCiSHFkeaIyID+fKrGg==</t:SubscriptionId>
									<t:PreviousWatermark>AQAAAOpWVDDWfqxLm3RGwWywdiv/iQIAAAAAAAA=</t:PreviousWatermark>
									<t:MoreEvents>false</t:MoreEvents>
									<t:CreatedEvent>
										<t:Watermark>AQAAAOpWVDDWfqxLm3RGwWywdiv/iQIAAAAAAAE=</t:Watermark>
										<t:TimeStamp>2018-11-22T10:30:10Z</t:TimeStamp>
										<t:ItemId Id="AQMkADBhOWRhOGVhLTg3MjQtNDcxNi05YTIzLTIyADAzZjlmMmFiMWEARgAAA9YQQZzoNWBKlZQ6xBJtjQkHAN2NyHIGtalDnSoEKBVV00UAAAIBDQAAAN2NyHIGtalDnSoEKBVV00UAAAINMgAAAA==" ChangeKey="DwAAAA==" />
										<t:ParentFolderId Id="AQMkADBhOWRhOGVhLTg3MjQtNDcxNi05YTIzLTIyADAzZjlmMmFiMWEALgAAA9YQQZzoNWBKlZQ6xBJtjQkBAN2NyHIGtalDnSoEKBVV00UAAAIBDQAAAA==" ChangeKey="AQAAAA==" />
									</t:CreatedEvent>
									<t:ModifiedEvent>
										<t:Watermark>AQAAAOpWVDDWfqxLm3RGwWywdisCigIAAAAAAAE=</t:Watermark>
										<t:TimeStamp>2018-11-22T10:30:10Z</t:TimeStamp>
										<t:FolderId Id="AQMkADBhOWRhOGVhLTg3MjQtNDcxNi05YTIzLTIyADAzZjlmMmFiMWEALgAAA9YQQZzoNWBKlZQ6xBJtjQkBAN2NyHIGtalDnSoEKBVV00UAAAIBDQAAAA==" ChangeKey="AgAAAA==" />
										<t:ParentFolderId Id="AQMkADBhOWRhOGVhLTg3MjQtNDcxNi05YTIzLTIyADAzZjlmMmFiMWEALgAAA9YQQZzoNWBKlZQ6xBJtjQkBAN2NyHIGtalDnSoEKBVV00UAAAIBCAAAAA==" ChangeKey="AQAAAA==" />
									</t:ModifiedEvent>
								</m:Notification>
							</m:SendNotificationResponseMessage>
						</m:ResponseMessages>
					</m:SendNotification>
				</soap11:Body>
			</soap11:Envelope>

	- APAS processes notification:
	
		POST ==> com.andtek.andphone.presence.msews.ExchangePushListener.doPost(...)
			--> traceContent(...)
			---------------------- notification ID not found ----------------------------
			--> LOG:	"Received event notification push from EWS server but no push entry matches subscriptionID"
			
			

-------------------------------------------------------------------------------------------------------------------
Register
========
Elements
--------
ExchangeCachedCalendarServer			: it  represents an Exchange Calendar Presence Server object which communicates with Microsoft Exchange Server
											to get Calendar Free/Busy information via EWS SOAP interface.

ExchangeCalendarPresenceSourceImpl		: it represents a presence source object for Exchange Calendar

RegistrationEvent						: event to register/unregister
											- addressToRegister (ExchangePresenceIdentification)
											
RegisteredAddressEntry					: CACHE element to store  registered oresence addresses
											- attendeeInfo (from EWS API)
											- identification (ExchangePresenceIdentification)
											
ExchangePresenceIdentification			: address to register
											- state (ExchangePresenceState: Busy, Free, Tentative, ...)
											- identifier
											- identifierName
											
microsoft.exchange.webservices.data.AttendeeInfo	: Attendee type + SMTP address

ExchangeEventNotificationsManager		: A class for subscription management, containing the subscription, 
											the on-event callback and a boolean indicating if subscription has been invalidated 
											(e.g. should be removed / unsubscribed)


 
- Registration/unregistration
	Always created RegistrationEvent which is a thread which ecexuted by 
	
	com.andtek.andphone.presence.msews.ExchangeCalendarPresenceSourceImpl.RegistrationEvent created as THREAD -->RegistrationEvent.run()
		--> ExchangeCalendarPresenceSourceImpl.doExecuteRegistration(RegistrationEvent this)
			-------------------------------------- event.register --------------------------------------
			--> registerPresenceAddress(ExchangePresenceIdentification address)
				--------------- identifier of address contained by registeredPresenceAddresses ------------------
				- YES:
					getting address for event
				- NO					
					--> ExchangeCachedCalendarServer.subscribeToCalendarAutomaticInvalidation(AttendeeInfo attendeeInfo)
						- SUBSCRIBE TO CALENDAR:
						--> subscription = ExchangeEventNotificationsManager.subscribeToEventNotification(callback, exchangeService, enablePushNotification, impersonatedUserId, folders, EventType.Created,EventType.Deleted,EventType.Modified);
								where:	
									- callback:		InvalidationCallback(new AttendeeInfo(emailAddress)
							- registering pull/push notifications
							------------------ if PUSH URL and push enabled -----------------
								- PUSH URL:	http://APAS:8080/andphone/exchange/pushlistener
								--> subscribeToPushNotifications(requestService,folders,eventTypes)
									--> MS....ExchangeService.subscribeToPushNotifications()	 
							--> ExchangeEventNotificationsManager.pushSubscriptions.put(subscription.getId(), SubscriptionEntry<PushSubscription> entry)
						--> ExchangeCachedCalendarServer.calendarNotificationSubscriptions.putIfAbsent(emailAddress, subscriptionId)
					--> registeredPresenceAddresses.put 
					
				--> send PresenceIdentificationRegisteredEvent with registeredAddress
			
			-------------------------------------- !(event.register) --------------------------------------
			--> unregisterPresenceAddress(address)

	
-------------------------------------------------------------------------------------------------------------------
Unregister
==========
		
- Unregister all
  --------------		
	It gets entries from cache, creates RegistrationEvents (false) and executes them:
	
	--> ExchangeCalendarPresenceSourceImpl.unregisterAll()
		-------------------- loop on registeredPresenceAddresses values --------------------------------
			--> sendExecuteRegistration(new RegistrationEvent(value.identification, false))				// false -> unregister
				--> registrationExecutor.execute(registrationEvent)


	

- Unregister presence adresses:

		PresenceSource[] sources = com.andtek.andphone.presence.Module.getPresenceProvider().getPresenceSourcesAsArray();
		for (PresenceSource source : sources) {
			if (source instanceof ExchangeCalendarPresenceSourceImpl) {
				return (Exchange+CalendarPresenceSourceImpl)source;
			}
		}


	after unregister APAS sends messages about unregistered addresses:
	
		[DEBUG] [APAS-defaultWorker-20] [ClientConnectionMina.java:2864] - CMINA_XML:ClientConnection[Client[14, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=4bef3299], hashCode=499f8535]: sendXml(<Presence><PresenceUnregistered><ExchangeCalendarIdentification email="ssotest1@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification></PresenceUnregistered></Presence>)
		[DEBUG] [APAS-defaultWorker-23] [ClientConnectionMina.java:2864] - CMINA_XML:ClientConnection[Client[14, ftoth@ftoth-PC, , 6.0.3, Windows 7, 1, hashCode=4bef3299], hashCode=499f8535]: sendXml(<Presence><PresenceUnregistered><ExchangeCalendarIdentification email="ssotest2@andtek.cee.cs.eilab.biz" status="Free"></ExchangeCalendarIdentification></PresenceUnregistered></Presence>)



			
-------------------------------------------------------------------------------------------------------------------
Caching 
=======
Desktop client
--------------
DC only refreshes presence information either during the first occurence of a user in local (DC) cache or in every 10 minutes it generates a new <PresenceRegister>.
If a user contained by DC cache it won't generate <PresenceRegister> for this user during the next query.
	

APAS
----
- cache for registered addresses here:

	ExchangeCalendarPresenceSourceImpl:
		ConcurrentHashMap<String, RegisteredAddressEntry> registeredPresenceAddresses

	Registered addresses stored into a cache. It contains RegisteredAddressEntry items by identifier:

	CACHE:	ConcurrentHashMap<String, RegisteredAddressEntry> registeredPresenceAddresses
		key: 		String - identifier (e.g. ssotest1@andtek.cee.cs.eilab.biz)
		value:		ExchangeCalendarPresenceSourceImpl.RegisteredAddressEntry

		 HashMap containing all data of the currently registered addresses.
		 To each address we associate an AttendeeInfo (needed by exchange service) and the current presence status.
		
- cache for subscriptions

	ExchangeCachedCalendarServer:
		ConcurrentHashMap<String, String> calendarNotificationSubscriptions

	Subscriptions are stored into also a cache map<emailAddress, subscriptionId>:
	
- caching calendar events

	APAS store calendar events into JCS cache:
	
		ExchangeCachedCalendarServer.cache
		
- caching notification for an email:  map<Attendee email address, subscription ID>

	ExchangeCachedCalendarServer.calendarNotificationSubscriptions
	
	

Tracing APAS cache
------------------
To get info call this debug page:

	APAS:8080/andphone/JTAPIServlet?debug=presence_exchange

	--> doPresenceExchangeDebug(request, response, out, output, noRequiredLogin, refreshSecs)
		----------------------- loop on presence sources where instanceof ExchangeCalendarPresenceSourceImpl ----------------------------------
		--> snapshots = exchangeSource.getPresenceSnapshot()
			
	It creates a snapshot from the cache (registeredPresenceAddresses)before rendering a list of entries.
		
-------------------------------------------------------------------------------------------------------------------
Handling calendar events
========================
com.andtek.andphone.presence.msews.ExchangeCalendarPresenceSourceImpl
	- Represents a presence source object for Exchange Calendar
	- It implements a callback for the presence update executor.
	 The  presence update executor is responsible for periodically
	 computing presence status from the Calendar Events.

 Initialization:
 --> om.andtek.andphone.presence.msews.ExchangeCalendarPresenceSourceImpl.init()
	--> restartPresenceUpdateExecutor()
		--> Executors.newSingleThreadScheduledExecutor(new APASThreadFactory("ExchangePresenceUpdater"))
		--> presenceUpdateExecutor.scheduleWithFixedDelay(new PresenceUpdateCallback(), BACKGROUND_UPDATER_THREAD_DELAY, BACKGROUND_UPDATER_THREAD_DELAY, TimeUnit.SECONDS);
			- PresenceUpdateCallback() will be called and then waiting for BACKGROUND_UPDATER_THREAD_DELAY (5 secs)

Running:
--> PresenceUpdateCallback.run()
	--> waiting
	--> updatePresenceStatus(attendeesToUpdate)
		- it collects attendees where events received and send them as event		
		--> sendEvent(new PresenceIdentificationsStateChangedEvent(this, changedIdentifications)) ==> PresenceIdentificationsStateChangedEvent
		
--> ExchangeCalendarPresenceSourceImpl.PresenceUpdateCallback().run()
	--> ExchangeCalendarPresenceSourceImpl.updatePresenceStatus(...)
		--> ExchangeCachedCalendarServer.getAttendeeCalendarEvents(
			--> doGetAttendeeCalendarEvents()
				- it gets events either from cache or 
				--> retrieveCalendarEventsFromCache(attendees,normalizedTimeWindows,cacheMisses)
				--> updateCache(...)
					--> putCalendarEventsInCache(AttendeeInfo attendeeInfo, Collection<CalendarEvent> events, TimeWindow timeWindow)
						
	
		
		

-------------------------------------------------------------------------------------------------------------------
How presence information goes from Exchange Server to DC?
=========================================================
- APAS polling Exchange server in every 10 seconds


- DC polling APAS in every 10 minute to refresh subscriptions ((<Presence><PresenceRegistered>....)





		
	
-------------------------------------------------------------------------------------------------------------------
Troubleshooting, tracing
========================
Exchange Presence writes tracing information with "ews_trace" logger into:

	/var/log/apas/ews_trace.log
	
This file is written by:
- EWS API 

	ExchangeTraceListener which implements ITraceListener registered in 
		
		com.andtek.andphone.presence.msews.ExchangeCachedCalendarServer
		
	to trace EWS API.
	
- com.andtek.andphone.presence.msews.ExchangePushListener

	It's a servlet which called by Exchange server on push events.
	POST ==> doPost(...)
			--> traceRequestFlags(request)
			
				<Trace Tag=ExchangePushListenerRequestHttpHeaders ...
			
			--> traceContent(...);
				
				<Trace Tag=ExchangePushListenerRequest ...
				OR
				<Trace Tag=ExchangePushListenerResponse ...
				

!!! IMPORTANT !!! 
ews_trace logger is in INFO level by default.
Set it with this JSP:

	APAS:8080/andphone/jsp/dev/setLogLevel.jsp


			
**************************************************************************************
**************************************************************************************
**************************************************************************************
Classes:

	com.andtek.andphone.presence.msews.ExchangeCachedCalendarServer
	DynamicPresenceSubscriptionManager
	
	
Import:
	com.andtek.andphone.presence.msews.**
	import microsoft.exchange.webservices.**