==========================
Log analysis of recordings
==========================

SEE MORE:  doc\software\tools_and_languages\telephony\Apas\HOWTO\source_code_discovery\Recording.txt 

- Goals of analysis
- Where can you find call ID in logs?	
- Test call info
- Steps of analysis
- Structure of log files
- Recording rules
- How to identify a call from RTP stream?
- LogExpert highlights

-------------------------------------------------------------------------------------------------------------------------------------------
Goals of analysis
=================
- To get recorded calls from logs with call information
- To get recording protocol messages between APAS and recorder



-------------------------------------------------------------------------------------------------------------------------------------------
Where can you find call ID in logs?	
===================================
- andphone.log
- andphone_record.log
- CiscoJtapi.log
- recorder.log
- sqltiming.log


-------------------------------------------------------------------------------------------------------------------------------------------
Test call info
==============
We use logs from this call as sample here.
Log files can be found under usecase1/logs.

Use case:

	- configuration:
		- there is a configured SIP trunk recording with rules
		- logs are on DEBUG level
		- jmf.log enabled
		- no announcement
	- not-recorded calling party calls a recorded called party
	- talking
	- terminated by calling party


	
Recorded call	
-------------

	+36110009100 -----> +36110009020

APAS:			10.51.51.122
Call ID:		sip21172/1
Time:			2020-02-28 07:47:09 - 2020-02-28 07:47:21  :  12 sec(s)
Calling party:	+36110009100			SEP100000009030
Called party:	+36110009020			SEPA45630BB1748
RTP 1 (calling):	10.51.51.122:47793
RTP 2 (called):		10.51.51.122:41899
DB ID:			90		

RECORDING[0][sip21172/1, SEPA45630BB1748] : 2020-02-28 07:47:09 - 2020-02-28 07:47:21, DB:104
   - callingPartyName=
   - srcIP=10.51.51.122
   - callID=sip21172/1
   - calledPartyName=
   - stopOut=1
   - terminal=SEPA45630BB1748
   - originalCalledParty=+36110009020
   - srcPort=40895
   - initiated=false
   - dstIP=10.51.51.122
   - lastRedirectingParty=
   - callingParty=+36110009100
   - originalCallingParty=+36110009100
   - dstPort=46610
   - calledParty=+36110009020 
	
-------------------------------------------------------------------------------------------------------------------------------------------
Steps of analysis
=================
NOTE: 
	Scripts (*.sh) are in APAS_SRC_SIR/development/log-analysis.
	You can run all scripts in a single step with:
	
		FULL_REPORT_FOR_RECORDING.sh

	
Steps are:
	0. Initialization
	
	1. Get time range information from log files
	
	2. Locating a call in logs (getting call ID, time, calling/called party)

	3. Checking start of recording on APAS side

	4. Checking start of recording on sniffer side

	5. Check SIP IP/port information on APAS side
	
	6. Check recording in database 

	7. Check start of recording a stream and starting disk thread on sniffer
	

0. Initialization
-----------------
To uncompress archives and convert datetime information call:

	initLogFiles.sh <log-dir> -u
	initLogFiles.sh <log-dir> -d 
	

	
1. Get time range information from log files
--------------------------------------------
Get time ranges from first and last lines which has time. 

	createTimeRangeReport.sh <log-dir>


	
	
2. Locating a call in logs
--------------------------
- from Cisco JTAPI:
	
		csript:				getCallsFromCiscoJtapi.sh
		files:				CiscoJtapi*.log
		Regex pattern:		<TIME>.*received Event: com.cisco.cti.protocol.NewCallEvent

	
	CallID can be retrieved from 'callID' field of NewCallEvent object.
	
		539: 2020-02-28 07:47:00 CET %JTAPI-PROTOCOL-7-UNK:(P1-10.51.51.34) received Event: com.cisco.cti.protocol.NewCallEvent {
		  eventSequence                        = 13
		  lineCallManagerID                    = 1
		  lineID                               = 1590
		  lineHandleSpecified                  = true
		  deviceName                           = SEPA45630BB1748
		  callCallManagerID                    = 1
		  callLegID                            = 25252351																<<<<<<<<<<<<<<
		  globalCallManagerID                  = 1
		  callID                               = 21172																	<<<<<<<<<<<<<<
		  callingParty                         = +36110009100															<<<<<<<<<<<<<<
		  calledParty                          = +36110009020															<<<<<<<<<<<<<<
		  originalCalledParty                  = +36110009020
		  state                                = 2
		  origin                               = 1
		  userData                             = null
		  auxiliaryData                        = 1
		  farEndpointCallManagerID             = 1
		  farEndpointType                      = 1
		  reason                               = 1
		  callingPartyName                     = 
		  calledPartyName                      = 
		  originalPartyName                    = 
		  lastRedirectingParty                 = 
		  lastRedirectingPartyName             = 
		  callingPartyDeviceName               = SEP100000009100
		  bRemoteInUse                         = false
		  parentCallManagerID                  = 0
		  parentCallID                         = 0
		  bPrivacy                             = false
		  mediaDeviceName                      = 
		  mediaResourceId                      = 0
		  unModifiedCallingParty               = +36110009100
		  unModifiedCalledParty                = +36110009020
		  unModifiedOriginalCalledParty        = +36110009020
		  unModifiedLastRedirectingParty       = 
		  callingPartyPi                       = true
		  callingPartyNamePi                   = true
		  calledPartyPi                        = true
		  calledPartyNamePi                    = true
		  originalCalledPartyPi                = true
		  originalCalledPartyNamePi            = true
		  lastRedirectingPartyPi               = true
		  lastRedirectingPartyNamePi           = true
		  unicodeCallingPartyName              = com.cisco.cti.protocol.UnicodeString {
		  unicodedisplayName = 
		  count              = 0
		  sizeofElement      = 2
		  }
		  unicodeCalledPartyName               = com.cisco.cti.protocol.UnicodeString {
		  unicodedisplayName = 
		  count              = 0
		  sizeofElement      = 2
		  }
		  unicodeOriginalCalledPartyName       = com.cisco.cti.protocol.UnicodeString {
		  unicodedisplayName = 
		  count              = 0
		  sizeofElement      = 2
		  }
		  unicodelastRedirectingPartyName      = com.cisco.cti.protocol.UnicodeString {
		  unicodedisplayName = 
		  count              = 0
		  sizeofElement      = 2
		  }
		  unicodeCallingPartyLocale            = 1
		  unicodeCalledPartyLocale             = 1
		  unicodeOriginalCalledPartyLocale     = 1
		  unicodeLastRedirectingPartyLocale    = 1
		  callingPartyDNInfo                   = com.cisco.cti.protocol.PartyDNInfo {
		  sipUrl           = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  unModifiedsipUrl = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  partition        = FTOTH_Phones
		  voiceMailbox     = 
		  numberType       = 0
		  }
		  calledPartyDNInfo                    = com.cisco.cti.protocol.PartyDNInfo {
		  sipUrl           = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  unModifiedsipUrl = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  partition        = FTOTH_Phones
		  voiceMailbox     = 
		  numberType       = 0
		  }
		  originalCalledPartyDNInfo            = com.cisco.cti.protocol.PartyDNInfo {
		  sipUrl           = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  unModifiedsipUrl = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  partition        = FTOTH_Phones
		  voiceMailbox     = 
		  numberType       = 0
		  }
		  lastRedirectingPartyDNInfo           = com.cisco.cti.protocol.PartyDNInfo {
		  sipUrl           = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  unModifiedsipUrl = com.cisco.cti.protocol.SIPUrl {
		  user         = 
		  host         = 
		  port         = 0
		  transportTye = 0
		  urlType      = 0
		  }
		  partition        = 
		  voiceMailbox     = 
		  numberType       = 0
		  }
		  ctiCallType                          = 0
		  callingPartyIpAddr                   = -1963393270
		  farEndLineIdDN                       = +36110009100
		  farEndLineIdPartition                = FTOTH_Phones
		  callPresentable                      = true
		  featurePriority                      = 1
		  globalizedCallingParty               = +36110009100
		  callingPartyIpAddr_v6                = null
		  callingPartyIpAddressingMode         = 0
		  bIsRolloverCall                      = false
		  uniqueProtocolCallReference          = 00000000000052B4018151FF00000000
		  cgpnHuntMemberDN                     = 
		  cgpnHuntMemberPartition              = 
		  cgpnPatternUsage                     = 2
		  cdpnPatternUsage                     = 2
		  callingPartyMultiMediaCapBitMask     = 3
		  calledPartyMultiMediaCapBitMask      = 3
		  callingPartyMultiMediaCapabilityInfo = com.cisco.cti.protocol.DeviceMultiMediaCapability {
		  videoCapability  = 0
		  telepresenceInfo = 0
		  screenCount      = 0
		  }
		  calledPartyMultiMediaCapabilityInfo  = com.cisco.cti.protocol.DeviceMultiMediaCapability {
		  videoCapability  = 0
		  telepresenceInfo = 0
		  screenCount      = 0
		  }
		  deviceUUID                           = 
		  peerUUID                             = 7649a3e4eb036c89418a63fbaa497811
		} 		
		
		
		
- Get call from andphone.log.*

	files:				andphone.log.*
	Regex pattern:		<TIME>.*recorder.PhoneCallObserver.*RCCO-CC.*CallActiveEv
	
	
	
		[2019-12-19 15:52:57,014] [DEBUG] [ObserverThread(com.andtek.andphone.recorder.PhoneCallObserver@369f3e9e)] [PhoneCallObserver.java:479] - RCCO-CC - [(P1-FTOTH_APAS2) 19329/1 CallActiveEv [#26] Cause:106 CallCtlCause:0 CiscoCause:0 FeatReason:12, cgpn: [+36110009098], cdpn: [+36110009020], call: [(P1-FTOTH_APAS2) GCID=(1,19329)->ACTIVE]]

		Log entry about CallActiveEv contains call ID.
		
		
- Get call from andphone_record.log:


		Pattern (regex):
	
		<TIME>.*->recordCall: <recordCall.*callID=

			2019-12-19 15:53:02,421: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" callingParty="+36110009098" calledParty="+36110009020" callingPartyName="" calledPartyName="" originalCallingParty="+36110009098" originalCalledParty="+36110009020" lastRedirectingParty="" initiated="false"/>
			2019-12-19 15:53:02,657: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" srcIP="10.51.51.122" srcPort="47793"/>
			2019-12-19 15:53:02,722: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" dstIP="10.51.51.122" dstPort="41899"/>
			2019-12-19 15:53:33,110: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" stopOut="1" />

3. Checking start of recording in APAS side			
-------------------------------------------
Log:		andphone.log

First:
	Pattern:
			Sending XML to recorder [\(]sip[\)]
		OR
			Sending XML to recorder [\(]sip[\)].*<CALL_ID>

Then:
	Pattern:		XML_SOCKET:sending XML.*<CALL_ID>
		


4. Checking start of recording in sniffer side
----------------------------------------------
Log:		andphone_record.log

Pattern:

		[\<]recordCall
	OR
		[\<]recordCall.*<CALL_ID>
	
	--- start ---
	2019-12-19 15:53:02,421: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" callingParty="+36110009098" calledParty="+36110009020" callingPartyName="" calledPartyName="" originalCallingParty="+36110009098" originalCalledParty="+36110009020" lastRedirectingParty="" initiated="false"/>
	2019-12-19 15:53:02,424: 1: worker::send(<recordCallResponse code="0" string="OK" callID="sip19329/1" dbID="90" state="1"/>
	2019-12-19 15:53:02,657: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" srcIP="10.51.51.122" srcPort="47793"/>
	2019-12-19 15:53:02,659: 1: worker::send(<recordCallResponse code="0" string="OK" callID="sip19329/1" dbID="90" state="1"/>
	2019-12-19 15:53:02,722: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" dstIP="10.51.51.122" dstPort="41899"/>
	2019-12-19 15:53:02,724: 1: worker::send(<recordCallResponse code="0" string="OK" callID="sip19329/1" dbID="90" state="1"/>
	--- end ---
	2019-12-19 15:53:33,110: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="sip19329/1" stopOut="1" />
	2019-12-19 15:53:33,110: 1: worker::send(<recordCallResponse code="100" string="Call removed"/>
	2019-12-19 15:53:33,170: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="csip25153617" stopOut="1" />
	2019-12-19 15:53:33,170: 1: worker::send(<recordCallResponse code="404" string="Call not found for this terminal and callID"/>
	2019-12-19 15:53:33,170: 1: ->recordCall: <recordCall terminal="SEPA45630BB1748" callID="csip25153617" stopOut="1" />
	2019-12-19 15:53:33,170: 1: worker::send(<recordCallResponse code="404" string="Call not found for this terminal and callID"/>
	
	

	- APAS sends calling information, RTP IPs and ports
	- sniffer returns database ID of recording


5. Check SIP IP/port information on APAS side
---------------------------------------------
From PCAP by Wireshark (Telephony/SPI Flows - copy as CSV):

"Start Time","Stop Time","Initial Speaker","From","To","Protocol","Duration","Packets","State","Comments"

"21.286949","49.341986","192.168.5.18","<sip:9000@192.168.5.18;x-nearend;x-refci=31117820;x-nearenddevice=SEP64A0E714F271;x-farendrefci=31117819;x-farenddevice=SEP100000009030;
	x-farendaddr=9030","<sip:9245@192.168.5.245","SIP","00:00:28","7","COMPLETED","INVITE 200"
	
"21.306881","49.362335","192.168.5.18","<sip:9000@192.168.5.18;x-farend;x-refci=31117820;x-nearenddevice=SEP64A0E714F271;x-farendrefci=31117819;x-farenddevice=SEP100000009030;
	x-farendaddr=9030","<sip:9245@192.168.5.245","SIP","00:00:28","6","COMPLETED","INVITE 200"



Log:		andphone.log

Pattern:
		FAREND sip trunk connection.*<CALL_ID>
		NEAREND sip trunk connection.*<CALL_ID>

[2019-12-19 15:53:02,722] [DEBUG] [APAS-defaultWorker-1] [RecorderSipTrunk.java:385] - FAREND sip trunk connection from SEPA45630BB1748, callID=19329/1, ip=10.51.51.122, port=41899
[2019-12-19 15:53:02,722] [DEBUG] [APAS-defaultWorker-1] [XMLSocket.java:426] - XML_SOCKET:sending XML [<recordCall terminal="SEPA45630BB1748" callID="sip19329/1" dstIP="10.51.51.122" dstPort="41899"/>]
[2019-12-19 15:53:02,724] [DEBUG] [APAS-SnifferConnection] [XMLSocket.java:426] - XML_SOCKET:received message: <recordCallResponse code="0" string="OK" callID="sip19329/1" dbID="90" state="1"/>
...
[2019-12-19 15:53:02,656] [DEBUG] [APAS-defaultWorker-31] [RecorderSipTrunk.java:419] - NEAREND sip trunk connection from SEPA45630BB1748, callID=19329/1, ip=10.51.51.122, port=47793
[2019-12-19 15:53:02,656] [DEBUG] [APAS-defaultWorker-31] [XMLSocket.java:426] - XML_SOCKET:sending XML [<recordCall terminal="SEPA45630BB1748" callID="sip19329/1" srcIP="10.51.51.122" srcPort="47793"/>]
[2019-12-19 15:53:02,659] [DEBUG] [APAS-SnifferConnection] [XMLSocket.java:426] - XML_SOCKET:received message: <recordCallResponse code="0" string="OK" callID="sip19329/1" dbID="90" state="1"/>

- FAREND connection sends dstIP and dstPort to sniffer
- NEAREND connection sends srcIP and srcPort to sniffer

	
	
6. Check recording in database 	
------------------------------
- APAS sends recordCall XML tags
- sniffer inserts/updates entry in rec_call table for recorded call
- sniffer responses a recordCallResponse XML with callID and associated DB entry ID


	select * from rec_call where id = 90


	id     start                          end                            lastaction                     callingparty     calledparty     phoneip                   remoteip                  status     initiated     initiator     filename     filesize     signaling     codec     keep     custom     recorder     callingpartyname     calledpartyname     duplicate     gcid        origcallingparty     origcalledparty     admin     rec_password                      lrp     lrp_name                 
	-----  -----------------------------  -----------------------------  -----------------------------  ---------------  --------------  ------------------------  ------------------------  ---------  ------------  ------------  -----------  -----------  ------------  --------  -------  ---------  -----------  -------------------  ------------------  ------------  ----------  -------------------  ------------------  --------  --------------------------------  ------  ------------------------ 
	90     2019-12-19 15:53:02.422896+01  2019-12-19 15:53:33.128134+01  2019-12-19 15:53:38.370084+01  +36110009098     +36110009020    10.51.51.122              10.51.51.122              4          0                           90.rec       63600        16            2         10       (null)                                                           0             sip19329/1  +36110009098         +36110009020        (null)    853AE90F0351324BD73EA615E6487517                                   




7. Check start of recording a stream and starting disk thread on sniffer
------------------------------------------------------------------------
	Setting up Disk_thread for call dbId:	


	Log:		andphone_record.log
	
	
	
-------------------------------------------------------------------------------------------------------------------------------------------
Structure of log files
======================
There are free text log entries but there are specific patters in log files that can be recognized during analysis


andphone_record.log
-------------------
- Every log entry begins with date-time and level:

	2019-12-19 15:53:02,758: 3:

- Found UDP packet, without call:

	Patterns:	[|]source:.*len:.*seq:

	2017-May-03 08:54:04.648: 3: |source: 192.168.5.201 len: 96 port source: 137  dest: 137 seq: 10512 ts: 65536 flags: 8730
	
- Found UDP(RTP) packet, associated to a call:

	Patterns:	[|]found Call_.*db:

	2019-12-19 15:53:02,758: 3: |found Call_1 0,db:90 980 (+36110009098,+36110009020) [56]
	
- Found UDP(RTP) packet, FIRST packet which is associated to a call:

	Patterns:	[|]found Call_.*db:.*Resyncing RTP

	2019-12-19 15:53:02,772: 3: |found Call_0 0,db:90 980 (+36110009098,+36110009020) [70]Resyncing RTP because new stream detected [call-id=90/sip19329/1, dir=0, ssrc=1902142631]
	
	
	
-------------------------------------------------------------------------------------------------------------------------------------------
Recording rules
===============
Log:		andphone_record.log

Pattern:	PhoneCallObserver.*Checking recording rules


	[2019-12-19 15:53:02,397] [DEBUG] [ObserverThread(com.andtek.andphone.recorder.PhoneCallObserver@369f3e9e)] [RuleSet.java:349] - Checking recording rules 
	   given: (oid = 19329/1 CGPN = +36110009098 CDPN = +36110009020 OCGPN = +36110009098 OCDPN = +36110009020)
	   rules [1]: 
		 1. *MATCH* (action = [ RECORD], storage = 10) <- (unknown[3] == '+36110009020')   '9020                                           ...'
		  ! evaluation stopped on rule match 
	   result: 
		 (action = [ RECORD], storage = 10)


-------------------------------------------------------------------------------------------------------------------------------------------
How to identify a call from RTP stream?
=======================================
RTP stream contains an SSRC number which iidentifies the stream. SSRC is always the same value in RTP packets.
SSRC will be identified and logged by recorder into andphone_record.log:

	2020-08-14 14:12:39,335: 3: |found Call_1 0,db:200 980 (+36110009100,+36110009020) [0]Resyncing RTP because new stream detected [call-id=200/sip23988/1, dir=1, ssrc=-1459662558]
	...
	2020-08-14 14:12:39,450: 3: |found Call_0 0,db:200 980 (+36110009100,+36110009020) [115]Resyncing RTP because new stream detected [call-id=200/sip23988/1, dir=0, ssrc=607334496]


NOTE:
	From v6.2.3 it has been fixed to print an unsigned and hexa value (printf %u %x).
	Unfortunately SSRC has been printed into signe decimal format (printf %d) so printed value is sometimes negative.

To get SSRC of a stream from PCAP file:
	- open file with Wireshart
	- identify streams (Decode as... on UDP packets)
	- get SSRC from RTP frame, e.g:
	
			Synchronization Source identifier: 0x32b924e3 (850994403)







		 
-------------------------------------------------------------------------------------------------------------------------------------------
LogExpert highlights
====================
PhoneCallObserver.*Checking recording rules		(regex)
<recordCall
recorder.PhoneCallObserver						(regex, line)
	

	