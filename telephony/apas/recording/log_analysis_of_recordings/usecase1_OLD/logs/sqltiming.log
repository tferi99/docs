-----> 2020-02-28 07:46:07.923  com.andtek.andphone.Config.readConfigFromDB(Config.java:1244)
2. SELECT param, val, module FROM config WHERE param='version' 
 {executed in 5 msec}

-----> 2020-02-28 07:46:08.038  com.andtek.andphone.Config.readConfigFromDB(Config.java:1270)
2. SELECT module, param, val FROM config 
 {executed in 110 msec}

-----> 2020-02-28 07:46:08.046  com.andtek.andphone.Config.logCurrentConfig(Config.java:1585)
3. SELECT param, val, module FROM config WHERE param='version' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:08.067  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
4. SELECT val FROM config WHERE module='global' AND param='andServer' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:08.070  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
5. UPDATE config SET val='10.51.51.122:8080' WHERE module='global' AND param='andServer' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:08.071  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
6. SELECT val FROM config WHERE module='global' AND param='andGuardServer' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:08.072  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
7. UPDATE config SET val='10.51.51.122:8081' WHERE module='global' AND param='andGuardServer' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:16.307  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
12. SELECT val FROM config WHERE module='recorder' AND param='Appliance' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:16.323  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
13. UPDATE config SET val='true' WHERE module='recorder' AND param='Appliance' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:16.331  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
14. SELECT val FROM config WHERE module='recorder' AND param='RecPath' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:16.333  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
15. UPDATE config SET val='/var/lib/andphone/archive' WHERE module='recorder' AND param='RecPath' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:16.334  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
16. SELECT val FROM config WHERE module='recorder' AND param='ShowSoftRestart' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:16.347  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
17. UPDATE config SET val='true' WHERE module='recorder' AND param='ShowSoftRestart' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:16.349  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
18. SELECT val FROM config WHERE module='recorder' AND param='TmpRecPath' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:16.357  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
19. UPDATE config SET val='/var/lib/andphone/tmp' WHERE module='recorder' AND param='TmpRecPath' 
 {executed in 8 msec}

-----> 2020-02-28 07:46:17.218  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
28. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'global',NULL,'Apas 
is starting up on node ''andphone'' (10.51.51.122)',0,0) 
 {executed in 182 msec}

-----> 2020-02-28 07:46:17.263  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
28. SELECT currval('logging_id_seq') 
 {executed in 43 msec}

-----> 2020-02-28 07:46:17.449  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
29. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'global',NULL,'Apas 
version: 6.2.2-12898 (Appliance-64bit)',0,0) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:17.450  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
29. SELECT currval('logging_id_seq') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:17.658  com.andtek.andphone.global.Module.addBackupUser(Module.java:1277)
30. SELECT u.username, u.password from users u INNER JOIN userroles ur ON ur.uid=u.uid INNER JOIN 
roles r ON r.rid=ur.rid WHERE r.rolename='global_backup' AND u.username='backup' 
 {executed in 176 msec}

-----> 2020-02-28 07:46:18.263  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 9 msec}

-----> 2020-02-28 07:46:18.666  com.andtek.andphone.global.ModuleDB.updateSFTPAvailPeriod(ModuleDB.java:1353)
20. SELECT sgm.gid, sgm.serverID, s.serverType, s.serverName FROM servergroup_members sgm, servers 
s WHERE s.serverID=sgm.serverID AND s.serverType=3 
 {executed in 65 msec}

-----> 2020-02-28 07:46:18.690  com.andtek.andphone.global.Module$LicenseDistributionCleanupThread.run(Module.java:1187)
31. DELETE FROM licenseDistribution WHERE created < '12/28/2019 07:46:18.551' 
 {executed in 136 msec}

-----> 2020-02-28 07:46:18.949  com.andtek.andphone.global.Module$LicenseDistributionCleanupThread.run(Module.java:1196)
31. VACUUM licenseDistribution 
 {executed in 259 msec}

-----> 2020-02-28 07:46:18.967  com.andtek.andphone.global.Module$LicenseDistributionCleanupThread.run(Module.java:1204)
31. DELETE FROM moduleStats WHERE created < '12/28/2019 07:46:18.949' 
 {executed in 3 msec}

-----> 2020-02-28 07:46:18.985  com.andtek.andphone.global.Module$LicenseDistributionCleanupThread.run(Module.java:1213)
31. VACUUM moduleStats 
 {executed in 17 msec}

-----> 2020-02-28 07:46:19.073  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1123)
20. DROP VIEW IF EXISTS cucm_cdr_view 
 {executed in 315 msec}

-----> 2020-02-28 07:46:19.221  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1125)
20. CREATE OR REPLACE VIEW cucm_cdr_view AS SELECT id AS id, cdr_date_time AS cdr_date_time,cdr_record_type 
AS cdr_record_type, global_call_id_callmanager_id AS global_call_id_callmanager_id, global_call_id_call_id 
AS global_call_id_call_id, orig_node_id AS orig_node_id, dest_node_id AS dest_node_id, orig_leg_call_identifier 
AS orig_leg_call_identifier, date_time_origination AS date_time_origination, orig_ip_addr AS 
orig_ip_addr, calling_party_number AS calling_party_number, calling_party_unicode_login_user_id 
AS calling_party_unicode_login_user_id,orig_cause_location AS orig_cause_location, orig_cause_value 
AS orig_cause_value, orig_media_transport_address_ip AS orig_media_transport_address_ip, orig_media_transport_address_port 
AS orig_media_transport_address_port, orig_mediacap_payload_capability AS orig_mediacap_payload_capability, 
orig_videocap_codec AS orig_videocap_codec, orig_videocap_resolution AS orig_videocap_resolution, 
orig_video_transport_address_ip AS orig_video_transport_address_ip, orig_video_transport_address_port 
AS orig_video_transport_address_port, dest_leg_call_identifier AS dest_leg_call_identifier, 
dest_ip_addr AS dest_ip_addr, original_called_party_number AS original_called_party_number, 
final_called_party_number AS final_called_party_number, final_called_party_unicode_login_user_id 
AS final_called_party_unicode_login_user_id, dest_cause_location AS dest_cause_location, dest_cause_value 
AS dest_cause_value, dest_media_transport_address_ip AS dest_media_transport_address_ip, dest_media_transport_address_port 
AS dest_media_transport_address_port, dest_mediacap_payload_capability AS dest_mediacap_payload_capability, 
dest_videocap_codec AS dest_videocap_codec, dest_videocap_resolution AS dest_videocap_resolution, 
dest_video_transport_address_ip AS dest_video_transport_address_ip, dest_video_transport_address_port 
AS dest_video_transport_address_port, date_time_connect AS date_time_connect, date_time_disconnect 
AS date_time_disconnect, last_redirect_dn AS last_redirect_dn, original_called_party_number_partition 
AS original_called_party_number_partition, calling_party_number_partition AS calling_party_number_partition, 
final_called_party_number_partition AS final_called_party_number_partition, last_redirect_dn_partition 
AS last_redirect_dn_partition,duration AS duration, orig_device_name AS orig_device_name, dest_device_name 
AS dest_device_name, orig_call_termination_on_behalf_of AS orig_call_termination_on_behalf_of, 
dest_call_termination_on_behalf_of AS dest_call_termination_on_behalf_of, orig_called_party_redirect_on_behalf_of 
AS orig_called_party_redirect_on_behalf_of, last_redirect_redirect_on_behalf_of AS last_redirect_redirect_on_behalf_of, 
orig_called_party_redirect_reason AS orig_called_party_redirect_reason, last_redirect_redirect_reason 
AS last_redirect_redirect_reason, dest_conversation_id AS dest_conversation_id, join_on_behalf_of 
AS join_on_behalf_of, comment AS comment, auth_code_description AS auth_code_description,auth_level 
AS auth_level, client_matter_code AS client_matter_code,call_secured_status AS call_secured_status, 
orig_conversation_id AS orig_conversation_id, auth_code_value AS auth_code_value , orig_ipv4v6_addr 
AS orig_ipv4v6_addr , dest_ipv4v6_addr AS dest_ipv4v6_addr , incoming_protocol_id AS incoming_protocol_id, 
outgoing_protocol_id AS outgoing_protocol_id, hunt_pilot_dn AS hunt_pilot_dn, hunt_pilot_partition 
AS hunt_pilot_partition, called_party_pattern_usage AS called_party_pattern_usage, was_call_queued 
AS was_call_queued, total_wait_time_in_queue AS total_wait_time_in_queue, calling_party_number_uri 
AS calling_party_number_uri, original_called_party_number_uri AS original_called_party_number_uri, 
final_called_party_number_uri AS final_called_party_number_uri, last_redirect_dn_uri AS last_redirect_dn_uri 
from cucm_cdr 
 {executed in 122 msec}

-----> 2020-02-28 07:46:19.231  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1208)
20. DROP VIEW IF EXISTS cucm_cmr_view 
 {executed in 10 msec}

-----> 2020-02-28 07:46:19.265  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1210)
20. CREATE OR REPLACE VIEW cucm_cmr_view AS SELECT id AS id, cmr_date_time AS cmr_date_time, cdr_record_type 
AS cdr_record_type, global_call_id_callmanager_id AS global_call_id_callmanager_id, global_call_id_call_id 
AS global_call_id_call_id, node_id AS node_id, call_identifier AS call_identifier, directory_number 
AS directory_number, date_timestamp AS date_timestamp, number_packets_sent AS number_packets_sent, 
number_octets_sent AS number_octets_sent, number_packets_received AS number_packets_received, 
number_octets_received AS number_octets_received, number_packets_lost AS number_packets_lost, 
jitter AS jitter, latency AS latency, directory_number_partition AS directory_number_partition, 
device_name AS device_name, global_call_id_cluster_id AS global_call_id_cluster_id, var_vq_metrics 
AS var_vq_metrics from cucm_cmr 
 {executed in 34 msec}

-----> 2020-02-28 07:46:19.283  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1242)
20. DROP VIEW IF EXISTS logging_view 
 {executed in 18 msec}

-----> 2020-02-28 07:46:19.302  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1244)
20. CREATE OR REPLACE VIEW logging_view AS SELECT id AS id, created AS created, level AS level, 
username AS username, message AS message, reference AS reference, related AS related FROM logging 
 {executed in 19 msec}

-----> 2020-02-28 07:46:19.312  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
32. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),1,'recorder',NULL,'Sniffer 
process (andphone_record) went out of service (status=DISCONNECTED).',0,0) 
 {executed in 6 msec}

-----> 2020-02-28 07:46:19.317  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
32. SELECT currval('logging_id_seq') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.317  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1259)
20. COMMENT ON COLUMN logging_view.id is 'Unique database ID.' 
 {executed in 14 msec}

-----> 2020-02-28 07:46:19.327  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1260)
20. COMMENT ON COLUMN logging_view.created is 'The timestamp when the entry is created.' 
 {executed in 9 msec}

-----> 2020-02-28 07:46:19.336  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1261)
20. COMMENT ON COLUMN logging_view.level is 'The severity level of the logging entry. Possible 
values: FATAL=0, ERROR=1, WARN=2, INFO=3, DEBUG=4' 
 {executed in 9 msec}

-----> 2020-02-28 07:46:19.356  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1262)
20. COMMENT ON COLUMN logging_view.username is 'If the logging entry is related to GUI operation 
then the username is the logged user on the Admin GUI.' 
 {executed in 20 msec}

-----> 2020-02-28 07:46:19.380  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1263)
20. COMMENT ON COLUMN logging_view.message is 'The message is related to the event.' 
 {executed in 24 msec}

-----> 2020-02-28 07:46:19.385  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1264)
20. COMMENT ON COLUMN logging_view.reference is 'Most of the cases it is zero value. It is used 
only if the entry is related to rhe broadcaast message.' 
 {executed in 4 msec}

-----> 2020-02-28 07:46:19.389  com.andtek.andphone.global.ModuleDB.create(ModuleDB.java:1265)
20. COMMENT ON COLUMN logging_view.related is 'Most of the cases it is zero value. It is used only 
if the entry is related to rhe broadcaast message.' 
 {executed in 4 msec}

-----> 2020-02-28 07:46:19.455  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='manager' 
 {executed in 7 msec}

-----> 2020-02-28 07:46:19.456  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andphone' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.457  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='soapapi' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.457  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='cups' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.457  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='restadmin' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.458  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='restpublic' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.458  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.459  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_configcm' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.460  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_configcme' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.460  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_license' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.460  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_cdrfetch' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.461  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_security' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.461  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_users' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.462  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_adintegration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.462  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_poolslist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.462  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_servers' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.463  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_medialist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.463  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_schedulelist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.464  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_regex' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.468  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_locales' 
 {executed in 4 msec}

-----> 2020-02-28 07:46:19.469  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_maintenance' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.469  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_backup' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.469  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_bulktool' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.470  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_restart' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.471  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_update' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.471  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_troubleshoot' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.471  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_logs' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.472  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_events' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.472  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_status' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.473  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='global_rrdstat' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.473  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='lockout_config' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.473  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='lockout_profiles' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.474  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='lockout_list' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.474  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='partner_settings' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.475  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='partner_grouplist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.476  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='partner_managerlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.476  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='partner_search' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.477  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='partner_presencestates' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.477  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='ldap_dirlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.478  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='ldap_dirgroups' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.478  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='ldap_lookup' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.478  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='ldap_dirmapping' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.479  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='mcast_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.479  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='mcast_grouplist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.480  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='mcast_smsbcast' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.481  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.482  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_profiles' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.485  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_rules' 
 {executed in 3 msec}

-----> 2020-02-28 07:46:19.486  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_status' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.487  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_encrypt' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.488  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_cert' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.488  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_archive' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.489  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_search' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.489  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recorder_restore' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.489  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.490  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_profiles' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.491  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_encryption' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.491  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_archive' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.491  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_search' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.492  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='recordermgmt_restore' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.493  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='observer_camlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.493  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='testing_screenshot' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.494  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='testing_simulator' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.494  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='settings_profilelist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.495  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='blacklist_settings' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.496  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='blacklist_blacklist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.496  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.496  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_dirlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.497  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_tasklist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.497  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_schedule' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.499  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_phone_custom' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:19.499  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_appslist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.500  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_location' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.502  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_reporting' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:19.502  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='provisioning_reportingarchive' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.503  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='apps_appslist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.503  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='desktop_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.503  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='desktop_activeclientlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.504  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='desktop_clientlist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.505  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='dect_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.505  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='callrouting_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.506  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='communicator_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.506  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='communicator_activeclientlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.507  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='communicator_poollist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.508  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='communicator_clientlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.508  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_settings' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.509  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_queuelist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.509  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_pilotlist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.510  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_category' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.510  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_acdreport' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.511  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_classification' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.511  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_callbackrules' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.511  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='groupacd_search' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.512  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='reports_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.512  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='reports_upload_rptfiles' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.512  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='reports_report_scheduling' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.513  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='reports_list_riports' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.513  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='reports_webreport' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.513  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='phonemenu_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.514  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='phonemenu_menus' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.514  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='calllist_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.518  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='inout_configuration' 
 {executed in 4 msec}

-----> 2020-02-28 07:46:19.518  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='inout_input' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.519  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='inout_output' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.519  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='inout_mapping' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.520  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andmobile_configuration' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.520  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andmobile_profiles' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.520  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andmobile_activeclient' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.521  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andmobile_clientlist' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.521  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='metadirectory_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.521  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='midlet_configuration' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.522  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='midlet_profiles' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:19.522  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='presence_sources' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.522  com.andtek.andphone.global.ModuleDB.findAndAddRoles(ModuleDB.java:2262)
20. SELECT rid FROM roles WHERE rolename='andguard_appslist' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.536  com.andtek.andphone.global.ModuleDB.checkAndEncryptUserPW(ModuleDB.java:2291)
20. SELECT uid, password from users WHERE password NOT LIKE 'ENC:%' 
 {executed in 14 msec}

-----> 2020-02-28 07:46:19.550  com.andtek.andphone.global.ModuleDB.encryptAnyPasswords(ModuleDB.java:2024)
20. SELECT * FROM ADDomains 
 {executed in 14 msec}

-----> 2020-02-28 07:46:19.791  com.andtek.andphone.global.ModuleDB.deactivateJtapiServerAvailPeriod(ModuleDB.java:1410)
20. SELECT sgm.gid, sgm.serverID, s.serverType FROM servergroup_members sgm, servers s WHERE s.serverID=sgm.serverID 
AND s.serverType=1 
 {executed in 4 msec}

-----> 2020-02-28 07:46:19.794  com.andtek.andphone.global.ModuleDB.deactivateJtapiServerAvailPeriod(ModuleDB.java:1430)
20. UPDATE servergroup SET availPeriod=0, unavailPeriod=0 WHERE gid=2 
 {executed in 3 msec}

-----> 2020-02-28 07:46:19.794  com.andtek.andphone.global.ModuleDB.deleteOldOrphanServerEntries(ModuleDB.java:1462)
20. DELETE FROM servers s WHERE s.serverid NOT IN (select sgm.serverid from servergroup_members 
sgm) 
 {executed in 0 msec}

-----> 2020-02-28 07:46:19.893  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 6 msec}

-----> 2020-02-28 07:46:19.897  com.andtek.andphone.directory.ModuleDB.encryptDirPasswords(ModuleDB.java:255)
20. SELECT id, password FROM directories 
 {executed in 5 msec}

-----> 2020-02-28 07:46:19.984  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 7 msec}

-----> 2020-02-28 07:46:20.031  com.andtek.andphone.utils.ModuleDBUtils.addDatabaseField(ModuleDBUtils.java:1074)
20. SELECT COUNT(rec_password) FROM rec_call 
 {executed in 7 msec}

-----> 2020-02-28 07:46:20.120  com.andtek.andphone.utils.ModuleDBUtils.addDatabaseField(ModuleDBUtils.java:1074)
20. SELECT COUNT(rec_password) FROM recmgmt_call 
 {executed in 33 msec}

-----> 2020-02-28 07:46:20.120  com.andtek.andphone.utils.ModuleDBUtils.addDatabaseField(ModuleDBUtils.java:1074)
20. SELECT COUNT(duplicate) FROM recmgmt_call 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.140  com.andtek.andphone.recordermgmt.ModuleDB.legacyCreateRecorderMgmtTables(ModuleDB.java:346)
20. SELECT val FROM config WHERE module='recordermgmt' AND param='RoutePointName' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.262  com.andtek.andphone.utils.ModuleDBUtils.isDataExistsBySql(ModuleDBUtils.java:1115)
20. SELECT * FROM provisioning_protocol_dependencies WHERE projectname='wacker' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.277  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE provisioning_report_detail VALIDATE CONSTRAINT provisioning_report_detail_fk_detail2report_fkey 
 {executed in 3 msec}

-----> 2020-02-28 07:46:20.299  com.andtek.andphone.utils.ModuleDBUtils.isDataExistsBySql(ModuleDBUtils.java:1115)
20. SELECT name FROM callListConfig WHERE name = 'MissedEmailSubject' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.331  com.andtek.andphone.communicator.ModuleDB.checkDefaultProfile(ModuleDB.java:293)
20. SELECT * FROM desktop_profiles 
 {executed in 13 msec}

-----> 2020-02-28 07:46:20.352  com.andtek.andphone.callrouting.ModuleDB.run(ModuleDB.java:226)
33. vacuum callList 
 {executed in 33 msec}

-----> 2020-02-28 07:46:20.421  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:66)
20. COMMENT ON COLUMN acdPilot.id is 'Unique ID of the pilot.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.421  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:67)
20. COMMENT ON COLUMN acdPilot.name is 'Name of the pilot.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.422  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:68)
20. COMMENT ON COLUMN acdPilot.description is 'Description of the pilot.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.422  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:69)
20. COMMENT ON COLUMN acdPilot.dn is 'DN of the CTI RP (Pilot DN).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.423  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:70)
20. COMMENT ON COLUMN acdPilot.regex is 'Pilot regex.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.424  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:71)
20. COMMENT ON COLUMN acdPilot.regexrepl is 'Pilot regex replacement.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.465  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:136)
20. DELETE FROM constants_table 
 {executed in 22 msec}

-----> 2020-02-28 07:46:20.468  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:202)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_FIRSTAVAIL','0') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.469  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:203)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_FIRSTAVAILNOTBUSY','1') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.470  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:204)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_LONGESTIDLE','2') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.470  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:205)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_ROUNDROBIN','3') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.471  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:206)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_ALWAYSQUEUE','4') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.472  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:207)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_QUEUEDTRANSFER','5') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.472  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:208)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdqueue','callDistribution','CALLDISTRIBUTION_PARKQUEUE','6') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.479  com.andtek.andphone.utils.ModuleDBUtils.loadConstantsValues(ModuleDBUtils.java:466)
20. select field, value from constants_table where table_name='acdqueue' and column_name='callDistribution' 
 {executed in 6 msec}

-----> 2020-02-28 07:46:20.493  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:218)
20. COMMENT ON COLUMN acdQueue.id is 'Unique ID.' 
 {executed in 14 msec}

-----> 2020-02-28 07:46:20.493  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:219)
20. COMMENT ON COLUMN acdQueue.name is 'Name of the Queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.494  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:220)
20. COMMENT ON COLUMN acdQueue.description is 'Description of the Queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.494  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:221)
20. COMMENT ON COLUMN acdQueue.maxCalls is 'Queue limit value, maximum number of calls in the queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.495  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:222)
20. COMMENT ON COLUMN acdQueue.calldistribution is 'Type of call distribution. Possible value(s): 
CALLDISTRIBUTION_FIRSTAVAIL=0, CALLDISTRIBUTION_FIRSTAVAILNOTBUSY=1, CALLDISTRIBUTION_LONGESTIDLE=2, 
CALLDISTRIBUTION_ROUNDROBIN=3, CALLDISTRIBUTION_ALWAYSQUEUE=4, CALLDISTRIBUTION_QUEUEDTRANSFER=5, 
CALLDISTRIBUTION_PARKQUEUE=6.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.495  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:223)
20. COMMENT ON COLUMN acdQueue.targetQueueFull is 'Queue full target DN. The call will be redirected 
to this target if the queue is full.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.498  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:224)
20. COMMENT ON COLUMN acdQueue.targetNoAgents is 'Fwd. No agents target DN. The call will be redirected 
to this target if the queue has no available agents.' 
 {executed in 3 msec}

-----> 2020-02-28 07:46:20.499  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:225)
20. COMMENT ON COLUMN acdQueue.preQueueMediaID is 'PreQueue media ID, refers to media table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.499  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:226)
20. COMMENT ON COLUMN acdQueue.queueMediaID is 'Queue media ID, refers to media table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.500  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:227)
20. COMMENT ON COLUMN acdQueue.rerouteTime is 'Reroute time in seconds.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.500  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:228)
20. COMMENT ON COLUMN acdQueue.postCallTime is 'Postcall time in seconds.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.501  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:229)
20. COMMENT ON COLUMN acdQueue.groupID is 'ID of the agent group. If set then this group shows 
the agents status on the group display.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.501  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:230)
20. COMMENT ON COLUMN acdQueue.expireTime is 'Expire time in seconds.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.502  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:231)
20. COMMENT ON COLUMN acdQueue.targetExpired is 'Expire time target DN. The call will be redirected 
to this target if the expire time exceeds in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.502  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:232)
20. COMMENT ON COLUMN acdQueue.flags is 'Some flags, like Queue calls during break.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.503  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:233)
20. COMMENT ON COLUMN acdQueue.slaPeriod is 'The time in minutes for the measurement interval to 
calculate service level.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.503  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:234)
20. COMMENT ON COLUMN acdQueue.slaCallSuccessTime is 'The minimum time in seconds for an accepted 
call to be counted as successful. If the call is shorter it will be ignored.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.505  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:235)
20. COMMENT ON COLUMN acdQueue.slaLimit is 'The minimum service level in percent.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.505  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:236)
20. COMMENT ON COLUMN acdQueue.fallbackTime is 'The time in seconds after the call will fall back 
to the agent or queue when the destination does not pickup the call.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.531  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:326)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','Active','0') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.532  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:327)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','Inactive','1') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.532  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:328)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','Break','2') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.533  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:329)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','Postcall','3') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.533  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:330)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','Disabled','4') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.534  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:331)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagent','available','OffWork','5') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.534  com.andtek.andphone.utils.ModuleDBUtils.loadConstantsValues(ModuleDBUtils.java:466)
20. select field, value from constants_table where table_name='acdagent' and column_name='available' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.535  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:340)
20. COMMENT ON COLUMN acdAgent.id is 'Unique database ID (auto-increment)' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.536  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:341)
20. COMMENT ON COLUMN acdAgent.queueID is 'ID of the queue, it is a reference to acdQueueView.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.536  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:342)
20. COMMENT ON COLUMN acdAgent.priority is 'Order of the agent in the queue. It refers to acdAgentView 
table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.537  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:343)
20. COMMENT ON COLUMN acdAgent.dn is 'DN of the agent. It refers to acdAgentView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.538  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:344)
20. COMMENT ON COLUMN acdAgent.available is 'Agent availability, it refers to acdAgentView table. 
Possible value(s): Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.538  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:345)
20. COMMENT ON COLUMN acdAgent.skill is 'Agent skill, it refers to acdAgentView table. Possible 
values from 0 to 9.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.539  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:346)
20. COMMENT ON COLUMN acdAgent.stats_lastUpdate is 'Datetime when last agent statistics values 
are last updated.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.539  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:347)
20. COMMENT ON COLUMN acdAgent.stats_calls_total is 'Total amount of calls of this agent (daily 
information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.540  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:348)
20. COMMENT ON COLUMN acdAgent.stats_calls_missed is 'Total amount of missed calls of agent (daily 
information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.540  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:349)
20. COMMENT ON COLUMN acdAgent.stats_service_level is 'Service level of agent (daily information)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.541  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:350)
20. COMMENT ON COLUMN acdAgent.stats_talking_time is 'Total talking time of this agent (daily information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.541  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:351)
20. COMMENT ON COLUMN acdAgent.stats_onhold_time is 'Total hold time for this agent (daily information)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.542  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:352)
20. COMMENT ON COLUMN acdAgent.stats_wrapup_time is 'Total postcall (wrap up) time for this agent 
(daily information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.542  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:353)
20. COMMENT ON COLUMN acdAgent.stats_idle_time is 'Total idle time for this agent (daily information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.543  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:354)
20. COMMENT ON COLUMN acdAgent.stats_call_duration_avg is 'Average of the call duration (daily 
information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.543  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:355)
20. COMMENT ON COLUMN acdAgent.stats_ring_duration_avg is 'Average of the call ringing (daily information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.543  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:356)
20. COMMENT ON COLUMN acdAgent.stats_occupancy is 'Calculated value from other statistics column.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.544  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:357)
20. COMMENT ON COLUMN acdAgent.isPrimaryQueue is 'If agent is primary in the queue then this value 
is 1 otherwise 0.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.553  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:399)
20. ALTER TABLE acdCall SET WITH OIDS 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.554  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:405)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdcall','state','STATE_DISCONNECTED','-1') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.555  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:406)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_OFFERED 
','0', 'ringing at the pilot') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.555  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:407)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_MAXROUTES','1','error 
caused by a routing loop') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.556  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:408)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_PREQUEUE','5', 
'queue announcement (pre queue media) is played') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.556  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:409)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_QUEUED','6', 
'call is in the queue') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.557  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:410)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED_AGENT','7', 
'ringing at the agent') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.558  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:411)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_FALLBACK','8', 
'call is falling back to queue because transfer target did not pickup') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.558  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:412)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_REROUTING','9', 
'call is rerouted to another agent in the same queue because target did not pickup with reroute 
time') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.560  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:413)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED','10', 
'range 10-19 is for calls routed to acd external targets') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.561  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:414)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED_NOAGENTS','10', 
'forwarded because no agents are logged in') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.561  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:415)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED_QUEUEFULL','11', 
'forwarded because queue is full') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.562  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:416)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED_EXPIRED','12', 
'forwarded because call time expired') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.562  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:417)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_FORWARDED_EXTERN','13', 
'call is forwarded/redirected/picked to an ACD external target') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.563  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:418)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_TRANSFERRED','14', 
'call is transferred to an ACD-external target') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.564  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:419)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_CALL_FORWARDED','15', 
'call was forwarded') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.564  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:420)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ROUTED_BREAK_TARGET','16', 
'forwarded because other agents are unavailable or disabled and at least 1 agent is in break') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.565  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:421)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_CONNECTED','20', 
'call is answered by an agent') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.566  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:422)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_HELD','21', 
'call is put on hold by an agent') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.566  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:423)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_OUTGOING','25', 
'outgoing call from an agent') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.567  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:424)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_AGENT_AVAILABLE','30', 
'agent switched state to available') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.568  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:425)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_AGENT_UNAVAILABLE','31', 
'agent switched state to unavailable') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.569  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:426)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_CALLBACK_AUTOMATED_REQUEST','40', 
'automated callback request created') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.569  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:427)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_CALLBACK_MANUAL_REQUEST','41', 
'manual callback request created') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.571  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:428)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_ENDED','100', 
'call ended normally') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.573  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:429)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcall','state','STATE_BUSY','101', 
'call ended in busy state') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.632  com.andtek.andphone.utils.ModuleDBUtils.loadConstantsValues(ModuleDBUtils.java:466)
20. select field, value from constants_table where table_name='acdcall' and column_name='state' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.633  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:468)
20. COMMENT ON COLUMN acdCall.id is 'Unique database ID (auto-increment)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.633  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:469)
20. COMMENT ON COLUMN acdCall.created is 'The timestamp when ACD call was created.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.634  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:470)
20. COMMENT ON COLUMN acdCall.state is 'The last state of the ACD call when the call ends. Possible 
value(s): STATE_DISCONNECTED=-1, STATE_OFFERED =0, STATE_MAXROUTES=1, STATE_PREQUEUE=5, STATE_QUEUED=6, 
STATE_ROUTED_AGENT=7, STATE_FALLBACK=8, STATE_REROUTING=9, STATE_ROUTED=10, STATE_ROUTED_NOAGENTS=10, 
STATE_ROUTED_QUEUEFULL=11, STATE_ROUTED_EXPIRED=12, STATE_FORWARDED_EXTERN=13, STATE_TRANSFERRED=14, 
STATE_CALL_FORWARDED=15, STATE_ROUTED_BREAK_TARGET=16, STATE_CONNECTED=20, STATE_HELD=21, STATE_OUTGOING=25, 
STATE_AGENT_AVAILABLE=30, STATE_AGENT_UNAVAILABLE=31, STATE_CALLBACK_AUTOMATED_REQUEST=40, 
STATE_CALLBACK_MANUAL_REQUEST=41, STATE_ENDED=100, STATE_BUSY=101.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.635  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:471)
20. COMMENT ON COLUMN acdCall.duration is 'Complete duration of ACD call, from creation to finishing 
in seconds.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.635  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:472)
20. COMMENT ON COLUMN acdCall.caller is 'Telephone number of the caller.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.636  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:473)
20. COMMENT ON COLUMN acdCall.callername is 'Name of the caller.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.636  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:474)
20. COMMENT ON COLUMN acdCall.target is 'The last target number which is reached by ACD routing 
mechanism.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.637  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:475)
20. COMMENT ON COLUMN acdCall.targetname is 'Name of the last target.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.637  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:476)
20. COMMENT ON COLUMN acdCall.queuetime is 'The amount of queue time in seconds. It shows how long 
the call stays in queue(s).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.638  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:477)
20. COMMENT ON COLUMN acdCall.agent is 'Telephone number of the last agent where the call was routed 
to.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.638  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:478)
20. COMMENT ON COLUMN acdCall.agentname is 'Name of the last agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.639  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:479)
20. COMMENT ON COLUMN acdCall.cucmcallid is 'Cisco global call ID, e.g. 123456/1.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.639  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:480)
20. COMMENT ON COLUMN acdCall.talkingduration is 'The amount of talking time in seconds when agent 
was connected (talking).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.640  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:481)
20. COMMENT ON COLUMN acdCall.statisticscategory is 'Category of the ACD call. It is used to determine 
if the call is missed, answered, or ignored. possible values: EMPTY, missed, answered, ignored.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.640  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:482)
20. COMMENT ON COLUMN acdCall.holdtime is 'The amount of time in seconds while call was hold.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.641  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:483)
20. COMMENT ON COLUMN acdCall.pilotID is 'The pilotID where the ACD call disconnected.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.641  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:484)
20. COMMENT ON COLUMN acdCall.queueID is 'The queueID where the ACD call disconnected.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.642  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:485)
20. COMMENT ON COLUMN acdCall.pilotname is 'The pilot name where the ACD call disconnected.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.642  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:486)
20. COMMENT ON COLUMN acdCall.queuename is 'The queue name where the ACD call disconnected.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.643  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:487)
20. COMMENT ON COLUMN acdCall.original_pilotid is 'The first/original pilotID where the ACD call 
arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.643  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:488)
20. COMMENT ON COLUMN acdCall.original_queueid is 'The first/original queueID where the ACD call 
arrived.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.644  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:489)
20. COMMENT ON COLUMN acdCall.original_pilotname is 'The first/original pilot name where the ACD 
call arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.645  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:490)
20. COMMENT ON COLUMN acdCall.original_queuename is 'The first/original queue name where the ACD 
call arrived.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.646  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:491)
20. COMMENT ON COLUMN acdCall.first_answered_pilotid is 'The first pilotID where the ACD call is 
answered.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.646  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:492)
20. COMMENT ON COLUMN acdCall.first_answered_queueid is 'The first queueID where the ACD call is 
answered.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.647  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:493)
20. COMMENT ON COLUMN acdCall.first_answered_pilotname is 'The first pilot name where the ACD call 
is answered.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.648  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:494)
20. COMMENT ON COLUMN acdCall.first_answered_queuename is 'The first queue name where the ACD call 
is answered.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.648  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:495)
20. COMMENT ON COLUMN acdCall.last_redirected_pilotid is 'The last redirected pilotID where the 
ACD forwarded from.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.649  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:496)
20. COMMENT ON COLUMN acdCall.last_redirected_queueid is 'The last redirected queueID where the 
ACD forwarded from.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.650  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:497)
20. COMMENT ON COLUMN acdCall.last_redirected_pilotname is 'The last redirected pilot name where 
the ACD forwarded from.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.651  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:498)
20. COMMENT ON COLUMN acdCall.last_redirected_queuename is 'The last redirected queue name where 
the ACD forwarded from.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.651  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:499)
20. COMMENT ON COLUMN acdCall.last_redirected_state is 'The ACD call state of the last redirect 
reason.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.657  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:532)
20. COMMENT ON COLUMN acdPilotQueue.pilotid is 'Reference to acdPilotView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.658  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:533)
20. COMMENT ON COLUMN acdPilotQueue.id is 'Order of queues in the pilot, incremented value from 
zero.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.658  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:534)
20. COMMENT ON COLUMN acdPilotQueue.scheduleID is 'Reference to schedule table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.659  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:535)
20. COMMENT ON COLUMN acdPilotQueue.queueID is 'Reference to acdQueueView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.659  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:536)
20. COMMENT ON COLUMN acdPilotQueue.color is 'Color definition for the given queue in the pilot.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.706  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:899)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdcalldetail','state','STATE_DISCONNECTED','-1') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.707  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:900)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_OFFERED 
','0', 'ringing at the pilot') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.708  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:901)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_MAXROUTES','1','error 
caused by a routing loop') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.708  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:902)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_PREQUEUE','5', 
'queue announcement (pre queue media) is played') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.709  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:903)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_QUEUED','6', 
'call is in the queue') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.710  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:904)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED_AGENT','7', 
'ringing at the agent') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.710  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:905)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_FALLBACK','8', 
'call is falling back to queue because transfer target did not pickup') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.711  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:906)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_REROUTING','9', 
'call is rerouted to another agent in the same queue because target did not pickup with reroute 
time') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.712  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:907)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED','10', 
'range 10-19 is for calls routed to acd external targets') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.712  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:908)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED_NOAGENTS','10', 
'forwarded because no agents are logged in') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.713  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:909)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED_QUEUEFULL','11', 
'forwarded because queue is full') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.713  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:910)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED_EXPIRED','12', 
'forwarded because call time expired') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.714  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:911)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_FORWARDED_EXTERN','13', 
'call is forwarded/redirected/picked to an ACD external target') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.715  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:912)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_TRANSFERRED','14', 
'call is transferred to an ACD-external target') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.717  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:913)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_CALL_FORWARDED','15', 
'call was forwarded') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.717  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:914)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ROUTED_BREAK_TARGET','16', 
'forwarded because other agents are unavailable or disabled and at least 1 agent is in break') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.720  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:915)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_CONNECTED','20', 
'call is answered by an agent') 
 {executed in 3 msec}

-----> 2020-02-28 07:46:20.720  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:916)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_HELD','21', 
'call is put on hold by an agent') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.721  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:917)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_OUTGOING','25', 
'outgoing call from an agent') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.721  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:918)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_AGENT_AVAILABLE','30', 
'agent switched state to available') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.722  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:919)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_AGENT_UNAVAILABLE','31', 
'agent switched state to unavailable') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.723  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:920)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_CALLBACK_AUTOMATED_REQUEST','40', 
'automated callback request created') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.724  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:921)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_CALLBACK_MANUAL_REQUEST','41', 
'manual callback request created') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.725  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:922)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_ENDED','100', 
'call ended normally') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.725  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:923)
20. INSERT INTO constants_table (table_name,column_name,field,value,description) VALUES ('acdcalldetail','state','STATE_BUSY','101', 
'call ended in busy state') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.726  com.andtek.andphone.utils.ModuleDBUtils.loadConstantsValues(ModuleDBUtils.java:466)
20. select field, value from constants_table where table_name='acdcalldetail' and column_name='state' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.729  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:933)
20. COMMENT ON COLUMN acdCallDetail.id is 'Unique database ID (auto-increment)' 
 {executed in 3 msec}

-----> 2020-02-28 07:46:20.729  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:934)
20. COMMENT ON COLUMN acdCallDetail.fk_acdCall is 'Foreign key reference to acdCallView table id 
column.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.731  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:935)
20. COMMENT ON COLUMN acdCallDetail.historySeqID is 'Sequence of acd call history entries.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:20.733  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:936)
20. COMMENT ON COLUMN acdCallDetail.state is 'State of acd call entry. Possible value(s): STATE_DISCONNECTED=-1, 
STATE_OFFERED =0, STATE_MAXROUTES=1, STATE_PREQUEUE=5, STATE_QUEUED=6, STATE_ROUTED_AGENT=7, 
STATE_FALLBACK=8, STATE_REROUTING=9, STATE_ROUTED=10, STATE_ROUTED_NOAGENTS=10, STATE_ROUTED_QUEUEFULL=11, 
STATE_ROUTED_EXPIRED=12, STATE_FORWARDED_EXTERN=13, STATE_TRANSFERRED=14, STATE_CALL_FORWARDED=15, 
STATE_ROUTED_BREAK_TARGET=16, STATE_CONNECTED=20, STATE_HELD=21, STATE_OUTGOING=25, STATE_AGENT_AVAILABLE=30, 
STATE_AGENT_UNAVAILABLE=31, STATE_CALLBACK_AUTOMATED_REQUEST=40, STATE_CALLBACK_MANUAL_REQUEST=41, 
STATE_ENDED=100, STATE_BUSY=101.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.733  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:937)
20. COMMENT ON COLUMN acdCallDetail.stateCreated is 'Timestamp when this ACD call state entry is 
created in APAS.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.734  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:938)
20. COMMENT ON COLUMN acdCallDetail.duration is 'Time in seconds the ACD call stays in this state. 
For example in state ringing it is ringing time, if state connected it is talking time.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.734  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:939)
20. COMMENT ON COLUMN acdCallDetail.fk_acdPilot is 'ID of pilot, it is a reference to acdPilotView 
table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.735  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:940)
20. COMMENT ON COLUMN acdCallDetail.fk_acdQueue is 'ID of queue, it is a reference to acdQueueView 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.735  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:941)
20. COMMENT ON COLUMN acdCallDetail.target is 'The current target telephone number where the call 
was routed to in this state.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.736  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:942)
20. COMMENT ON COLUMN acdCallDetail.targetName is 'Name of the target.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.736  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:943)
20. COMMENT ON COLUMN acdCallDetail.caller is 'The current caller telephone number for this state 
entry. It can be different to original caller if this entry is related to a consult/transfer.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.737  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:944)
20. COMMENT ON COLUMN acdCallDetail.callerName is 'Name of the caller.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.737  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:945)
20. COMMENT ON COLUMN acdCallDetail.agent is 'DN of the current agent where the call was routed 
to in this state.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.738  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:946)
20. COMMENT ON COLUMN acdCallDetail.agentName is 'Name of the agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.739  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:947)
20. COMMENT ON COLUMN acdCallDetail.cucmCallID is 'Cisco global call ID, e.g. 123456/1.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.740  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:972)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','Active','0') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.741  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:973)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','Inactive','1') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.742  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:974)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','Break','2') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.742  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:975)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','Postcall','3') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.743  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:976)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','Disabled','4') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.744  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:977)
20. INSERT INTO constants_table (table_name,column_name,field,value) VALUES ('acdagentstatus','available','OffWork','5') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.744  com.andtek.andphone.utils.ModuleDBUtils.loadConstantsValues(ModuleDBUtils.java:466)
20. select field, value from constants_table where table_name='acdagentstatus' and column_name='available' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.745  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:987)
20. COMMENT ON COLUMN acdAgentStatus.fk_acdqueue is 'Foreign key reference to acdQueueView.id' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.746  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:988)
20. COMMENT ON COLUMN acdAgentStatus.agent is 'DN of the agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.747  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:989)
20. COMMENT ON COLUMN acdAgentStatus.starttime is 'Timestamp when agent state is changed to other 
state' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.747  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:990)
20. COMMENT ON COLUMN acdAgentStatus.fromstate is 'Old availability state of agent. Possible value(s): 
Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.748  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:991)
20. COMMENT ON COLUMN acdAgentStatus.tostate is 'New availability state of agent. Possible value(s): 
Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.748  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:992)
20. COMMENT ON COLUMN acdAgentStatus.duration is 'Time in seconds, how long the agent stays in 
this state.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.810  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1159)
20. COMMENT ON COLUMN acdAgent.callback_enabled is 'If true then agent is enabled to use Call Center 
Callback feature. It refers to acdAgentView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.872  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1213)
20. UPDATE acdQueue SET fk_acdCallTagGroup=null WHERE fk_acdCallTagGroup='0' 
 {executed in 23 msec}

-----> 2020-02-28 07:46:20.908  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1271)
20. UPDATE acdPilotQueue SET isDefaultPriorityRelative='f' WHERE isDefaultPriorityRelative IS NULL 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.920  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE acdCallTag VALIDATE CONSTRAINT acdcalltag_fk_taggroup_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.931  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE acdQueue VALIDATE CONSTRAINT acdqueue_fk_acdcalltaggroup_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.944  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE acdCallClassification VALIDATE CONSTRAINT acdcallclassification_fk_acdcall_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:20.957  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE acdCallClassification2Tag VALIDATE CONSTRAINT acdcallclassification2tag_fk_acdcallclassification_fkey 
 {executed in 1 msec}

-----> 2020-02-28 07:46:20.957  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE acdCallClassification2Tag VALIDATE CONSTRAINT acdcallclassification2tag_fk_acdcalltag_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.131  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1480)
20. DROP VIEW IF EXISTS acd_call_view 
 {executed in 3 msec}

-----> 2020-02-28 07:46:21.136  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1483)
20. CREATE OR REPLACE VIEW acd_call_view AS SELECT ac.id AS id, ac.created AS created, ac.state 
AS state, ac.duration AS duration, ac.pilotID AS fk_acdpilot_id, ac.queueID AS fk_acdqueue_id, 
ac.pilotname AS pilotname, ac.queuename AS queuename, ac.original_pilotid AS original_pilotid, 
ac.original_queueid AS original_queueid, ac.original_pilotname AS original_pilotname, ac.original_queuename 
AS original_queuename, ac.first_answered_pilotid AS first_answered_pilotid, ac.first_answered_queueid 
AS first_answered_queueid, ac.first_answered_pilotname AS first_answered_pilotname, ac.first_answered_queuename 
AS first_answered_queuename, ac.last_redirected_pilotid AS last_redirected_pilotid, ac.last_redirected_queueid 
AS last_redirected_queueid, ac.last_redirected_pilotname AS last_redirected_pilotname, ac.last_redirected_queuename 
AS last_redirected_queuename, ac.last_redirected_state AS last_redirected_state, ac.caller 
AS caller, ac.callerName AS caller_name, ac.target AS target, ac.targetName AS target_name, 
ac.queueTime AS queue_time, ac.agent AS agent, ac.agentName AS agent_name, ac.cucmCallID AS 
cucm_call_id, ac.talkingDuration AS talking_duration, ac.statisticsCategory AS statistics_category, 
ac.holdTime AS hold_time, ac.ringingDuration AS ringing_duration, aa.DN AS dn, aa.priority 
AS priority, aa.available AS available, aa.skill AS skill from acdCall ac LEFT JOIN acdAgent 
aa ON (ac.target=aa.DN AND ac.queueID=aa.queueID) 
 {executed in 5 msec}

-----> 2020-02-28 07:46:21.137  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdcall' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.138  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdagent' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.139  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1534)
20. COMMENT ON COLUMN acd_call_view.id is 'Unique database ID (auto-increment)' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.140  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1535)
20. COMMENT ON COLUMN acd_call_view.created is 'The timestamp when ACD call was created.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.140  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1536)
20. COMMENT ON COLUMN acd_call_view.state is 'The last state of the ACD call when the call ends. 
Possible value(s): STATE_DISCONNECTED=-1, STATE_OFFERED =0, STATE_MAXROUTES=1, STATE_PREQUEUE=5, 
STATE_QUEUED=6, STATE_ROUTED_AGENT=7, STATE_FALLBACK=8, STATE_REROUTING=9, STATE_ROUTED=10, 
STATE_ROUTED_NOAGENTS=10, STATE_ROUTED_QUEUEFULL=11, STATE_ROUTED_EXPIRED=12, STATE_FORWARDED_EXTERN=13, 
STATE_TRANSFERRED=14, STATE_CALL_FORWARDED=15, STATE_ROUTED_BREAK_TARGET=16, STATE_CONNECTED=20, 
STATE_HELD=21, STATE_OUTGOING=25, STATE_AGENT_AVAILABLE=30, STATE_AGENT_UNAVAILABLE=31, STATE_CALLBACK_AUTOMATED_REQUEST=40, 
STATE_CALLBACK_MANUAL_REQUEST=41, STATE_ENDED=100, STATE_BUSY=101.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.141  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1537)
20. COMMENT ON COLUMN acd_call_view.duration is 'Complete duration of ACD call, from creation to 
finishing in seconds.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.141  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1538)
20. COMMENT ON COLUMN acd_call_view.fk_acdpilot_id is 'The pilotID where the ACD call disconnected.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.142  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1539)
20. COMMENT ON COLUMN acd_call_view.fk_acdqueue_id is 'The queueID where the ACD call disconnected.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.142  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1540)
20. COMMENT ON COLUMN acd_call_view.caller is 'Telephone number of the caller.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.143  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1541)
20. COMMENT ON COLUMN acd_call_view.caller_name is 'Name of the caller.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.143  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1542)
20. COMMENT ON COLUMN acd_call_view.target is 'The last target number which is reached by ACD routing 
mechanism.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.144  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1543)
20. COMMENT ON COLUMN acd_call_view.target_name is 'Name of the last target.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.144  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1544)
20. COMMENT ON COLUMN acd_call_view.queue_time is 'The amount of queue time in seconds. It shows 
how long the call stays in queue(s).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.144  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1545)
20. COMMENT ON COLUMN acd_call_view.agent is 'Telephone number of the last agent where the call 
was routed to.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.145  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1546)
20. COMMENT ON COLUMN acd_call_view.agent_name is 'Name of the last agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.145  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1547)
20. COMMENT ON COLUMN acd_call_view.cucm_call_id is 'Cisco global call ID, e.g. 123456/1.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.146  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1548)
20. COMMENT ON COLUMN acd_call_view.talking_duration is 'The amount of talking time in seconds 
when agent was connected (talking).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.147  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1549)
20. COMMENT ON COLUMN acd_call_view.statistics_category is 'Category of the ACD call. It is used 
to determine if the call is missed, answered, or ignored. possible values: EMPTY, missed, answered, 
ignored.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.147  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1550)
20. COMMENT ON COLUMN acd_call_view.hold_time is 'The amount of time in seconds while call was 
hold.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.148  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1551)
20. COMMENT ON COLUMN acd_call_view.ringing_duration is 'The amount of time in seconds while call 
was ringing.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.148  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1552)
20. COMMENT ON COLUMN acd_call_view.DN is 'DN of the agent. It refers to acdAgentView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.149  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1553)
20. COMMENT ON COLUMN acd_call_view.priority is 'Order of the agent in the queue. It refers to 
acdAgentView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.149  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1554)
20. COMMENT ON COLUMN acd_call_view.available is 'Agent availability, it refers to acdAgentView 
table. Possible value(s): Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.150  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1555)
20. COMMENT ON COLUMN acd_call_view.skill is 'Agent skill, it refers to acdAgentView table. Possible 
values from 0 to 9.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.150  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1556)
20. COMMENT ON COLUMN acd_call_view.pilotname is 'The pilot name where the ACD call disconnected.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.152  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1557)
20. COMMENT ON COLUMN acd_call_view.queuename is 'The queue name where the ACD call disconnected.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.153  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1558)
20. COMMENT ON COLUMN acd_call_view.original_pilotid is 'The first/original pilotID where the ACD 
call arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.153  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1559)
20. COMMENT ON COLUMN acd_call_view.original_queueid is 'The first/original queueID where the ACD 
call arrived.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.154  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1560)
20. COMMENT ON COLUMN acd_call_view.original_pilotname is 'The first/original pilot name where 
the ACD call arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.155  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1561)
20. COMMENT ON COLUMN acd_call_view.original_queuename is 'The first/original queue name where 
the ACD call arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.156  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1562)
20. COMMENT ON COLUMN acd_call_view.first_answered_pilotid is 'The first pilotID where the ACD 
call is answered.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.157  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1563)
20. COMMENT ON COLUMN acd_call_view.first_answered_queueid is 'The first queueID where the ACD 
call is answered.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.157  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1564)
20. COMMENT ON COLUMN acd_call_view.first_answered_pilotname is 'The first pilot name where the 
ACD call is answered.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.158  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1565)
20. COMMENT ON COLUMN acd_call_view.first_answered_queuename is 'The first queue name where the 
ACD call is answered.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.159  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1566)
20. COMMENT ON COLUMN acd_call_view.last_redirected_pilotid is 'The last redirected pilotID where 
the ACD forwarded from.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.159  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1567)
20. COMMENT ON COLUMN acd_call_view.last_redirected_queueid is 'The last redirected queueID where 
the ACD forwarded from.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.160  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1568)
20. COMMENT ON COLUMN acd_call_view.last_redirected_pilotname is 'The last redirected pilot name 
where the ACD forwarded from.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.160  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1569)
20. COMMENT ON COLUMN acd_call_view.last_redirected_queuename is 'The last redirected queue name 
where the ACD forwarded from.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.161  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1570)
20. COMMENT ON COLUMN acd_call_view.last_redirected_state is 'The ACD call state of the last redirect 
reason.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.163  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1578)
20. CREATE OR REPLACE VIEW acdCallHistoryView AS SELECT ahk.created, ahd.* FROM acdCallHistoryKey 
ahk, acdCallHistoryData ahd WHERE ahk.callID=ahd.callID 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.165  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1588)
20. COMMENT ON COLUMN acdCallHistoryView.id is 'Unique database ID (auto-increment)' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.165  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1589)
20. COMMENT ON COLUMN acdCallHistoryView.created is 'The timestamp when the call history entry 
is created.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.166  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1590)
20. COMMENT ON COLUMN acdCallHistoryView.callid is 'Internal unique database ID refers to the acdCallHistoryKey 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.166  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1591)
20. COMMENT ON COLUMN acdCallHistoryView.eventid is 'Order of the call history entry. If a call 
has more history entries then eventID is a sequence start from 1' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.167  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1592)
20. COMMENT ON COLUMN acdCallHistoryView.cucmcallid is 'Cisco callID which is related to this call 
history entry' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.167  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1593)
20. COMMENT ON COLUMN acdCallHistoryView.incoming is 'If it is an incoming call then 1 otherwise 
0' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.168  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1594)
20. COMMENT ON COLUMN acdCallHistoryView.caller is 'The calling party telephone number.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.169  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1595)
20. COMMENT ON COLUMN acdCallHistoryView.pilotdn is 'The Pilot DN where the ACD call arrived.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.169  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1596)
20. COMMENT ON COLUMN acdCallHistoryView.queuename is 'Name of the Group Category. ACD queue is 
associated to Group Category' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.170  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1597)
20. COMMENT ON COLUMN acdCallHistoryView.teamname is 'Name of the Team Category. Agents are associated 
to Team Category' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.170  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1598)
20. COMMENT ON COLUMN acdCallHistoryView.deptname is 'Name of the Department Category. One ore 
more ACD queues is associated to Department Category.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.171  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1599)
20. COMMENT ON COLUMN acdCallHistoryView.queuetime is 'The time in seconds. How long the call was 
queued.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.171  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1600)
20. COMMENT ON COLUMN acdCallHistoryView.ringduration is 'The time in seconds. How long the call 
was ringing when routed to an agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.172  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1601)
20. COMMENT ON COLUMN acdCallHistoryView.duration is 'The time in seconds. The talking time when 
call is answered by an agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.172  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1602)
20. COMMENT ON COLUMN acdCallHistoryView.state is 'State of the ACD call history entry. Possible 
value(s): STATE_DISCONNECTED=-1, STATE_OFFERED =0, STATE_MAXROUTES=1, STATE_PREQUEUE=5, STATE_QUEUED=6, 
STATE_ROUTED_AGENT=7, STATE_FALLBACK=8, STATE_REROUTING=9, STATE_ROUTED=10, STATE_ROUTED_NOAGENTS=10, 
STATE_ROUTED_QUEUEFULL=11, STATE_ROUTED_EXPIRED=12, STATE_FORWARDED_EXTERN=13, STATE_TRANSFERRED=14, 
STATE_CALL_FORWARDED=15, STATE_ROUTED_BREAK_TARGET=16, STATE_CONNECTED=20, STATE_HELD=21, STATE_OUTGOING=25, 
STATE_AGENT_AVAILABLE=30, STATE_AGENT_UNAVAILABLE=31, STATE_CALLBACK_AUTOMATED_REQUEST=40, 
STATE_CALLBACK_MANUAL_REQUEST=41, STATE_ENDED=100, STATE_BUSY=101.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.173  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1603)
20. COMMENT ON COLUMN acdCallHistoryView.laststate is 'The previous ACD call state. If an ACD call 
has more call history entries then it is the state for the previous history entry.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.173  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1604)
20. COMMENT ON COLUMN acdCallHistoryView.lastpilotdn is 'The pilot DN for the previous history 
entry.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.174  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1605)
20. COMMENT ON COLUMN acdCallHistoryView.lastqueuename is 'Name of the Group Category for the previous 
history entry' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.174  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1606)
20. COMMENT ON COLUMN acdCallHistoryView.lastteamname is 'Name of the Team Category for the previous 
history entry.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.175  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1607)
20. COMMENT ON COLUMN acdCallHistoryView.lastdeptname is 'Name of the Department Category for the 
previous history entry' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.175  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1608)
20. COMMENT ON COLUMN acdCallHistoryView.agentdn is 'The agent telephone number.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.176  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1609)
20. COMMENT ON COLUMN acdCallHistoryView.callerhangup is 'If the calling party hangs up the call 
while ringing or queued then it is 1 otherwise 0.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.176  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1610)
20. COMMENT ON COLUMN acdCallHistoryView.agentname is 'The agent name if the agent DN is resolved 
by lookup.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.178  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1624)
20. DROP VIEW IF EXISTS acd_call_detail_view 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.179  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1626)
20. CREATE OR REPLACE VIEW acd_call_detail_view AS SELECT acd.id AS id, acd.fk_acdCall AS fk_acdcall_id, 
acd.historySeqID AS history_seq_id, acd.state AS state, acd.stateCreated AS state_created, 
acd.duration AS duration, acd.fk_acdPilot AS fk_acdpilot_id, acd.fk_acdQueue AS fk_acdqueue_id, 
acd.target AS target, acd.targetName AS target_name, acd.caller AS caller, acd.callerName AS 
caller_name, acd.agent AS agent, acd.agentName AS agent_name, acd.cucmCallID AS cucm_call_id 
FROM acdCallDetail acd 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.180  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdcalldetail' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.181  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1653)
20. COMMENT ON COLUMN acd_call_detail_view.id is 'Unique database ID (auto-increment)' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.181  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1654)
20. COMMENT ON COLUMN acd_call_detail_view.fk_acdcall_id is 'Foreign key reference to acdCallView 
table id column.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.182  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1655)
20. COMMENT ON COLUMN acd_call_detail_view.history_seq_id is 'Sequence of acd call history entries.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.182  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1656)
20. COMMENT ON COLUMN acd_call_detail_view.state is 'State of acd call entry. Possible value(s): 
STATE_DISCONNECTED=-1, STATE_OFFERED =0, STATE_MAXROUTES=1, STATE_PREQUEUE=5, STATE_QUEUED=6, 
STATE_ROUTED_AGENT=7, STATE_FALLBACK=8, STATE_REROUTING=9, STATE_ROUTED=10, STATE_ROUTED_NOAGENTS=10, 
STATE_ROUTED_QUEUEFULL=11, STATE_ROUTED_EXPIRED=12, STATE_FORWARDED_EXTERN=13, STATE_TRANSFERRED=14, 
STATE_CALL_FORWARDED=15, STATE_ROUTED_BREAK_TARGET=16, STATE_CONNECTED=20, STATE_HELD=21, STATE_OUTGOING=25, 
STATE_AGENT_AVAILABLE=30, STATE_AGENT_UNAVAILABLE=31, STATE_CALLBACK_AUTOMATED_REQUEST=40, 
STATE_CALLBACK_MANUAL_REQUEST=41, STATE_ENDED=100, STATE_BUSY=101.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.183  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1657)
20. COMMENT ON COLUMN acd_call_detail_view.state_created is 'Timestamp when this ACD call state 
entry is created in APAS.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.184  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1658)
20. COMMENT ON COLUMN acd_call_detail_view.duration is 'Time in seconds the ACD call stays in this 
state. For example in state ringing it is ringing time, if state connected it is talking time.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.184  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1659)
20. COMMENT ON COLUMN acd_call_detail_view.fk_acdpilot_id is 'ID of pilot, it is a reference to 
acdPilotView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.185  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1660)
20. COMMENT ON COLUMN acd_call_detail_view.fk_acdqueue_id is 'ID of queue, it is a reference to 
acdQueueView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.185  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1661)
20. COMMENT ON COLUMN acd_call_detail_view.target is 'The current target telephone number where 
the call was routed to in this state.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.186  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1662)
20. COMMENT ON COLUMN acd_call_detail_view.target_name is 'Name of the target.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.186  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1663)
20. COMMENT ON COLUMN acd_call_detail_view.caller is 'The current caller telephone number for this 
state entry. It can be different to original caller if this entry is related to a consult/transfer.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.186  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1664)
20. COMMENT ON COLUMN acd_call_detail_view.caller_name is 'Name of the caller.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.187  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1665)
20. COMMENT ON COLUMN acd_call_detail_view.agent is 'DN of the current agent where the call was 
routed to in this state.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.188  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1666)
20. COMMENT ON COLUMN acd_call_detail_view.agent_name is 'Name of the agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.188  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1667)
20. COMMENT ON COLUMN acd_call_detail_view.cucm_call_id is 'Cisco global call ID, e.g. 123456/1.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.190  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1675)
20. DROP VIEW IF EXISTS acd_queue_view 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.196  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1677)
20. CREATE OR REPLACE VIEW acd_queue_view AS SELECT aq.id AS id, aq.name AS name, aq.description 
AS description, aq.maxCalls AS max_calls, aq.callDistribution AS call_distribution, aq.targetQueueFull 
AS target_queue_full, aq.targetNoAgents AS target_no_agents, aq.preQueueMediaID AS fk_media_prequeue_id, 
aq.queueMediaID AS fk_media_id, aq.rerouteTime AS reroute_time, aq.postCallTime AS post_call_time, 
aq.expireTime AS expire_time, aq.targetExpired AS target_expired, aq.flags AS flags, aq.slaPeriod 
AS sla_period, aq.slaCallSuccessTime AS sla_call_success_time, aq.slaLimit AS sla_limit, aq.fallbackTime 
AS fallback_time, aq.fk_acdCallTagGroup AS fk_acdcall_taggroup_id, aq.pqmrepeatcount AS pqmrepeatcount, 
aq.stats_lastupdate AS stats_lastupdate, aq.stats_waiting_time AS stats_waiting_time, aq.stats_waiting_time_min 
AS stats_waiting_time_min, aq.stats_waiting_time_max AS stats_waiting_time_max, aq.stats_active_agents_min 
AS stats_active_agents_min, aq.stats_active_agents_max AS stats_active_agents_max, aq.stats_call_count_total 
AS stats_call_count_total, aq.stats_call_count_ignored AS stats_call_count_ignored, aq.stats_call_count_missed 
AS stats_call_count_missed, aq.stats_call_count_answered AS stats_call_count_answered, aq.stats_answered_calls_value1 
AS stats_answered_calls_value1, aq.stats_answered_calls_value2 AS stats_answered_calls_value2, 
aq.stats_answered_calls_value3 AS stats_answered_calls_value3, aq.stats_answered_calls_other 
AS stats_answered_calls_other, aq.stats_wt_min_timestamp AS stats_wt_min_timestamp, aq.stats_wt_max_timestamp 
AS stats_wt_max_timestamp, aq.stats_actagents_min_timestamp AS stats_actagents_min_timestamp, 
aq.stats_actagents_max_timestamp AS stats_actagents_max_timestamp, aq.agentmissedcallaction 
AS agentmissedcallaction, aq.queuelimittype AS queuelimittype, aq.otherqueuetarget AS otherqueuetarget, 
aq.looptarget AS looptarget, aq.agentbreaktarget AS agentbreaktarget, aq.slaringsuccesstime 
AS slaringsuccesstime, aq.route_back_to_last_connected_agent AS route_back_to_last_connected_agent, 
aq.fallbackprioritystep AS fallbackprioritystep, aq.noagentprioritystep AS noagentprioritystep, 
aq.expireprioritystep AS expireprioritystep, aq.isfallbackpriorityrelative AS isfallbackpriorityrelative, 
aq.isnoagentpriorityrelative AS isnoagentpriorityrelative, aq.isexpirepriorityrelative AS isexpirepriorityrelative, 
aq.ivrnolicensetarget AS ivrnolicensetarget, aq.stats_waiting_time_vip_max AS stats_waiting_time_vip_max, 
aq.stats_wt_vip_max_timestamp AS stats_wt_vip_max_timestamp, aq.stats_waiting_time_vip_min 
AS stats_waiting_time_vip_min, aq.stats_wt_vip_min_timestamp AS stats_wt_vip_min_timestamp, 
aq.stats_cc_callback_total AS stats_cc_callback_total, aq.stats_cc_callback_automated AS stats_cc_callback_automated, 
aq.stats_cc_callback_manual AS stats_cc_callback_manual, aq.stats_cc_callback_success AS stats_cc_callback_success, 
aq.stats_cc_callback_success_ratio AS stats_cc_callback_success_ratio, aq.stats_cc_callback_attempted 
AS stats_cc_callback_attempted, aq.stats_cc_callback_attempted_ratio AS stats_cc_callback_attempted_ratio, 
aq.stats_cc_callback_new_reqs AS stats_cc_callback_new_reqs, aq.stats_cc_callback_active_reqs 
AS stats_cc_callback_active_reqs, aq.stats_cc_callback_utilization AS stats_cc_callback_utilization, 
aq.stats_cc_callback_expired_total AS stats_cc_callback_expired_total, aq.stats_cc_callback_expired_attempt_exceed 
AS stats_cc_callback_expired_attempt_exceed, aq.stats_cc_callback_expired_out_of_scope AS stats_cc_callback_expired_out_of_scope, 
aq.stats_cc_callback_waiting_time_avg AS stats_cc_callback_waiting_time_avg, aq.stats_cc_callback_waiting_time_min 
AS stats_cc_callback_waiting_time_min, aq.stats_cc_callback_waiting_time_max AS stats_cc_callback_waiting_time_max, 
aq.dir_group_id_for_vip AS dir_group_id_for_vip, aq.dir_group_fld_vip_priority AS dir_group_fld_vip_priority, 
aq.dir_group_fld_vip_reroute AS dir_group_fld_vip_reroute, aq.callback_rule_id AS callback_rule_id 
FROM acdQueue aq 
 {executed in 5 msec}

-----> 2020-02-28 07:46:21.196  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdqueue' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.197  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1765)
20. COMMENT ON COLUMN acd_queue_view.id is 'Unique ID.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.198  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1766)
20. COMMENT ON COLUMN acd_queue_view.name is 'Name of the Queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.199  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1767)
20. COMMENT ON COLUMN acd_queue_view.description is 'Description of the Queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.200  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1768)
20. COMMENT ON COLUMN acd_queue_view.max_calls is 'Queue limit value, maximum number of calls in 
the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.201  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1769)
20. COMMENT ON COLUMN acd_queue_view.call_distribution is 'Type of call distribution. Possible 
value(s): CALLDISTRIBUTION_FIRSTAVAIL=0, CALLDISTRIBUTION_FIRSTAVAILNOTBUSY=1, CALLDISTRIBUTION_LONGESTIDLE=2, 
CALLDISTRIBUTION_ROUNDROBIN=3, CALLDISTRIBUTION_ALWAYSQUEUE=4, CALLDISTRIBUTION_QUEUEDTRANSFER=5, 
CALLDISTRIBUTION_PARKQUEUE=6.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.201  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1770)
20. COMMENT ON COLUMN acd_queue_view.target_queue_full is 'Queue full target DN. The call will 
be redirected to this target if the queue is full.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.202  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1771)
20. COMMENT ON COLUMN acd_queue_view.target_no_agents is 'Fwd. No agents target DN. The call will 
be redirected to this target if the queue has no available agents.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.203  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1772)
20. COMMENT ON COLUMN acd_queue_view.fk_media_prequeue_id is 'PreQueue media ID, refers to media 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.203  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1773)
20. COMMENT ON COLUMN acd_queue_view.fk_media_id is 'Queue media ID, refers to media table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.204  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1774)
20. COMMENT ON COLUMN acd_queue_view.reroute_time is 'Reroute time in seconds.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.204  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1775)
20. COMMENT ON COLUMN acd_queue_view.post_call_time is 'Postcall time in seconds.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.205  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1776)
20. COMMENT ON COLUMN acd_queue_view.expire_time is 'Expire time in seconds.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.205  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1777)
20. COMMENT ON COLUMN acd_queue_view.target_expired is 'Expire time target DN. The call will be 
redirected to this target if the expire time exceeds in the queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.206  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1778)
20. COMMENT ON COLUMN acd_queue_view.flags is 'Some flags, like Queue calls during break.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.207  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1779)
20. COMMENT ON COLUMN acd_queue_view.sla_period is 'The time in minutes for the measurement interval 
to calculate service level.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.207  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1780)
20. COMMENT ON COLUMN acd_queue_view.sla_call_success_time is 'The minimum time in seconds for 
an accepted call to be counted as successful. If the call is shorter it will be ignored.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.208  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1781)
20. COMMENT ON COLUMN acd_queue_view.sla_limit is 'The minimum service level in percent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.210  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1782)
20. COMMENT ON COLUMN acd_queue_view.fallback_time is 'The time in seconds after the call will 
fall back to the agent or queue when the destination does not pickup the call.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.211  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1783)
20. COMMENT ON COLUMN acd_queue_view.fk_acdcall_taggroup_id is 'The reference key to the acd_call_tag_group_view 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.212  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1785)
20. COMMENT ON COLUMN acd_queue_view.pqmrepeatcount is 'Repeat count for pre-queue media' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.212  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1786)
20. COMMENT ON COLUMN acd_queue_view.stats_lastupdate is 'Timestamp when the queue statitistics 
values are updated.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.213  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1787)
20. COMMENT ON COLUMN acd_queue_view.stats_waiting_time is 'Avarage waiting time in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.213  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1788)
20. COMMENT ON COLUMN acd_queue_view.stats_waiting_time_min is 'The minimum waiting time in the 
queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.214  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1789)
20. COMMENT ON COLUMN acd_queue_view.stats_waiting_time_max is 'The maximum waiting time in the 
queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.214  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1790)
20. COMMENT ON COLUMN acd_queue_view.stats_active_agents_min is 'The minimum number of active agents 
in the queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.215  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1791)
20. COMMENT ON COLUMN acd_queue_view.stats_active_agents_max is 'The maximum number of active agents 
in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.215  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1792)
20. COMMENT ON COLUMN acd_queue_view.stats_call_count_total is 'Counter for the total calls' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.216  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1793)
20. COMMENT ON COLUMN acd_queue_view.stats_call_count_ignored is 'Counter for the ignored calls' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.216  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1794)
20. COMMENT ON COLUMN acd_queue_view.stats_call_count_missed is 'Counter for the missed calls. 
(either missed while queued or ringing at agent)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.217  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1795)
20. COMMENT ON COLUMN acd_queue_view.stats_call_count_answered is 'Counter for the answered calls.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.217  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1796)
20. COMMENT ON COLUMN acd_queue_view.stats_answered_calls_value1 is 'Number of answered calls where 
ringing time < 10s.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.218  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1797)
20. COMMENT ON COLUMN acd_queue_view.stats_answered_calls_value2 is 'Number of answered calls where 
ringing time < 20s.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.218  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1798)
20. COMMENT ON COLUMN acd_queue_view.stats_answered_calls_value3 is 'Number of answered calls where 
ringing time < 30s.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.218  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1799)
20. COMMENT ON COLUMN acd_queue_view.stats_answered_calls_other is 'Number of answered calls where 
ringing time > 30s.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.219  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1800)
20. COMMENT ON COLUMN acd_queue_view.stats_wt_min_timestamp is 'The timestamp when the minimum 
waiting time is reached.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.219  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1801)
20. COMMENT ON COLUMN acd_queue_view.stats_wt_max_timestamp is 'The timestamp when the maximum 
waiting time is reached.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.220  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1802)
20. COMMENT ON COLUMN acd_queue_view.stats_actagents_min_timestamp is 'The timestamp when the minimum 
number of active agents is reached.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.220  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1803)
20. COMMENT ON COLUMN acd_queue_view.stats_actagents_max_timestamp is 'The timestamp when the maximum 
number of active agents is reached.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.221  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1804)
20. COMMENT ON COLUMN acd_queue_view.agentmissedcallaction is 'The agent status which is set when 
an agent has a missed call.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.221  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1805)
20. COMMENT ON COLUMN acd_queue_view.queuelimittype is 'The type of the queue limit (0 = No Limit; 
1 = Max Calls; 2 = Calls per Agent; 3 = Max Waiting Time)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.222  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1806)
20. COMMENT ON COLUMN acd_queue_view.otherqueuetarget is 'Other queue target. If the call was already 
forwarded from a different queue then use this target instead of the queue full or no agent 
target.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.222  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1807)
20. COMMENT ON COLUMN acd_queue_view.looptarget is 'It is not used any more.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.223  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1808)
20. COMMENT ON COLUMN acd_queue_view.agentbreaktarget is 'Break Target. When at least an agent 
is in break and all others are unavailable then calls will be forwarded to this extension.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.224  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1809)
20. COMMENT ON COLUMN acd_queue_view.slaringsuccesstime is 'The minimum ringing time in seconds 
for an accepted call to be counted as successful.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.226  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1810)
20. COMMENT ON COLUMN acd_queue_view.route_back_to_last_connected_agent is 'If true then Route 
back to last connected agent feature is enabled.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.226  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1811)
20. COMMENT ON COLUMN acd_queue_view.fallbackprioritystep is 'This enables to change the priority 
for fallback calls.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.227  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1812)
20. COMMENT ON COLUMN acd_queue_view.noagentprioritystep is 'This enables to change the priority 
for forwarded calls if there is no agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.228  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1813)
20. COMMENT ON COLUMN acd_queue_view.expireprioritystep is 'This enables to change the priority 
for expired calls.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.228  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1814)
20. COMMENT ON COLUMN acd_queue_view.isfallbackpriorityrelative is 'If true then the fallback priority 
is a relative value.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.230  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1815)
20. COMMENT ON COLUMN acd_queue_view.isnoagentpriorityrelative is 'If true then the Fw. No Agent 
priority is a relative value.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.231  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1816)
20. COMMENT ON COLUMN acd_queue_view.isexpirepriorityrelative is 'If true then the expired priority 
is a relative value.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.247  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1817)
20. COMMENT ON COLUMN acd_queue_view.ivrnolicensetarget is 'The target when no valid IVR license 
installed.' 
 {executed in 16 msec}

-----> 2020-02-28 07:46:21.248  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1818)
20. COMMENT ON COLUMN acd_queue_view.stats_waiting_time_vip_max is 'The maximum waiting time in 
the queue for VIP calls.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.248  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1819)
20. COMMENT ON COLUMN acd_queue_view.stats_wt_vip_max_timestamp is 'The timestamp when the maximum 
waiting time is reached for VIP calls.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.249  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1820)
20. COMMENT ON COLUMN acd_queue_view.stats_waiting_time_vip_min is 'The maximum waiting time in 
the queue for VIP calls.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.249  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1821)
20. COMMENT ON COLUMN acd_queue_view.stats_wt_vip_min_timestamp is 'The timestamp when the minimum 
waiting time is reached for VIP calls.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.250  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1822)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_total is 'Number of the total CC callback 
requests.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.250  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1823)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_automated is 'Number of the automated CC 
callback requests.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.251  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1824)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_manual is 'Number of the manual CC callback 
requests.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.251  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1825)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_success is 'Number of those CC callback 
requests which were successfully called back and answered.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.253  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1826)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_success_ratio is 'The CC callback success 
ratio in percentage (how many were successfully called back vs. how many were there in total).' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.253  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1827)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_attempted is 'Number of the callback attempts 
when the agent makes a callback.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.254  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1828)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_attempted_ratio is 'The CC callback attempted 
ratio in percentage (how many successful vs attempted callback).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.254  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1829)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_new_reqs is 'Number of the current new CC 
callback requests without any callback attempts.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.255  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1830)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_active_reqs is 'Number of the current active 
CC callback requests with at least one callback attempt' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.255  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1831)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_utilization is 'CC Callback utilization 
in percentage: New Requests / (Active Requests + New Requests)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.256  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1832)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_expired_total is 'The total number of those 
callback entries which are expired.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.256  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1833)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_expired_attempt_exceed is 'The number of 
callback entries which are expired due to too many attempts (attempt exceeded).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.257  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1834)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_expired_out_of_scope is 'The number of callback 
entries which are expired due to the display duration.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.257  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1835)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_waiting_time_avg is 'The avarage waiting 
time the for a callback attempt. The time which elapsed between the request creation and the 
first callback attempt.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.258  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1836)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_waiting_time_min is 'The minimum waiting 
time the for a callback attempt. The time which elapsed between the request creation and the 
first callback attempt.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.258  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1837)
20. COMMENT ON COLUMN acd_queue_view.stats_cc_callback_waiting_time_max is 'The maximum waiting 
time the for a callback attempt. The time which elapsed between the request creation and the 
first callback attempt.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.259  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1838)
20. COMMENT ON COLUMN acd_queue_view.dir_group_id_for_vip is 'Directory Group ID used for VIP call 
lookup.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.259  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1839)
20. COMMENT ON COLUMN acd_queue_view.dir_group_fld_vip_priority is 'Directory field name for priority 
in case of VIP calls.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.260  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1840)
20. COMMENT ON COLUMN acd_queue_view.dir_group_fld_vip_reroute is 'Directory field name for rerouting 
in case VIP calls.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.260  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1841)
20. COMMENT ON COLUMN acd_queue_view.callback_rule_id is 'Callback Rule ID used for Call Center 
Callback feature.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.261  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1849)
20. DROP VIEW IF EXISTS acd_pilot_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.262  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1851)
20. CREATE OR REPLACE VIEW acd_pilot_view AS SELECT ap.id AS id, ap.name AS name, ap.description 
AS description, ap.DN AS dn FROM acdPilot ap 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.263  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdpilot' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.264  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1867)
20. COMMENT ON COLUMN acd_pilot_view.id is 'Unique ID of the pilot.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.265  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1868)
20. COMMENT ON COLUMN acd_pilot_view.name is 'Name of the pilot.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.265  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1869)
20. COMMENT ON COLUMN acd_pilot_view.description is 'Description of the pilot.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.266  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1870)
20. COMMENT ON COLUMN acd_pilot_view.dn is 'DN of the CTI RP (Pilot DN).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.267  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1877)
20. DROP VIEW IF EXISTS acd_pilot_queue_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.268  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1879)
20. CREATE OR REPLACE VIEW acd_pilot_queue_view AS SELECT ap.pilotID AS fk_acdpilot_id, ap.id AS 
id, ap.scheduleID AS fk_schedule_id, ap.queueID AS fk_acdqueue_id, ap.color AS color FROM acdPilotQueue 
ap 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.269  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdpilotqueue' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.269  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1896)
20. COMMENT ON COLUMN acd_pilot_queue_view.fk_acdpilot_id is 'Reference to acdPilotView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.270  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1897)
20. COMMENT ON COLUMN acd_pilot_queue_view.id is 'Order of queues in the pilot, incremented value 
from zero.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.270  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1898)
20. COMMENT ON COLUMN acd_pilot_queue_view.fk_schedule_id is 'Reference to schedule table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.271  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1899)
20. COMMENT ON COLUMN acd_pilot_queue_view.fk_acdqueue_id is 'Reference to acdQueueView table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.271  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1900)
20. COMMENT ON COLUMN acd_pilot_queue_view.color is 'Color definition for the given queue in the 
pilot.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.272  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1907)
20. DROP VIEW IF EXISTS acd_agent_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.274  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1909)
20. CREATE OR REPLACE VIEW acd_agent_view AS SELECT a.id AS id, a.queueID AS fk_acdqueue_id, a.priority 
AS priority, a.DN AS dn, a.available AS available, a.skill AS skill, a.stats_lastUpdate AS 
stats_last_update, a.stats_calls_total AS stats_calls_total, a.stats_calls_missed AS stats_calls_missed, 
a.stats_service_level AS stats_service_level, a.stats_talking_time AS stats_talking_time, a.stats_onhold_time 
AS stats_onhold_time, a.stats_wrapup_time AS stats_wrapup_time, a.stats_idle_time AS stats_idle_time, 
a.stats_call_duration_avg AS stats_call_duration_avg, a.stats_ring_duration_avg AS stats_ring_duration_avg, 
a.stats_occupancy AS stats_occupancy, a.isPrimaryQueue AS is_primary_queue, a.lastStateChangesID 
AS last_state_changes_id, a.lastStateChangesTime AS last_state_changes_time, a.callback_enabled 
AS callback_enabled FROM acdAgent a 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.275  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdagent' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.277  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1942)
20. COMMENT ON COLUMN acd_agent_view.id is 'Unique database ID (auto-increment)' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.277  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1943)
20. COMMENT ON COLUMN acd_agent_view.fk_acdqueue_id is 'ID of the queue, it is a reference to acdQueueView.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.277  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1944)
20. COMMENT ON COLUMN acd_agent_view.priority is 'Order of the agent in the queue. It refers to 
acdAgentView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.278  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1945)
20. COMMENT ON COLUMN acd_agent_view.available is 'Agent availability, it refers to acdAgentView 
table. Possible value(s): Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.279  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1946)
20. COMMENT ON COLUMN acd_agent_view.dn is 'DN of the agent. It refers to acdAgentView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.279  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1947)
20. COMMENT ON COLUMN acd_agent_view.skill is 'Agent skill, it refers to acdAgentView table. Possible 
values from 0 to 9.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.280  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1948)
20. COMMENT ON COLUMN acd_agent_view.stats_last_update is 'Datetime when last agent statistics 
values are last updated.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.280  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1949)
20. COMMENT ON COLUMN acd_agent_view.stats_calls_total is 'Total amount of calls of this agent 
(daily information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.281  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1950)
20. COMMENT ON COLUMN acd_agent_view.stats_calls_missed is 'Total amount of missed calls of agent 
(daily information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.281  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1951)
20. COMMENT ON COLUMN acd_agent_view.stats_service_level is 'Service level of agent (daily information)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.282  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1952)
20. COMMENT ON COLUMN acd_agent_view.stats_talking_time is 'Total talking time of this agent (daily 
information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.282  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1953)
20. COMMENT ON COLUMN acd_agent_view.stats_onhold_time is 'Total hold time for this agent (daily 
information)' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.283  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1954)
20. COMMENT ON COLUMN acd_agent_view.stats_wrapup_time is 'Total postcall (wrap up) time for this 
agent (daily information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.283  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1955)
20. COMMENT ON COLUMN acd_agent_view.stats_idle_time is 'Total idle time for this agent (daily 
information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.284  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1956)
20. COMMENT ON COLUMN acd_agent_view.stats_call_duration_avg is 'Average of the call duration (daily 
information).' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.284  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1957)
20. COMMENT ON COLUMN acd_agent_view.stats_ring_duration_avg is 'Average of the call ringing (daily 
information).' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.285  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1958)
20. COMMENT ON COLUMN acd_agent_view.stats_occupancy is 'Calculated value from other statistics 
column.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.285  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1959)
20. COMMENT ON COLUMN acd_agent_view.is_primary_queue is 'If agent is primary in the queue then 
this value is 1 otherwise 0.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.286  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1960)
20. COMMENT ON COLUMN acd_agent_view.last_state_changes_id is 'The reference key to the acd_agent_status_view 
which contains the information about the last agent status changes.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.286  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1961)
20. COMMENT ON COLUMN acd_agent_view.last_state_changes_time is 'The timestamp when was the last 
agent status changes.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.286  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1962)
20. COMMENT ON COLUMN acd_agent_view.callback_enabled is 'If true then agent is enabled to use 
Call Center Callback feature. It refers to acdAgentView table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.287  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1969)
20. DROP VIEW IF EXISTS acd_agent_status_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.289  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:1971)
20. CREATE OR REPLACE VIEW acd_agent_status_view AS SELECT a.id AS status_id, a.fk_acdQueue AS 
fk_acdqueue_id, a.agent AS agent, a.startTime AS start_time, a.fromState AS from_state, a.toState 
AS to_state, a.duration AS duration, a.agentName AS agent_name, a.all_agents_count AS all_agents_count, 
a.logged_in_agents_count AS logged_in_agents_count, a.available_agents_count AS available_agents_count, 
a.postcall_agents_count AS postcall_agents_count, a.break_agents_count AS break_agents_count, 
a.unavailable_agents_count AS unavailable_agents_count, a.disabled_agents_count AS disabled_agents_count, 
a.busy_agents_count AS busy_agents_count, a.offwork_agents_count AS offwork_agents_count FROM 
acdAgentStatus a 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.289  com.andtek.andphone.utils.ModuleDBUtils.loadComments(ModuleDBUtils.java:428)
20. select a.attname as column, d.description from pg_description d, pg_class c, pg_attribute a 
where d.objoid=c.oid and d.objoid=a.attrelid and a.attnum=d.objsubid and c.relname='acdagentstatus' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.290  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2000)
20. COMMENT ON COLUMN acd_agent_status_view.status_id is 'Primary key column for this view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.291  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2001)
20. COMMENT ON COLUMN acd_agent_status_view.fk_acdqueue_id is 'Foreign key reference to acdQueueView.id' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.291  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2002)
20. COMMENT ON COLUMN acd_agent_status_view.agent is 'DN of the agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.292  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2003)
20. COMMENT ON COLUMN acd_agent_status_view.start_time is 'Timestamp when agent state is changed 
to other state' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.292  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2004)
20. COMMENT ON COLUMN acd_agent_status_view.from_state is 'Old availability state of agent. Possible 
value(s): Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.293  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2005)
20. COMMENT ON COLUMN acd_agent_status_view.to_state is 'New availability state of agent. Possible 
value(s): Active=0, Inactive=1, Break=2, Postcall=3, Disabled=4, OffWork=5.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.293  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2006)
20. COMMENT ON COLUMN acd_agent_status_view.duration is 'Time in seconds, how long the agent stays 
in this state.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.293  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2007)
20. COMMENT ON COLUMN acd_agent_status_view.agent_name is 'The name of the agent. It is provided 
by active desktop client or gathered by lookup.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.294  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2008)
20. COMMENT ON COLUMN acd_agent_status_view.all_agents_count is 'The actual number of all agents 
in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.295  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2009)
20. COMMENT ON COLUMN acd_agent_status_view.logged_in_agents_count is 'The actual number of logged 
in agents in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.296  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2010)
20. COMMENT ON COLUMN acd_agent_status_view.available_agents_count is 'The actual number of available 
agents in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.297  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2011)
20. COMMENT ON COLUMN acd_agent_status_view.postcall_agents_count is 'The actual number of agents 
in post-processing state in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.298  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2012)
20. COMMENT ON COLUMN acd_agent_status_view.break_agents_count is 'The actual number of agents 
in break state in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.298  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2013)
20. COMMENT ON COLUMN acd_agent_status_view.unavailable_agents_count is 'The actual number of unavailable 
agents in the queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.299  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2014)
20. COMMENT ON COLUMN acd_agent_status_view.disabled_agents_count is 'The actual number of disabled 
agents in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.300  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2015)
20. COMMENT ON COLUMN acd_agent_status_view.busy_agents_count is 'The actual number of busy agents 
in the queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.304  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2016)
20. COMMENT ON COLUMN acd_agent_status_view.offwork_agents_count is 'The actual number of agents 
in off-work state in the queue.' 
 {executed in 4 msec}

-----> 2020-02-28 07:46:21.306  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2024)
20. DROP VIEW IF EXISTS acd_call_classification_view 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.308  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2026)
20. CREATE OR REPLACE VIEW acd_call_classification_view AS SELECT id AS id, fk_acdCall AS fk_acd_call_id, 
queueID AS queue_id, agentDn AS agent_dn, created AS created FROM acdCallClassification 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.309  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2040)
20. COMMENT ON COLUMN acd_call_classification_view.id is 'Primary key for this view table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.309  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2041)
20. COMMENT ON COLUMN acd_call_classification_view.fk_acd_call_id is 'The reference key to the 
acd_call_view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.310  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2042)
20. COMMENT ON COLUMN acd_call_classification_view.queue_id is 'The reference key to the acd_queue_view 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.310  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2043)
20. COMMENT ON COLUMN acd_call_classification_view.agent_dn is 'The agent telephone number' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.311  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2044)
20. COMMENT ON COLUMN acd_call_classification_view.created is 'The timestamp when this entry is 
created.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.312  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2051)
20. DROP VIEW IF EXISTS acd_call_classification_2_tag_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.313  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2053)
20. CREATE OR REPLACE VIEW acd_call_classification_2_tag_view AS SELECT id AS id, fk_acdCallClassification 
AS fk_acd_call_classification_id, fk_acdCallTag AS fk_acd_call_tag_id FROM acdCallClassification2Tag 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.314  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2065)
20. COMMENT ON COLUMN acd_call_classification_2_tag_view.id is 'Primary key of this view table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.317  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2066)
20. COMMENT ON COLUMN acd_pilot_view.fk_acd_call_classification_id is 'The reference key to the 
acd_call_classification_view table.' 
 {FAILED after 3 msec}

org.postgresql.util.PSQLException: ERROR: column "fk_acd_call_classification_id" of relation "acd_pilot_view" does not exist
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2455) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2155) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:288) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:430) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:356) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:303) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.executeCachedSql(PgStatement.java:289) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.executeWithFlags(PgStatement.java:266) ~[postgresql-jdbc.jar:9.4.1212]
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:262) ~[postgresql-jdbc.jar:9.4.1212]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:290) ~[tomcat-dbcp.jar:8.0.35]
	at org.apache.tomcat.dbcp.dbcp2.DelegatingStatement.execute(DelegatingStatement.java:290) ~[tomcat-dbcp.jar:8.0.35]
	at net.sf.log4jdbc.StatementSpy.execute(StatementSpy.java:842) [log4jdbc4-1.2.jar:?]
	at com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2066) [classes/:?]
	at com.andtek.andphone.utils.ModuleDBUtils.createDB(ModuleDBUtils.java:977) [classes/:?]
	at com.andtek.andphone.JTAPIThread.loadConfig(JTAPIThread.java:3585) [classes/:?]
	at com.andtek.andphone.JTAPIThread.run(JTAPIThread.java:364) [classes/:?]
-----> 2020-02-28 07:46:21.320  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2075)
20. DROP VIEW IF EXISTS acd_call_tag_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.322  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2077)
20. CREATE OR REPLACE VIEW acd_call_tag_view AS SELECT id AS id, fk_tagGroup AS fk_tag_group_id, 
customId AS custom_id,name AS name, shortDescription AS short_description,longDescription AS 
long_description, defaultProperty AS default_property, active AS active FROM acdCallTag 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.322  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2094)
20. COMMENT ON COLUMN acd_call_tag_view.id is 'Primary key of this vew table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.323  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2095)
20. COMMENT ON COLUMN acd_call_tag_view.fk_tag_group_id is 'The reference key to the acd_call_tag_group_view 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.323  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2096)
20. COMMENT ON COLUMN acd_call_tag_view.custom_id is 'The custom identifier for the tag entry. 
It is displayed for the agent when she classifies a call.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.324  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2097)
20. COMMENT ON COLUMN acd_call_tag_view.name is 'The name of the tag entry. It is displayed for 
the agent when she classifies a call.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.324  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2098)
20. COMMENT ON COLUMN acd_call_tag_view.short_description is 'The short description of the tag 
entry.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.325  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2099)
20. COMMENT ON COLUMN acd_call_tag_view.long_description is 'The long description of the tag entry.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.325  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2100)
20. COMMENT ON COLUMN acd_call_tag_view.default_property is 'If a tag is set as default in the 
tag group then the value is 1 otherwise 0.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.326  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2101)
20. COMMENT ON COLUMN acd_call_tag_view.active is 'If a tag entry is enabled then the value is 
1 otherwise 0.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.327  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2108)
20. DROP VIEW IF EXISTS acd_call_tag_group_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.328  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2110)
20. CREATE OR REPLACE VIEW acd_call_tag_group_view AS SELECT id AS id, name AS name, description 
AS description FROM acdCallTagGroup 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.328  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2122)
20. COMMENT ON COLUMN acd_call_tag_group_view.id is 'Primary key of this view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.329  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2123)
20. COMMENT ON COLUMN acd_call_tag_group_view.name is 'The name of the tag group' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.329  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2124)
20. COMMENT ON COLUMN acd_call_tag_group_view.description is 'The description of the tag group.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.330  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2131)
20. DROP VIEW IF EXISTS acd_agent_skill_history_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.331  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2133)
20. CREATE OR REPLACE VIEW acd_agent_skill_history_view AS SELECT a.id AS id, a.fk_acdQueue AS 
fk_acdqueue_id, a.agent AS agent, a.change_time AS change_time, a.from_skill AS from_skill, 
a.to_skill AS to_skill, a.agent_name AS agent_name FROM acd_agent_skill_history a 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.332  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2149)
20. COMMENT ON COLUMN acd_agent_skill_history_view.id is 'Unique database ID (auto-increment)' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.332  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2150)
20. COMMENT ON COLUMN acd_agent_skill_history_view.fk_acdqueue_id is 'Foreign key reference to 
the acd_queue_view.id' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.333  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2151)
20. COMMENT ON COLUMN acd_agent_skill_history_view.agent is 'Agent telephone number' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.333  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2152)
20. COMMENT ON COLUMN acd_agent_skill_history_view.change_time is 'The timestamp when the skill 
is changed.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.334  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2153)
20. COMMENT ON COLUMN acd_agent_skill_history_view.from_skill is 'The previous skill value' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.334  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2154)
20. COMMENT ON COLUMN acd_agent_skill_history_view.to_skill is 'The new skill value' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.335  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2155)
20. COMMENT ON COLUMN acd_agent_skill_history_view.agent_name is 'The name of the agent configured 
on the CUCM Line' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.336  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2162)
20. DROP VIEW IF EXISTS acd_callback_requests_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.338  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2164)
20. CREATE OR REPLACE VIEW acd_callback_requests_view AS SELECT acr.* FROM acd_callback_requests 
acr 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.339  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2174)
20. COMMENT ON COLUMN acd_callback_requests_view.id is 'Primary key of this view table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.339  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2175)
20. COMMENT ON COLUMN acd_callback_requests_view.creation_time is 'The timestamp when the callback 
request entry is created.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.340  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2176)
20. COMMENT ON COLUMN acd_callback_requests_view.callback_number is 'The calling number who created 
the callback request.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.341  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2177)
20. COMMENT ON COLUMN acd_callback_requests_view.queue_id is 'The reference key to the acd_queue_view 
table.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.341  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2178)
20. COMMENT ON COLUMN acd_callback_requests_view.pilot_id is 'The reference key to the acd_pilot_view 
table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.341  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2179)
20. COMMENT ON COLUMN acd_callback_requests_view.status is 'The status information about the callback 
request. The possible values: new_request, in_progress, callback_attempted' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.342  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2180)
20. COMMENT ON COLUMN acd_callback_requests_view.creation_mode is 'The creation mode shows how 
the callback request entry is created: automated or manual' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.342  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2181)
20. COMMENT ON COLUMN acd_callback_requests_view.creation_cause is 'The cause of the callback request 
creation. The possible values: prequeue, queue, ringing, novalid_routing, ivr, other' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.343  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2182)
20. COMMENT ON COLUMN acd_callback_requests_view.creation_acdcall_id is 'The reference key to the 
acd_call_view table. The ACD call ID which created the callback request.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.343  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2183)
20. COMMENT ON COLUMN acd_callback_requests_view.success_acdcall_id is 'The reference key to the 
acd_call_view table. The ACD call ID for the successful callback call where the called party 
answers the call.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.344  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2184)
20. COMMENT ON COLUMN acd_callback_requests_view.request_count is 'The counter for the incoming 
callback request. If the same caller in the same queue creates more than one requests then 
this counter is incremented.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.344  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2185)
20. COMMENT ON COLUMN acd_callback_requests_view.attempt_count is 'The counter for the outgoing 
callback attempts when the called party does not answer the call that is initiated by the agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.345  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2186)
20. COMMENT ON COLUMN acd_callback_requests_view.last_request_time is 'The timestamp when is the 
last incoming callback request for the same caller in the same queue.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.345  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2187)
20. COMMENT ON COLUMN acd_callback_requests_view.last_attempt_time is 'The timestamp when is the 
last outgoing callback attempt that is initiated by the agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.346  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2188)
20. COMMENT ON COLUMN acd_callback_requests_view.first_attempt_time is 'The timestamp when is the 
first outgoing callback attempt that is initiated by the agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.346  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2189)
20. COMMENT ON COLUMN acd_callback_requests_view.last_success_time is 'The timestamp when is the 
last successful outgoing callback call where the called party answers the call.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.347  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2190)
20. COMMENT ON COLUMN acd_callback_requests_view.callback_name is 'The name of the calling party 
who creates the callback request. It may empty if unable to lookup.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.347  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2191)
20. COMMENT ON COLUMN acd_callback_requests_view.marked_for_history is 'It is true if the entry 
is marked for history. In that case then entry will be moved to the history table. We need 
the history for reporting purpose.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.348  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2199)
20. DROP VIEW IF EXISTS acd_callback_requests_history_view 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.350  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2201)
20. CREATE OR REPLACE VIEW acd_callback_requests_history_view AS SELECT acr.* FROM acd_callback_requests_history 
acr 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.350  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2211)
20. COMMENT ON COLUMN acd_callback_requests_history_view.id is 'Primary key of this view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.351  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2212)
20. COMMENT ON COLUMN acd_callback_requests_history_view.creation_time is 'The timestamp when the 
callback request entry is created.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.351  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2213)
20. COMMENT ON COLUMN acd_callback_requests_history_view.callback_number is 'The calling number 
who created the callback request.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.352  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2214)
20. COMMENT ON COLUMN acd_callback_requests_history_view.queue_id is 'The reference key to the 
acd_queue_view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.352  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2215)
20. COMMENT ON COLUMN acd_callback_requests_history_view.pilot_id is 'The reference key to the 
acd_pilot_view table.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.352  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2216)
20. COMMENT ON COLUMN acd_callback_requests_history_view.status is 'The status information about 
the callback request. The possible values: deleted_cause_active_expired, deleted_cause_manual, 
deleted_cause_success_by_caller, deleted_cause_success_by_agent, deleted_cause_attempt_exceed' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.353  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2217)
20. COMMENT ON COLUMN acd_callback_requests_history_view.creation_mode is 'The creation mode shows 
how the callback request entry is created: automated or manual' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.354  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2218)
20. COMMENT ON COLUMN acd_callback_requests_history_view.creation_cause is 'The cause of the callback 
request creation. The possible values: prequeue, queue, ringing, novalid_routing, ivr, other' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.354  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2219)
20. COMMENT ON COLUMN acd_callback_requests_history_view.creation_acdcall_id is 'The reference 
key to the acd_call_view table. The ACD call ID which created the callback request.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.355  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2220)
20. COMMENT ON COLUMN acd_callback_requests_history_view.success_acdcall_id is 'The reference key 
to the acd_call_view table. The ACD call ID for the successful callback call where the called 
party answers the call.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.355  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2221)
20. COMMENT ON COLUMN acd_callback_requests_history_view.request_count is 'The counter for the 
incoming callback request. If the same caller in the same queue creates more than one requests 
then this counter is incremented.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.356  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2222)
20. COMMENT ON COLUMN acd_callback_requests_history_view.attempt_count is 'The counter for the 
outgoing callback attempts when the called party does not answer the call that is initiated 
by the agent.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.356  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2223)
20. COMMENT ON COLUMN acd_callback_requests_history_view.last_request_time is 'The timestamp when 
is the last incoming callback request for the same caller in the same queue.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.357  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2224)
20. COMMENT ON COLUMN acd_callback_requests_history_view.last_attempt_time is 'The timestamp when 
is the last outgoing callback attempt that is initiated by the agent.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.359  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2225)
20. COMMENT ON COLUMN acd_callback_requests_history_view.first_attempt_time is 'The timestamp when 
is the first outgoing callback attempt that is initiated by the agent.' 
 {executed in 2 msec}

-----> 2020-02-28 07:46:21.359  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2226)
20. COMMENT ON COLUMN acd_callback_requests_history_view.last_success_time is 'The timestamp when 
is the last successful outgoing callback call where the called party answers the call.' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.360  com.andtek.andphone.partner.acd.ModuleDB.create(ModuleDB.java:2227)
20. COMMENT ON COLUMN acd_callback_requests_history_view.callback_name is 'The name of the calling 
party who creates the callback request. It may empty if unable to lookup.' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.361  com.andtek.andphone.directory.Module.getAsciiDirectoryIDs(Module.java:290)
34. SELECT id FROM directories WHERE type='2' AND hide='0' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.362  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
35. SELECT val FROM config WHERE module='global' AND param='reportingDBPassword' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.363  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
36. UPDATE config SET val='' WHERE module='global' AND param='reportingDBPassword' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.392  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_deleteMsgAfterRead' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.392  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_fetch_period' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.393  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_Out_server' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.393  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_Out_username' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.393  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_Out_password' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.394  com.andtek.andphone.inout.ModuleDB.InsertConfig(ModuleDB.java:49)
20. SELECT val FROM config WHERE module='inout' AND param='Mapping_SMTP_Out_sender' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.690  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE settings_webuser VALIDATE CONSTRAINT settings_webuser_timezone_id_fkey 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.690  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE settings_webuser VALIDATE CONSTRAINT settings_webuser_user_uid_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.701  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE tab_panel VALIDATE CONSTRAINT tab_panel_layout_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.702  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE tab_panel VALIDATE CONSTRAINT tab_panel_settings_webuser_id_fkey 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.713  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE portlet VALIDATE CONSTRAINT portlet_portlet_type_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.713  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE portlet VALIDATE CONSTRAINT portlet_tab_panel_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.725  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE settings_portlet_images_has_portlet VALIDATE CONSTRAINT settings_portlet_images_has_portlet_image_size_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.725  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE settings_portlet_images_has_portlet VALIDATE CONSTRAINT settings_portlet_images_has_portlet_portlet_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.726  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE settings_portlet_images_has_portlet VALIDATE CONSTRAINT settings_portlet_images_hp_settings_portlet_images_id_fkey 
 {executed in 1 msec}

-----> 2020-02-28 07:46:21.738  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE portlet_has_settings_portlet_text VALIDATE CONSTRAINT portlet_has_settings_portlet_text_portlet_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.738  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE portlet_has_settings_portlet_text VALIDATE CONSTRAINT portlet_has_settings_portlet_text_settings_portlet_text_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:21.739  com.andtek.andphone.utils.ModuleDBUtils.validateForeignKey(ModuleDBUtils.java:517)
20. ALTER TABLE portlet_has_settings_portlet_text VALIDATE CONSTRAINT portlet_has_settings_portlet_text_text_size_id_fkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.592  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
37. SELECT val FROM config WHERE module='global' AND param='version' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.593  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
38. UPDATE config SET val='6220' WHERE module='global' AND param='version' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.654  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
39. SELECT val FROM config WHERE module='recorder' AND param='MaxCalls' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.655  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
40. UPDATE config SET val='1000' WHERE module='recorder' AND param='MaxCalls' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.660  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:23.667  com.andtek.andphone.partner.PDevice.removeAll(PDevice.java:635)
23. TRUNCATE pdevices; 
 {executed in 6 msec}

-----> 2020-02-28 07:46:23.669  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:23.671  com.andtek.andphone.global.servers.GenericServer.load(GenericServer.java:435)
24. SELECT * FROM servers ORDER BY serverName 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.671  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.673  com.andtek.andphone.global.servers.GenericServer.load(GenericServer.java:457)
25. SELECT * FROM servers_attrs WHERE serverID=4 ORDER BY name 
 {executed in 2 msec}

-----> 2020-02-28 07:46:23.674  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.675  com.andtek.andphone.global.servers.GenericServer.load(GenericServer.java:457)
26. SELECT * FROM servers_attrs WHERE serverID=2 ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.678  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:23.679  com.andtek.andphone.global.servers.GenericServer.load(GenericServer.java:457)
27. SELECT * FROM servers_attrs WHERE serverID=1 ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.684  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.684  com.andtek.andphone.global.servers.GenericServer.load(GenericServer.java:457)
20. SELECT * FROM servers_attrs WHERE serverID=3 ORDER BY name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.801  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.803  com.andtek.andphone.global.servers.ServerGroup.load(ServerGroup.java:120)
21. SELECT * FROM servergroup ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.804  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.805  com.andtek.andphone.global.servers.ServerGroup.load(ServerGroup.java:131)
22. SELECT * FROM servergroup_members WHERE gid=4 ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.813  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.814  com.andtek.andphone.global.servers.ServerGroup.load(ServerGroup.java:131)
23. SELECT * FROM servergroup_members WHERE gid=1 ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:23.815  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.816  com.andtek.andphone.global.servers.ServerGroup.load(ServerGroup.java:131)
24. SELECT * FROM servergroup_members WHERE gid=2 ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:23.819  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:23.820  com.andtek.andphone.global.servers.ServerGroup.load(ServerGroup.java:131)
25. SELECT * FROM servergroup_members WHERE gid=3 ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.117  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.119  com.andtek.andphone.JTAPIThread.initializeGroupModule(JTAPIThread.java:3791)
26. SELECT id, groupname, description, groupsize, accdelay, accRepeats, accRepeatsDelay, numDigits, 
popup, customsize, customrow, customcol, enableOnPhones, enableOnClients FROM pgroup ORDER 
BY id 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.127  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.129  com.andtek.andphone.JTAPIThread.initializeGroupModule(JTAPIThread.java:3813)
27. SELECT id, DN, label, description, tone, showdn, preferred, displayEnabled, servicesEnabled, 
presencestate, presenceparams FROM pgroupmember WHERE gid=1 ORDER BY id 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.160  com.andtek.andphone.callrouting.CallList.getMissedCount(CallList.java:403)
41. SELECT COUNT(*) AS missed FROM callList WHERE calledEndParty='+36110009020' AND (type=10 OR 
type=1) 
 {executed in 16 msec}

-----> 2020-02-28 07:46:24.161  com.andtek.andphone.callrouting.CallList.getMissedCount(CallList.java:403)
42. SELECT COUNT(*) AS missed FROM callList WHERE calledEndParty='+36110009021' AND (type=10 OR 
type=1) 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.163  com.andtek.andphone.callrouting.CallList.getMissedCount(CallList.java:403)
43. SELECT COUNT(*) AS missed FROM callList WHERE calledEndParty='+36110009098' AND (type=10 OR 
type=1) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.164  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.166  com.andtek.andphone.blacklist.Blacklist.getBlacklists(Blacklist.java:528)
20. SELECT id FROM Blacklist 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.261  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
44. SELECT val FROM config WHERE module='global' AND param='AXLCaches' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.262  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
45. UPDATE config SET val='false' WHERE module='global' AND param='AXLCaches' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.263  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
46. SELECT val FROM config WHERE module='global' AND param='MailboxRingTone' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.264  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
47. UPDATE config SET val='CallBack.raw' WHERE module='global' AND param='MailboxRingTone' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.264  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
48. SELECT val FROM config WHERE module='global' AND param='SSOEnabled' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.265  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
49. UPDATE config SET val='false' WHERE module='global' AND param='SSOEnabled' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.268  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.270  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:102)
21. SELECT * FROM generic_profiles ORDER BY name 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.273  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.274  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
22. SELECT * FROM generic_profiles_configparams WHERE profileID=1 ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.275  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.276  com.andtek.andphone.communicator.CommunicatorProfile.loadAttributes(CommunicatorProfile.java:178)
23. SELECT * FROM desktop_profiles WHERE profileID=1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.280  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.281  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:102)
24. SELECT * FROM generic_profiles ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.281  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.282  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
25. SELECT * FROM generic_profiles_configparams WHERE profileID=1 ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.283  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.283  com.andtek.andphone.communicator.CommunicatorProfile.loadAttributes(CommunicatorProfile.java:178)
26. SELECT * FROM desktop_profiles WHERE profileID=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.288  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.288  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
27. SELECT * FROM generic_profiles_configparams WHERE profileID=3 ORDER BY name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.289  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.290  com.andtek.andphone.web.webattendant.dao.AttendantProfileDao.get(AttendantProfileDao.java:26)
20. SELECT * FROM attendant_profiles WHERE profileID=3 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.294  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.294  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
21. SELECT * FROM generic_profiles_configparams WHERE profileID=2 ORDER BY name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.295  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.296  com.andtek.andphone.web.webclient.dao.WebUserDao.getWebUserProfile(WebUserDao.java:1368)
22. SELECT * FROM webuser_profiles WHERE profileID = 2 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.297  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.298  com.andtek.andphone.web.webclient.dao.WebUserDao.loadURLs(WebUserDao.java:1915)
23. SELECT * FROM webclient_profile_urls WHERE profileId = 2 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.301  com.andtek.andphone.communicator.CommunicatorProfile.loadDefaultStatisticsTableColumns(CommunicatorProfile.java:503)
50. SELECT * FROM desktop_profiles_statcols WHERE profileID=1 ORDER BY tableName, columnName 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.302  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.303  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
24. SELECT * FROM generic_profiles_configparams WHERE profileID=3 ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.303  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.303  com.andtek.andphone.web.webattendant.dao.AttendantProfileDao.get(AttendantProfileDao.java:26)
25. SELECT * FROM attendant_profiles WHERE profileID=3 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.304  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.304  com.andtek.andphone.clientcore.GenericProfile.load(GenericProfile.java:120)
26. SELECT * FROM generic_profiles_configparams WHERE profileID=2 ORDER BY name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.304  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.305  com.andtek.andphone.web.webclient.dao.WebUserDao.getWebUserProfile(WebUserDao.java:1368)
27. SELECT * FROM webuser_profiles WHERE profileID = 2 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.305  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.306  com.andtek.andphone.web.webclient.dao.WebUserDao.loadURLs(WebUserDao.java:1915)
20. SELECT * FROM webclient_profile_urls WHERE profileId = 2 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.316  com.andtek.andphone.global.CUCMAuthenticationServer.load(CUCMAuthenticationServer.java:83)
51. SELECT * FROM CUCM_dirs ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.317  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.318  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.load(AbstractAuthenticationProfile.java:55)
21. SELECT * FROM auth_profiles ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.319  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.319  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.load(AbstractAuthenticationProfile.java:76)
22. SELECT * FROM auth_profiles_Attr WHERE profileID=1 ORDER BY entryID 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.321  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.322  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.load(AbstractAuthenticationProfile.java:76)
23. SELECT * FROM auth_profiles_Attr WHERE profileID=3 ORDER BY entryID 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.322  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.326  com.andtek.andphone.global.authprofiles.impl.CucmAXLAuthenticationProfile.loadAttributes(CucmAXLAuthenticationProfile.java:462)
24. SELECT * FROM auth_profiles_CUCM WHERE profileID=3 
 {executed in 4 msec}

-----> 2020-02-28 07:46:24.327  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.329  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.load(AbstractAuthenticationProfile.java:76)
25. SELECT * FROM auth_profiles_Attr WHERE profileID=2 ORDER BY entryID 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.330  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.331  com.andtek.andphone.global.remotemonitor.AndRemoteMonitorHost.load(AndRemoteMonitorHost.java:74)
26. SELECT * FROM monitor_servers ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.331  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.333  com.andtek.andphone.global.Pool.getAllPools(Pool.java:204)
27. SELECT id FROM pools 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.333  com.andtek.andphone.global.Pool.loadAttributes(Pool.java:93)
27. SELECT id, name, description, pooltype, adgroup, profileID, fk_authProfile FROM pools WHERE 
id=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.335  com.andtek.andphone.global.Pool.loadAttributes(Pool.java:105)
27. SELECT id,entry FROM poolentries WHERE poolid=1 ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.336  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.338  com.andtek.andphone.global.Schedule.load(Schedule.java:62)
20. SELECT id, title, mode, timezoneID FROM schedules ORDER by title 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.338  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.339  com.andtek.andphone.global.Regex.load(Regex.java:45)
21. SELECT regexID, regexName, regexDescription, regexTestValue FROM regex ORDER by regexName 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.340  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.342  com.andtek.andphone.global.AndLocale.load(AndLocale.java:41)
22. SELECT * FROM locales ORDER by code 
 {executed in 2 msec}

-----> 2020-02-28 07:46:24.342  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.343  com.andtek.andphone.global.ADDomains.load(ADDomains.java:50)
23. SELECT * FROM ADDomains ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.494  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.494  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.495  com.andtek.andphone.global.Module.migrateAXLConfigurationToServerGroup(Module.java:582)
25. SELECT * FROM servergroup WHERE gid=1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.495  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.497  com.andtek.andphone.global.Module.migrateAXLConfigurationToServerGroup(Module.java:585)
26. SELECT * FROM servergroup_members WHERE gid=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.498  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.498  com.andtek.andphone.utils.ccm.JTAPIHelper.recordExists(JTAPIHelper.java:402)
27. SELECT * FROM servergroup WHERE gid=2 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.499  com.andtek.andphone.utils.ccm.JTAPIHelper.recordExists(JTAPIHelper.java:402)
27. SELECT * FROM servergroup_members WHERE gid=2 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.518  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
52. SELECT val FROM config WHERE module='lockout' AND param='serviceSecurity' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.521  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
53. UPDATE config SET val='false' WHERE module='lockout' AND param='serviceSecurity' 
 {executed in 3 msec}

-----> 2020-02-28 07:46:24.523  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.531  com.andtek.andphone.partner.Manager.getManagers(Manager.java:431)
20. SELECT id,DN FROM pgmanager ORDER by id 
 {executed in 8 msec}

-----> 2020-02-28 07:46:24.532  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.534  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
21. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.536  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.539  com.andtek.andphone.directory.DirectoryMapping.load(DirectoryMapping.java:39)
22. SELECT * FROM dirmapping ORDER BY name 
 {executed in 3 msec}

-----> 2020-02-28 07:46:24.540  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.543  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.555  com.andtek.andphone.recorder.StorageProfile.loadInternal(StorageProfile.java:128)
24. SELECT * FROM rec_storage_profiles ORDER BY name 
 {executed in 12 msec}

-----> 2020-02-28 07:46:24.556  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.559  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:24.563  com.andtek.andphone.recorder.StorageProfile.loadInternal(StorageProfile.java:128)
26. SELECT * FROM recmgmt_storage_profiles ORDER BY name 
 {executed in 4 msec}

-----> 2020-02-28 07:46:24.623  com.andtek.andphone.recordermgmt.Module.getConfiguredSensors(Module.java:150)
54. SELECT name,ip FROM sensors 
 {executed in 11 msec}

-----> 2020-02-28 07:46:24.644  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 12 msec}

-----> 2020-02-28 07:46:24.651  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
27. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='agi' AND parent='' ORDER 
BY priority 
 {executed in 7 msec}

-----> 2020-02-28 07:46:24.668  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 16 msec}

-----> 2020-02-28 07:46:24.827  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.getLocalUser(AbstractAuthenticationProfile.java:325)
55. SELECT * FROM users WHERE username='admin' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:24.827  com.andtek.andphone.global.authprofiles.AbstractAuthenticationProfile.getLocalUser(AbstractAuthenticationProfile.java:325)
56. SELECT * FROM users WHERE username='admin' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.131  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
57. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'global','','Server 
is Available again: SIPServer[APAS](agent(10.51.51.122:5060, udp) ---> server[3](rec, 10.51.51.34:5060) 
available:true',0,0) 
 {executed in 8 msec}

-----> 2020-02-28 07:46:25.131  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
57. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.243  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.246  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
58. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'global','admin','Login 
successfull from 10.255.248.138 for: admin',0,0) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.247  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
58. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.260  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.261  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.263  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
23. SELECT * FROM provisioning_resboundle WHERE projectname='agi' ORDER BY locale, rkey 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.307  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
59. SELECT * FROM provisioning_roles WHERE projectname='agi' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.308  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
60. SELECT * FROM provisioning_ldapdirectory WHERE projectname='agi' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.312  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.314  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
24. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='andtek' AND parent='' ORDER 
BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.314  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.324  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 3 msec}

-----> 2020-02-28 07:46:25.324  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.325  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
27. SELECT * FROM provisioning_resboundle WHERE projectname='andtek' ORDER BY locale, rkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.336  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
61. SELECT * FROM provisioning_roles WHERE projectname='andtek' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.337  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
62. SELECT * FROM provisioning_ldapdirectory WHERE projectname='andtek' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.344  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.345  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
20. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='leoni' AND parent='' ORDER 
BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.349  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 4 msec}

-----> 2020-02-28 07:46:25.362  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.363  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.363  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
23. SELECT * FROM provisioning_resboundle WHERE projectname='leoni' ORDER BY locale, rkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.403  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
63. SELECT * FROM provisioning_roles WHERE projectname='leoni' 
 {executed in 6 msec}

-----> 2020-02-28 07:46:25.404  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
64. SELECT * FROM provisioning_ldapdirectory WHERE projectname='leoni' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.407  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.408  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
24. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='showroom' AND parent='' 
ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.408  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.420  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 7 msec}

-----> 2020-02-28 07:46:25.420  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.421  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
27. SELECT * FROM provisioning_resboundle WHERE projectname='showroom' ORDER BY locale, rkey 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.431  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
65. SELECT * FROM provisioning_roles WHERE projectname='showroom' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.431  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
66. SELECT * FROM provisioning_ldapdirectory WHERE projectname='showroom' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.436  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.436  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
20. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='verlag' AND parent='' ORDER 
BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.436  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.444  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.445  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.445  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
23. SELECT * FROM provisioning_resboundle WHERE projectname='verlag' ORDER BY locale, rkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.459  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
67. SELECT * FROM provisioning_roles WHERE projectname='verlag' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.460  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
68. SELECT * FROM provisioning_ldapdirectory WHERE projectname='verlag' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.466  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.467  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
24. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='wacker' AND parent='' ORDER 
BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.467  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.491  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.492  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.492  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
27. SELECT * FROM provisioning_resboundle WHERE projectname='wacker' ORDER BY locale, rkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.510  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
69. SELECT * FROM provisioning_roles WHERE projectname='wacker' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.511  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
70. SELECT * FROM provisioning_ldapdirectory WHERE projectname='wacker' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.514  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.515  com.andtek.andphone.provisioning.project.Config.loadConfig(Config.java:39)
20. SELECT parent,param,id,type,val FROM provisioning_config WHERE app='zimmer' AND parent='' ORDER 
BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.515  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.562  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.562  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.562  com.andtek.andphone.provisioning.project.Project.loadResourceBundlefromDB(Project.java:1431)
23. SELECT * FROM provisioning_resboundle WHERE projectname='zimmer' ORDER BY locale, rkey 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.570  com.andtek.andphone.provisioning.project.Project.loadProjectRoles(Project.java:605)
71. SELECT * FROM provisioning_roles WHERE projectname='zimmer' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.570  com.andtek.andphone.provisioning.project.Project.loadProjectLDAPDirectories(Project.java:635)
72. SELECT * FROM provisioning_ldapdirectory WHERE projectname='zimmer' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.607  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.612  com.andtek.andphone.provisioning.ProvisionLocation.loadChildrenLocations(ProvisionLocation.java:145)
24. SELECT * FROM provisioning_locations WHERE parentID=0 ORDER BY name 
 {executed in 5 msec}

-----> 2020-02-28 07:46:25.620  com.andtek.andphone.provisioning.PhoneCustomizer.load(PhoneCustomizer.java:55)
73. SELECT * FROM phone_customizing ORDER BY name 
 {executed in 5 msec}

-----> 2020-02-28 07:46:25.638  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.638  com.andtek.andphone.callrouting.CallListConfiguration.loadConfiguration(CallListConfiguration.java:34)
25. SELECT * FROM callListConfig 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.795  com.andtek.andphone.partner.acd.Queue.loadQueues(Queue.java:1678)
74. SELECT id FROM acdQueue 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.806  com.andtek.andphone.partner.acd.callbackrules.AcdCallbackRuleRepository.load(AcdCallbackRuleRepository.java:76)
75. SELECT * FROM acd_callback_rules 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.905  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.907  com.andtek.andphone.reports.ReportSchedule.load(ReportSchedule.java:93)
26. SELECT * FROM report_schedule ORDER BY repid 
 {executed in 2 msec}

-----> 2020-02-28 07:46:25.908  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:25.910  com.andtek.andphone.phonemenu.PhoneMenuItem.loadRootItems(PhoneMenuItem.java:131)
27. SELECT itemID,type FROM PhoneMenuItem WHERE menuID=0 ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.916  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:25.917  com.andtek.andphone.presence.AbstractPresenceSourceImpl.loadAllSources(AbstractPresenceSourceImpl.java:297)
20. SELECT * FROM presence_sources ORDER BY name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:26.092  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:26.094  com.andtek.andphone.partner.Module.getLicCount(Module.java:250)
21. SELECT COUNT(DISTINCT DN) AS lics FROM pgroupmember 
 {executed in 1 msec}

-----> 2020-02-28 07:46:26.099  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:26.122  com.andtek.andphone.mcast.Module.getLicCount(Module.java:270)
22. SELECT DISTINCT DN FROM mcastmember WHERE gid IN (SELECT id FROM mcastgroup) 
 {executed in 23 msec}

-----> 2020-02-28 07:46:26.137  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
76. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 9 msec}

-----> 2020-02-28 07:46:26.143  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:26.144  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
23. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:26.146  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:26.147  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
24. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:26.211  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 30 msec}

-----> 2020-02-28 07:46:26.212  com.andtek.andphone.global.license.LicenseHelper.getGroupMALicNumber(LicenseHelper.java:785)
25. SELECT COUNT(*) AS liccount FROM pgmanager 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.147  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:27.150  com.andtek.andphone.common.gui.services.GuiLoginInfoService.GetLastLoginDateTime(GuiLoginInfoService.java:106)
26. SELECT * FROM logging WHERE username='admin' AND message LIKE 'Login successfull%' ORDER BY 
created DESC 
 {executed in 2 msec}

-----> 2020-02-28 07:46:27.294  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 4 msec}

-----> 2020-02-28 07:46:27.295  com.andtek.andphone.global.gwtapp.server.RPCglobalServiceImpl.getFormattedEventLogEntry(RPCglobalServiceImpl.java:1576)
27. SELECT * FROM logging WHERE id=13528 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.297  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:27.298  com.andtek.andphone.common.gui.services.GuiMessagingService.getLastErrorMessages(GuiMessagingService.java:49)
20. SELECT * FROM logging WHERE created>='02/27/2020 07:46:27.295' AND created<='02/28/2020 07:46:27.295' 
AND level<=1 ORDER BY created DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.326  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.327  com.andtek.andphone.partner.Module.getLicCount(Module.java:250)
21. SELECT COUNT(DISTINCT DN) AS lics FROM pgroupmember 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.330  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.330  com.andtek.andphone.mcast.Module.getLicCount(Module.java:270)
22. SELECT DISTINCT DN FROM mcastmember WHERE gid IN (SELECT id FROM mcastgroup) 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.331  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
77. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.332  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.334  com.andtek.andphone.desktop.Module.getLicCount(Module.java:99)
23. SELECT DISTINCT cp.clientid from desktopclientphone cp, desktopclient dc WHERE dc.id = cp.clientid 
AND dc.type=0 
 {executed in 2 msec}

-----> 2020-02-28 07:46:27.400  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
78. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'global',NULL,'Provider 
in service. Connected to CTI manager',0,0) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.400  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
78. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.428  com.andtek.andphone.testing.DeviceListX.requireIPs(DeviceListX.java:163)
79. SELECT * FROM mcastgroup WHERE poolid<>0 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.430  com.andtek.andphone.blacklist.emergencyrouting.EmergencyCallRoutingUtils.hasEmergencyCallRoutingConfiguration(EmergencyCallRoutingUtils.java:60)
80. SELECT * FROM blacklistlist WHERE type=5 
 {executed in 1 msec}

-----> 2020-02-28 07:46:27.466  com.andtek.andphone.testing.DeviceListX.requireIPs(DeviceListX.java:163)
81. SELECT * FROM mcastgroup WHERE poolid<>0 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.467  com.andtek.andphone.blacklist.emergencyrouting.EmergencyCallRoutingUtils.hasEmergencyCallRoutingConfiguration(EmergencyCallRoutingUtils.java:60)
82. SELECT * FROM blacklistlist WHERE type=5 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.663  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:27.664  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
24. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.339  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
84. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.340  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.342  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
84. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.343  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.344  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
26. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.346  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
83. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 2 msec}

-----> 2020-02-28 07:46:28.349  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
83. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 2 msec}

-----> 2020-02-28 07:46:28.349  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.350  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
27. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.351  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
83. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.351  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.353  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
20. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:28.363  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
85. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'recorder',NULL,'Sniffer 
process went back to service.',0,0) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.363  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
85. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.668  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.671  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
21. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 3 msec}

-----> 2020-02-28 07:46:28.671  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.672  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
22. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:28.674  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:28.676  com.andtek.andphone.callrouting.Module.background(Module.java:753)
23. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:46:28.672' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.433  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.433  com.andtek.andphone.global.Pool.getAllPools(Pool.java:204)
24. SELECT id FROM pools 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.466  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.468  com.andtek.andphone.partner.PDevice.loadAttributes(PDevice.java:143)
25. SELECT name, gid, preferred, tone, showdn, lastDN FROM pdevices WHERE name='FTOTH2_RP_TEAM' 
ORDER by preferred DESC, gid ASC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.517  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.518  com.andtek.andphone.partner.PDevice.loadAttributes(PDevice.java:143)
26. SELECT name, gid, preferred, tone, showdn, lastDN FROM pdevices WHERE name='SEPA45630BB1748' 
ORDER by preferred DESC, gid ASC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.521  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:37.521  com.andtek.andphone.partner.PDevice.loadAttributes(PDevice.java:143)
27. SELECT name, gid, preferred, tone, showdn, lastDN FROM pdevices WHERE name='SEPA45630BB1748' 
ORDER by preferred DESC, gid ASC 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.538  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.539  com.andtek.andphone.partner.PDevice.loadAttributes(PDevice.java:143)
20. SELECT name, gid, preferred, tone, showdn, lastDN FROM pdevices WHERE name='SEPA45630BB1748' 
ORDER by preferred DESC, gid ASC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.540  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.541  com.andtek.andphone.partner.PDevice.setPreferred(PDevice.java:308)
21. UPDATE pdevices SET preferred=0 WHERE name='SEPA45630BB1748' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.541  com.andtek.andphone.partner.PDevice.saveAttributes(PDevice.java:180)
21. UPDATE pdevices SET name='SEPA45630BB1748', gid=1, preferred=1, tone=1, showdn=1, lastDN='+36110009020' 
WHERE name='SEPA45630BB1748' AND gid=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.542  com.andtek.andphone.partner.PDevice.saveAttributes(PDevice.java:192)
21. INSERT INTO pdevices (name, gid, preferred, tone, showdn, lastDN) VALUES ('SEPA45630BB1748',1,1,1,1,'+36110009020') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.544  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.544  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.546  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.547  com.andtek.andphone.partner.PDevice.loadAttributes(PDevice.java:143)
24. SELECT name, gid, preferred, tone, showdn, lastDN FROM pdevices WHERE name='SEPA45630401BDA' 
ORDER by preferred DESC, gid ASC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.548  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.549  com.andtek.andphone.partner.PDevice.setPreferred(PDevice.java:308)
25. UPDATE pdevices SET preferred=0 WHERE name='SEPA45630401BDA' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.550  com.andtek.andphone.partner.PDevice.saveAttributes(PDevice.java:180)
25. UPDATE pdevices SET name='SEPA45630401BDA', gid=1, preferred=1, tone=1, showdn=1, lastDN='+36110009021' 
WHERE name='SEPA45630401BDA' AND gid=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.551  com.andtek.andphone.partner.PDevice.saveAttributes(PDevice.java:192)
25. INSERT INTO pdevices (name, gid, preferred, tone, showdn, lastDN) VALUES ('SEPA45630401BDA',1,1,1,1,'+36110009021') 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.553  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.553  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.598  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.599  com.andtek.andphone.partner.Manager.getManagers(Manager.java:431)
20. SELECT id,DN FROM pgmanager ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.606  com.andtek.andphone.directory.LookupGroup.loadLookupGroupMembersData(LookupGroup.java:272)
86. SELECT * FROM lookupgroupmembers ORDER BY priority 
 {executed in 4 msec}

-----> 2020-02-28 07:46:37.607  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.607  com.andtek.andphone.mcast.Module.initFastSetup(Module.java:336)
21. SELECT id,grouptype,ip,port,volume,bidirectional,interrupt,fastsetup FROM mcastgroup WHERE 
fastsetup<>0 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.613  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
87. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.613  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
87. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.614  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
88. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009020%' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.618  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
89. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009021%' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.619  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
90. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009070%' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.621  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
91. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009075%' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.636  com.andtek.andphone.blacklist.emergencyrouting.mapping.EmergencyNumberMappingDAO.executeFinderQuery(EmergencyNumberMappingDAO.java:90)
92. SELECT * FROM emergency_number_mapping ORDER BY creation_time DESC 
 {executed in 11 msec}

-----> 2020-02-28 07:46:37.663  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:37.685  com.andtek.andphone.observer.Camera.internalGetAllCameras(Camera.java:158)
22. SELECT id FROM ob_cams ORDER BY id 
 {executed in 13 msec}

-----> 2020-02-28 07:46:37.703  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:37.704  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
23. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.034  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.035  com.andtek.andphone.recorder.RulesAdminHelper.getRulesListInternal(RulesAdminHelper.java:56)
24. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.035  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.036  com.andtek.andphone.recorder.RulesAdminHelper.getRecordRulesArray(RulesAdminHelper.java:122)
25. SELECT * FROM rec_rules WHERE rulesetid=3 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.259  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.259  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.260  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 3 msec}

-----> 2020-02-28 07:46:38.261  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.261  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 5 msec}

-----> 2020-02-28 07:46:38.263  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.263  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.264  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.265  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.267  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:38.413  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
94. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 14 msec}

-----> 2020-02-28 07:46:38.414  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
94. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.425  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 11 msec}

-----> 2020-02-28 07:46:38.439  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
20. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 14 msec}

-----> 2020-02-28 07:46:38.443  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
93. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 4 msec}

-----> 2020-02-28 07:46:38.444  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
93. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.444  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.445  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.446  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
93. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.446  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.447  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.455  com.andtek.andphone.ccm.CCMPhone.save(CCMPhone.java:1849)
95. SELECT deviceName FROM phones WHERE deviceName='SEPA45630BB1748' 
 {executed in 16 msec}

-----> 2020-02-28 07:46:38.476  com.andtek.andphone.ccm.CCMPhone.save(CCMPhone.java:1868)
95. UPDATE phones SET phoneXML='<?xml version="1.0" encoding="UTF-8"?> <soapenv:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><soapenv:Body><ns:getPhoneResponse xmlns:ns="http://www.cisco.com/AXL/API/10.0"><return><device 
ctiid="18" uuid="{F6B78649-C8D2-4948-8D4D-36C13BE76F47}"><name>SEPA45630BB1748</name><description>9020</description><product>Cisco 
9971</product><model>Cisco 9971</model><class>Phone</class><protocol>SIP</protocol><protocolSide>User</protocolSide><callingSearchSpaceName 
/><devicePoolName uuid="{1B1B9EB6-7803-11D3-BDF0-00108302EAD1}">Default</devicePoolName><commonDeviceConfigName 
/><commonPhoneConfigName uuid="{AC243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard Common Phone 
Profile</commonPhoneConfigName><networkLocation>Use System Default</networkLocation><locationName 
uuid="{29C5C1C4-8871-4D1E-8394-0B9181E8C54D}">Hub_None</locationName><mediaResourceListName 
/><networkHoldMohAudioSourceId /><userHoldMohAudioSourceId /><automatedAlternateRoutingCSSName 
/><aarNeighborhoodName /><loadInformation special="false">sip9971.9-4-2SR2-2</loadInformation><vendorConfig><disableSpeaker>false</disableSpeaker><disableSpeakerAndHeadset>false</disableSpeakerAndHeadset><pcPort>0</pcPort><garp>1</garp><voiceVlanAccess>0</voiceVlanAccess><webAccess>0</webAccess><allCallsOnPrimary>0</allCallsOnPrimary><spanToPCPort>1</spanToPCPort><loggingDisplay>0</loggingDisplay><recordingTone>0</recordingTone><recordingToneLocalVolume>100</recordingToneLocalVolume><recordingToneRemoteVolume>50</recordingToneRemoteVolume><g722CodecSupport>0</g722CodecSupport><headsetWidebandUIControl>0</headsetWidebandUIControl><headsetWidebandEnable>0</headsetWidebandEnable><powerPriority>0</powerPriority><restrictDataRates>0</restrictDataRates><showRemotePrivacyCalls>0</showRemotePrivacyCalls><logCallForRemotePrivateCalls>1</logCallForRemotePrivateCalls></vendorConfig><versionStamp>{1582872113-DBDEFC18-BA61-4207-BFC1-8C85BAC90D7F}</versionStamp><traceFlag>false</traceFlag><mlppDomainId 
/><mlppIndicationStatus>Default</mlppIndicationStatus><preemption>Default</preemption><useTrustedRelayPoint>Default</useTrustedRelayPoint><retryVideoCallAsAudio>true</retryVideoCallAsAudio><securityProfileName 
uuid="{1CD2CB25-C9F6-4786-A38F-1CF02DE290EE}">Universal Device Template - Model-independent 
Security Profile</securityProfileName><sipProfileName uuid="{FCBC7581-4D8D-48F3-917E-00B09FB39213}">Standard 
SIP Profile</sipProfileName><cgpnTransformationCssName /><useDevicePoolCgpnTransformCss>true</useDevicePoolCgpnTransformCss><geoLocationName 
/><geoLocationFilterName /><sendGeoLocation>false</sendGeoLocation><lines><line uuid="{11DDBBEF-D8B8-4194-8D7D-42E9F2282F5E}"><index>1</index><label 
/><display /><dirn uuid="{40D16E4D-5A9A-DFBC-B1B9-B3EEED778E5F}"><pattern>\+36110009020</pattern><routePartitionName 
uuid="{ACDF7B40-B405-D6EF-DD65-6E8B11EC835C}">FTOTH_Phones</routePartitionName></dirn><ringSetting>Ring</ringSetting><consecutiveRingSetting>Use 
System Default</consecutiveRingSetting><ringSettingIdlePickupAlert>Use System Default</ringSettingIdlePickupAlert><ringSettingActivePickupAlert>Use 
System Default</ringSettingActivePickupAlert><displayASCII /><e164Mask /><dialPlanWizardId 
/><mwlPolicy>Use System Policy</mwlPolicy><maxNumCalls>4</maxNumCalls><busyTrigger>2</busyTrigger><callInfoDisplay><callerName>true</callerName><callerNumber>false</callerNumber><redirectedNumber>false</redirectedNumber><dialedNumber>true</dialedNumber></callInfoDisplay><recordingProfileName 
uuid="6417f156-2283-94e4-3863-050842cc7c71">FTOTH2_REC_PROF</recordingProfileName><monitoringCssName 
/><recordingFlag>Automatic Call Recording Enabled</recordingFlag><audibleMwi>Default</audibleMwi><speedDial 
/><partitionUsage>General</partitionUsage><associatedEndusers /><missedCallLogging>true</missedCallLogging><recordingMediaSource>Gateway 
Preferred</recordingMediaSource></line></lines><numberOfButtons>114</numberOfButtons><phoneTemplateName 
uuid="{B18A11B6-B86C-4E7A-9EAE-FDD020B5301D}">SEPA45630BB1748-SIP-Individual Template</phoneTemplateName><speeddials 
/><busyLampFields /><primaryPhoneName /><ringSettingIdleBlfAudibleAlert>Default</ringSettingIdleBlfAudibleAlert><ringSettingBusyBlfAudibleAlert>Default</ringSettingBusyBlfAudibleAlert><blfDirectedCallParks 
/><addOnModules /><userLocale /><networkLocale /><idleTimeout>1</idleTimeout><authenticationUrl 
/><directoryUrl /><idleUrl /><informationUrl /><messagesUrl /><proxyServerUrl /><servicesUrl 
/><services><service><telecasterService uuid="{77445ED3-D5FD-576A-7FCD-F92A2F7DF5A4}">FTOTH2_RecStartStop</telecasterService><name>FTOTH2_RecStartStop</name><url>http://10.51.51.122:8080/andphone/Recorder?page=ondemand&amp;dev=#DEVICENAME#</url><urlButtonIndex>1</urlButtonIndex><urlLabel>Rec</urlLabel><serviceNameAscii 
/><phoneService>Standard IP Phone Service</phoneService><phoneServiceCategory>XML Service</phoneServiceCategory><vendor 
/><version /><priority>50</priority></service></services><softkeyTemplateName /><loginUserId 
/><defaultProfileName /><enableExtensionMobility>false</enableExtensionMobility><currentProfileName 
/><loginTime /><loginDuration /><currentConfig><userHoldMohAudioSourceId /><phoneTemplateName 
uuid="{B18A11B6-B86C-4E7A-9EAE-FDD020B5301D}">SEPA45630BB1748-SIP-Individual Template</phoneTemplateName><mlppDomainId 
/><mlppIndicationStatus>Default</mlppIndicationStatus><preemption>Default</preemption><softkeyTemplateName 
/><ignorePresentationIndicators>false</ignorePresentationIndicators><singleButtonBarge>Off</singleButtonBarge><joinAcrossLines>Off</joinAcrossLines><callInfoPrivacyStatus>Default</callInfoPrivacyStatus><dndStatus 
/><dndRingSetting /><dndOption>Use Common Phone Profile Setting</dndOption><alwaysUsePrimeLine>Default</alwaysUsePrimeLine><alwaysUsePrimeLineForVoiceMessage>Default</alwaysUsePrimeLineForVoiceMessage><emccCallingSearchSpaceName 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><deviceName 
/><model /><product /><deviceProtocol /><class /><addressMode /><allowAutoConfig /><remoteSrstOption 
/><remoteSrstIp /><remoteSrstPort /><remoteSipSrstIp /><remoteSipSrstPort /><geolocationInfo 
/><remoteLocationName /></currentConfig><singleButtonBarge>Off</singleButtonBarge><joinAcrossLines>Off</joinAcrossLines><builtInBridgeStatus>On</builtInBridgeStatus><callInfoPrivacyStatus>Default</callInfoPrivacyStatus><hlogStatus>On</hlogStatus><ownerUserId 
uuid="e7cd6c35-6a65-7f77-8a3f-6dab99549a42">ftoth</ownerUserId><ignorePresentationIndicators>false</ignorePresentationIndicators><packetCaptureMode>None</packetCaptureMode><packetCaptureDuration>0</packetCaptureDuration><subscribeCallingSearchSpaceName 
/><rerouteCallingSearchSpaceName /><allowCtiControlFlag>true</allowCtiControlFlag><presenceGroupName 
uuid="{AD243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard Presence group</presenceGroupName><unattendedPort>false</unattendedPort><requireDtmfReception>false</requireDtmfReception><rfc2833Disabled>false</rfc2833Disabled><certificateOperation>No 
Pending Operation</certificateOperation><certificateStatus>None</certificateStatus><upgradeFinishTime 
/><deviceMobilityMode>Default</deviceMobilityMode><remoteDevice>false</remoteDevice><dndOption>Use 
Common Phone Profile Setting</dndOption><dndRingSetting /><dndStatus>false</dndStatus><isActive>true</isActive><isDualMode>false</isDualMode><mobilityUserIdName 
/><phoneSuite>Default</phoneSuite><phoneServiceDisplay>Default</phoneServiceDisplay><isProtected>false</isProtected><mtpRequired>false</mtpRequired><mtpPreferedCodec>711ulaw</mtpPreferedCodec><dialRulesName 
/><sshUserId>admin</sshUserId><digestUser /><outboundCallRollover>No Rollover</outboundCallRollover><hotlineDevice>false</hotlineDevice><secureInformationUrl 
/><secureDirectoryUrl /><secureMessageUrl /><secureServicesUrl /><secureAuthenticationUrl /><secureIdleUrl 
/><alwaysUsePrimeLine>Default</alwaysUsePrimeLine><alwaysUsePrimeLineForVoiceMessage>Default</alwaysUsePrimeLineForVoiceMessage><featureControlPolicy 
/><deviceTrustMode>Not Trusted</deviceTrustMode><confidentialAccess><confidentialAccessMode 
/><confidentialAccessLevel>-1</confidentialAccessLevel></confidentialAccess><requireOffPremiseLocation>false</requireOffPremiseLocation><cgpnIngressDN 
/><useDevicePoolCgpnIngressDN>true</useDevicePoolCgpnIngressDN><msisdn /><enableCallRoutingToRdWhenNoneIsActive>false</enableCallRoutingToRdWhenNoneIsActive><wifiHotspotProfile 
/><wirelessLanProfileGroup /></device></return></ns:getPhoneResponse></soapenv:Body></soapenv:Envelope>',profileXML=NULL,lastUpdated='02/28/2020 
07:46:38.428' WHERE deviceName='SEPA45630BB1748' 
 {executed in 18 msec}

-----> 2020-02-28 07:46:38.599  com.andtek.andphone.ccm.CCMPhone.save(CCMPhone.java:1849)
96. SELECT deviceName FROM phones WHERE deviceName='SEPA45630401BDA' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.602  com.andtek.andphone.ccm.CCMPhone.save(CCMPhone.java:1868)
96. UPDATE phones SET phoneXML='<?xml version="1.0" encoding="UTF-8"?> <soapenv:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><soapenv:Body><ns:getPhoneResponse xmlns:ns="http://www.cisco.com/AXL/API/10.0"><return><device 
ctiid="19" uuid="{A305FE5E-1373-4FF7-B445-3B753861CEE7}"><name>SEPA45630401BDA</name><description>9021</description><product>Cisco 
8961</product><model>Cisco 8961</model><class>Phone</class><protocol>SIP</protocol><protocolSide>User</protocolSide><callingSearchSpaceName 
/><devicePoolName uuid="{1B1B9EB6-7803-11D3-BDF0-00108302EAD1}">Default</devicePoolName><commonDeviceConfigName 
/><commonPhoneConfigName uuid="{AC243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard Common Phone 
Profile</commonPhoneConfigName><networkLocation>Use System Default</networkLocation><locationName 
uuid="{29C5C1C4-8871-4D1E-8394-0B9181E8C54D}">Hub_None</locationName><mediaResourceListName 
/><networkHoldMohAudioSourceId /><userHoldMohAudioSourceId /><automatedAlternateRoutingCSSName 
/><aarNeighborhoodName /><loadInformation special="false">sip8961.9-4-2SR2-2</loadInformation><vendorConfig><disableSpeaker>false</disableSpeaker><disableSpeakerAndHeadset>false</disableSpeakerAndHeadset><pcPort>0</pcPort><garp>1</garp><voiceVlanAccess>0</voiceVlanAccess><allCallsOnPrimary>0</allCallsOnPrimary><spanToPCPort>1</spanToPCPort><loggingDisplay>0</loggingDisplay><recordingTone>0</recordingTone><recordingToneLocalVolume>100</recordingToneLocalVolume><recordingToneRemoteVolume>50</recordingToneRemoteVolume><g722CodecSupport>0</g722CodecSupport><headsetWidebandUIControl>0</headsetWidebandUIControl><headsetWidebandEnable>0</headsetWidebandEnable><powerPriority>0</powerPriority><showRemotePrivacyCalls>0</showRemotePrivacyCalls><logCallForRemotePrivateCalls>1</logCallForRemotePrivateCalls></vendorConfig><versionStamp>{1566814785-BB26B2F8-BA60-4A65-837A-AC0F49263EA5}</versionStamp><traceFlag>false</traceFlag><mlppDomainId 
/><mlppIndicationStatus>Default</mlppIndicationStatus><preemption>Default</preemption><useTrustedRelayPoint>Default</useTrustedRelayPoint><retryVideoCallAsAudio>true</retryVideoCallAsAudio><securityProfileName 
uuid="{1CD2CB25-C9F6-4786-A38F-1CF02DE290EE}">Universal Device Template - Model-independent 
Security Profile</securityProfileName><sipProfileName uuid="{FCBC7581-4D8D-48F3-917E-00B09FB39213}">Standard 
SIP Profile</sipProfileName><cgpnTransformationCssName /><useDevicePoolCgpnTransformCss>true</useDevicePoolCgpnTransformCss><geoLocationName 
/><geoLocationFilterName /><sendGeoLocation>false</sendGeoLocation><lines><line uuid="{C2216326-A73D-4263-BF7A-1C7A0161956F}"><index>1</index><label 
/><display /><dirn uuid="{C3027C61-42E3-BB0F-256D-A6992ABD9210}"><pattern>\+36110009021</pattern><routePartitionName 
uuid="{ACDF7B40-B405-D6EF-DD65-6E8B11EC835C}">FTOTH_Phones</routePartitionName></dirn><ringSetting>Ring</ringSetting><consecutiveRingSetting>Use 
System Default</consecutiveRingSetting><ringSettingIdlePickupAlert>Use System Default</ringSettingIdlePickupAlert><ringSettingActivePickupAlert>Use 
System Default</ringSettingActivePickupAlert><displayASCII /><e164Mask /><dialPlanWizardId 
/><mwlPolicy>Use System Policy</mwlPolicy><maxNumCalls>4</maxNumCalls><busyTrigger>2</busyTrigger><callInfoDisplay><callerName>true</callerName><callerNumber>false</callerNumber><redirectedNumber>false</redirectedNumber><dialedNumber>true</dialedNumber></callInfoDisplay><recordingProfileName 
uuid="6417f156-2283-94e4-3863-050842cc7c71">FTOTH2_REC_PROF</recordingProfileName><monitoringCssName 
/><recordingFlag>Automatic Call Recording Enabled</recordingFlag><audibleMwi>Default</audibleMwi><speedDial 
/><partitionUsage>General</partitionUsage><associatedEndusers /><missedCallLogging>true</missedCallLogging><recordingMediaSource>Gateway 
Preferred</recordingMediaSource></line></lines><numberOfButtons>41</numberOfButtons><phoneTemplateName 
uuid="{281DC86E-2B65-4872-882F-6D74E433646B}">SEPA45630401BDA-SIP-Individual Template</phoneTemplateName><speeddials 
/><busyLampFields /><primaryPhoneName /><ringSettingIdleBlfAudibleAlert>Default</ringSettingIdleBlfAudibleAlert><ringSettingBusyBlfAudibleAlert>Default</ringSettingBusyBlfAudibleAlert><blfDirectedCallParks 
/><addOnModules /><userLocale /><networkLocale /><idleTimeout>1</idleTimeout><authenticationUrl 
/><directoryUrl /><idleUrl /><informationUrl /><messagesUrl /><proxyServerUrl /><servicesUrl 
/><services /><softkeyTemplateName /><loginUserId /><defaultProfileName /><enableExtensionMobility>false</enableExtensionMobility><currentProfileName 
/><loginTime /><loginDuration /><currentConfig><userHoldMohAudioSourceId /><phoneTemplateName 
uuid="{281DC86E-2B65-4872-882F-6D74E433646B}">SEPA45630401BDA-SIP-Individual Template</phoneTemplateName><mlppDomainId 
/><mlppIndicationStatus>Default</mlppIndicationStatus><preemption>Default</preemption><softkeyTemplateName 
/><ignorePresentationIndicators>false</ignorePresentationIndicators><singleButtonBarge>Off</singleButtonBarge><joinAcrossLines>Off</joinAcrossLines><callInfoPrivacyStatus>Default</callInfoPrivacyStatus><dndStatus 
/><dndRingSetting /><dndOption>Use Common Phone Profile Setting</dndOption><alwaysUsePrimeLine>Default</alwaysUsePrimeLine><alwaysUsePrimeLineForVoiceMessage>Default</alwaysUsePrimeLineForVoiceMessage><emccCallingSearchSpaceName 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><deviceName 
/><model /><product /><deviceProtocol /><class /><addressMode /><allowAutoConfig /><remoteSrstOption 
/><remoteSrstIp /><remoteSrstPort /><remoteSipSrstIp /><remoteSipSrstPort /><geolocationInfo 
/><remoteLocationName /></currentConfig><singleButtonBarge>Off</singleButtonBarge><joinAcrossLines>Off</joinAcrossLines><builtInBridgeStatus>On</builtInBridgeStatus><callInfoPrivacyStatus>Default</callInfoPrivacyStatus><hlogStatus>On</hlogStatus><ownerUserId 
/><ignorePresentationIndicators>false</ignorePresentationIndicators><packetCaptureMode>None</packetCaptureMode><packetCaptureDuration>0</packetCaptureDuration><subscribeCallingSearchSpaceName 
/><rerouteCallingSearchSpaceName /><allowCtiControlFlag>true</allowCtiControlFlag><presenceGroupName 
uuid="{AD243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard Presence group</presenceGroupName><unattendedPort>false</unattendedPort><requireDtmfReception>false</requireDtmfReception><rfc2833Disabled>false</rfc2833Disabled><certificateOperation>No 
Pending Operation</certificateOperation><certificateStatus>None</certificateStatus><upgradeFinishTime 
/><deviceMobilityMode>Default</deviceMobilityMode><remoteDevice>false</remoteDevice><dndOption>Use 
Common Phone Profile Setting</dndOption><dndRingSetting /><dndStatus>false</dndStatus><isActive>true</isActive><isDualMode>false</isDualMode><mobilityUserIdName 
/><phoneSuite>Default</phoneSuite><phoneServiceDisplay>Default</phoneServiceDisplay><isProtected>false</isProtected><mtpRequired>false</mtpRequired><mtpPreferedCodec>711ulaw</mtpPreferedCodec><dialRulesName 
/><sshUserId>admin</sshUserId><digestUser /><outboundCallRollover>No Rollover</outboundCallRollover><hotlineDevice>false</hotlineDevice><secureInformationUrl 
/><secureDirectoryUrl /><secureMessageUrl /><secureServicesUrl /><secureAuthenticationUrl /><secureIdleUrl 
/><alwaysUsePrimeLine>Default</alwaysUsePrimeLine><alwaysUsePrimeLineForVoiceMessage>Default</alwaysUsePrimeLineForVoiceMessage><featureControlPolicy 
/><deviceTrustMode>Not Trusted</deviceTrustMode><confidentialAccess><confidentialAccessMode 
/><confidentialAccessLevel>-1</confidentialAccessLevel></confidentialAccess><requireOffPremiseLocation>false</requireOffPremiseLocation><cgpnIngressDN 
/><useDevicePoolCgpnIngressDN>true</useDevicePoolCgpnIngressDN><msisdn /><enableCallRoutingToRdWhenNoneIsActive>false</enableCallRoutingToRdWhenNoneIsActive><wifiHotspotProfile 
/><wirelessLanProfileGroup /></device></return></ns:getPhoneResponse></soapenv:Body></soapenv:Envelope>',profileXML=NULL,lastUpdated='02/28/2020 
07:46:38.595' WHERE deviceName='SEPA45630401BDA' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:38.707  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.710  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
23. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 2 msec}

-----> 2020-02-28 07:46:38.710  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:38.711  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
24. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.715  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.716  com.andtek.andphone.callrouting.Module.background(Module.java:753)
25. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:46:39.713' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.746  com.andtek.andphone.ccm.Extension.save(Extension.java:862)
97. SELECT pattern FROM extensions WHERE pattern='+36110009020' AND partition='FTOTH_Phones' 
 {executed in 16 msec}

-----> 2020-02-28 07:46:39.752  com.andtek.andphone.ccm.Extension.save(Extension.java:881)
97. UPDATE extensions SET lineXML='<?xml version="1.0" encoding="UTF-8"?> <soapenv:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><soapenv:Body><ns:getLineResponse xmlns:ns="http://www.cisco.com/AXL/API/10.0"><return><directoryNumber 
uuid="{40D16E4D-5A9A-DFBC-B1B9-B3EEED778E5F}"><pattern>\+36110009020</pattern><description 
/><usage>Device</usage><routePartition uuid="{ACDF7B40-B405-D6EF-DD65-6E8B11EC835C}">FTOTH_Phones</routePartition><aarNeighborhoodName 
/><aarDestinationMask /><aarKeepCallHistory>true</aarKeepCallHistory><aarVoiceMailEnabled>false</aarVoiceMailEnabled><callForwardAll><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><secondaryCallingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardAll><callForwardBusy><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardBusy><callForwardBusyInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardBusyInt><callForwardNoAnswer><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/><duration /></callForwardNoAnswer><callForwardNoAnswerInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/><duration /></callForwardNoAnswerInt><callForwardNoCoverage><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNoCoverage><callForwardNoCoverageInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNoCoverageInt><callForwardOnFailure><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardOnFailure><callForwardAlternateParty><callingSearchSpace uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:nil="true" /><destination /><duration /></callForwardAlternateParty><callForwardNotRegistered><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNotRegistered><callForwardNotRegisteredInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNotRegisteredInt><callPickupGroupName uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:nil="true" /><autoAnswer>Auto Answer Off</autoAnswer><networkHoldMohAudioSourceId /><userHoldMohAudioSourceId 
/><alertingName /><asciiAlertingName /><presenceGroupName uuid="{AD243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard 
Presence group</presenceGroupName><shareLineAppearanceCSS uuid="{FC388259-31FB-1909-9D57-7BC177D475E5}">FTOTH_CSS_Phones</shareLineAppearanceCSS><voiceMailProfileName 
/><patternPrecedence>Default</patternPrecedence><releaseClause>No Error</releaseClause><hrDuration 
/><hrInterval /><cfaCssPolicy>Use System Default</cfaCssPolicy><defaultActivatedDeviceName 
/><parkMonForwardNoRetrieveDn /><parkMonForwardNoRetrieveIntDn /><parkMonForwardNoRetrieveVmEnabled>false</parkMonForwardNoRetrieveVmEnabled><parkMonForwardNoRetrieveIntVmEnabled>false</parkMonForwardNoRetrieveIntVmEnabled><parkMonForwardNoRetrieveCssName 
/><parkMonForwardNoRetrieveIntCssName /><parkMonReversionTimer /><partyEntranceTone>Default</partyEntranceTone><directoryURIs 
/><allowCtiControlFlag>true</allowCtiControlFlag><rejectAnonymousCall>false</rejectAnonymousCall><patternUrgency>false</patternUrgency><confidentialAccess><confidentialAccessMode 
/><confidentialAccessLevel>-1</confidentialAccessLevel></confidentialAccess><externalCallControlProfile 
/><enterpriseAltNum><numMask /><isUrgent>f</isUrgent><addLocalRoutePartition>f</addLocalRoutePartition><routePartition 
/><advertiseGloballyIls>f</advertiseGloballyIls></enterpriseAltNum><e164AltNum><numMask /><isUrgent>f</isUrgent><addLocalRoutePartition>f</addLocalRoutePartition><routePartition 
/><advertiseGloballyIls>f</advertiseGloballyIls></e164AltNum><pstnFailover /><callControlAgentProfile 
/><associatedDevices><device>SEPA45630BB1748</device></associatedDevices><useEnterpriseAltNum>false</useEnterpriseAltNum><useE164AltNum>false</useE164AltNum><active>true</active></directoryNumber></return></ns:getLineResponse></soapenv:Body></soapenv:Envelope>',lastUpdated='02/28/2020 
07:46:39.730' WHERE pattern='+36110009020' AND partition='FTOTH_Phones' 
 {executed in 5 msec}

-----> 2020-02-28 07:46:39.759  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.760  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.761  com.andtek.andphone.ccm.Extension.save(Extension.java:862)
98. SELECT pattern FROM extensions WHERE pattern='+36110009021' AND partition='FTOTH_Phones' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.771  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 11 msec}

-----> 2020-02-28 07:46:39.774  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.776  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.777  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.777  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.778  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.781  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.782  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.786  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 3 msec}

-----> 2020-02-28 07:46:39.786  com.andtek.andphone.ccm.Extension.save(Extension.java:881)
98. UPDATE extensions SET lineXML='<?xml version="1.0" encoding="UTF-8"?> <soapenv:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><soapenv:Body><ns:getLineResponse xmlns:ns="http://www.cisco.com/AXL/API/10.0"><return><directoryNumber 
uuid="{C3027C61-42E3-BB0F-256D-A6992ABD9210}"><pattern>\+36110009021</pattern><description 
/><usage>Device</usage><routePartition uuid="{ACDF7B40-B405-D6EF-DD65-6E8B11EC835C}">FTOTH_Phones</routePartition><aarNeighborhoodName 
/><aarDestinationMask /><aarKeepCallHistory>true</aarKeepCallHistory><aarVoiceMailEnabled>false</aarVoiceMailEnabled><callForwardAll><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><secondaryCallingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardAll><callForwardBusy><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardBusy><callForwardBusyInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardBusyInt><callForwardNoAnswer><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/><duration /></callForwardNoAnswer><callForwardNoAnswerInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/><duration /></callForwardNoAnswerInt><callForwardNoCoverage><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNoCoverage><callForwardNoCoverageInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNoCoverageInt><callForwardOnFailure><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardOnFailure><callForwardAlternateParty><callingSearchSpace uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:nil="true" /><destination /><duration /></callForwardAlternateParty><callForwardNotRegistered><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNotRegistered><callForwardNotRegisteredInt><forwardToVoiceMail>false</forwardToVoiceMail><callingSearchSpace 
uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:nil="true" /><destination 
/></callForwardNotRegisteredInt><callPickupGroupName uuid="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xsi:nil="true" /><autoAnswer>Auto Answer Off</autoAnswer><networkHoldMohAudioSourceId /><userHoldMohAudioSourceId 
/><alertingName /><asciiAlertingName /><presenceGroupName uuid="{AD243D17-98B4-4118-8FEB-5FF2E1B781AC}">Standard 
Presence group</presenceGroupName><shareLineAppearanceCSS uuid="{FC388259-31FB-1909-9D57-7BC177D475E5}">FTOTH_CSS_Phones</shareLineAppearanceCSS><voiceMailProfileName 
/><patternPrecedence>Default</patternPrecedence><releaseClause>No Error</releaseClause><hrDuration 
/><hrInterval /><cfaCssPolicy>Use System Default</cfaCssPolicy><defaultActivatedDeviceName 
/><parkMonForwardNoRetrieveDn /><parkMonForwardNoRetrieveIntDn /><parkMonForwardNoRetrieveVmEnabled>false</parkMonForwardNoRetrieveVmEnabled><parkMonForwardNoRetrieveIntVmEnabled>false</parkMonForwardNoRetrieveIntVmEnabled><parkMonForwardNoRetrieveCssName 
/><parkMonForwardNoRetrieveIntCssName /><parkMonReversionTimer /><partyEntranceTone>Default</partyEntranceTone><directoryURIs 
/><allowCtiControlFlag>true</allowCtiControlFlag><rejectAnonymousCall>false</rejectAnonymousCall><patternUrgency>false</patternUrgency><confidentialAccess><confidentialAccessMode 
/><confidentialAccessLevel>-1</confidentialAccessLevel></confidentialAccess><externalCallControlProfile 
/><enterpriseAltNum><numMask /><isUrgent>f</isUrgent><addLocalRoutePartition>f</addLocalRoutePartition><routePartition 
/><advertiseGloballyIls>f</advertiseGloballyIls></enterpriseAltNum><e164AltNum><numMask /><isUrgent>f</isUrgent><addLocalRoutePartition>f</addLocalRoutePartition><routePartition 
/><advertiseGloballyIls>f</advertiseGloballyIls></e164AltNum><pstnFailover /><callControlAgentProfile 
/><associatedDevices><device>SEPA45630401BDA</device></associatedDevices><useEnterpriseAltNum>false</useEnterpriseAltNum><useE164AltNum>false</useE164AltNum><active>true</active></directoryNumber></return></ns:getLineResponse></soapenv:Body></soapenv:Envelope>',lastUpdated='02/28/2020 
07:46:39.761' WHERE pattern='+36110009021' AND partition='FTOTH_Phones' 
 {executed in 15 msec}

-----> 2020-02-28 07:46:39.788  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.790  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.791  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.791  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.792  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.800  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.800  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.801  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.802  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.805  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:39.805  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.805  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:39.807  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:40.535  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 3 msec}

-----> 2020-02-28 07:46:40.547  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:40.594  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:40.599  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.872  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:45.873  com.andtek.andphone.recorder.RulesAdminHelper.internalSaveRule(RulesAdminHelper.java:245)
22. UPDATE rec_rulesets SET ruleop=1,actions=3,description='9020 ',licenses=0,storageProfileId=10 
WHERE id=3 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.874  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.875  com.andtek.andphone.recorder.RulesAdminHelper.internalDeleteFromRulesTable(RulesAdminHelper.java:204)
23. DELETE FROM rec_rules WHERE rulesetid=3 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.875  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.877  com.andtek.andphone.recorder.RulesAdminHelper.internalSaveRule(RulesAdminHelper.java:343)
24. INSERT INTO rec_rules (rulesetid,id,type,source,value) VALUES (3,1,1,3,'+36110009020') 
 {executed in 2 msec}

-----> 2020-02-28 07:46:45.902  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
99. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.903  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
99. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.906  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
100. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009020%' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.909  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
101. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009021%' 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.910  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
102. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009070%' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.911  com.andtek.andphone.recorder.AdminHelper.isSupervisor(AdminHelper.java:72)
103. SELECT DISTINCT u.username FROM roles r INNER JOIN userroles ur ON r.rid=ur.rid INNER JOIN 
users u ON ur.uid=u.uid INNER JOIN permissions p ON ur.fkpermissions=p.id WHERE (r.rolename='recorder_archive' 
OR r.rolename='recordermgmt_archive') AND (p.name='allow' OR p.name='allowPool') AND u.extensions 
LIKE '%+36110009075%' 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.914  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
104. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'recorder','admin','Rule 
9020 has been updated successfully',0,0) 
 {executed in 1 msec}

-----> 2020-02-28 07:46:45.914  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
104. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.915  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:45.916  com.andtek.andphone.recorder.RulesAdminHelper.getRecordRulesArray(RulesAdminHelper.java:122)
25. SELECT * FROM rec_rules WHERE rulesetid=3 
 {executed in 1 msec}

-----> 2020-02-28 07:46:46.007  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:46.008  com.andtek.andphone.recorder.RulesAdminHelper.getRulesListInternal(RulesAdminHelper.java:56)
26. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:46.008  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:46.009  com.andtek.andphone.recorder.RulesAdminHelper.getRecordRulesArray(RulesAdminHelper.java:122)
27. SELECT * FROM rec_rules WHERE rulesetid=3 
 {executed in 1 msec}

-----> 2020-02-28 07:46:47.736  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:47.737  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
20. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.450  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
106. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.451  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
106. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.451  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.452  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
21. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.453  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
105. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.454  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
105. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.455  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.455  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
22. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.456  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
105. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.456  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.456  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
23. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.742  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:48.744  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
24. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 2 msec}

-----> 2020-02-28 07:46:48.744  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:48.745  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
25. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:50.752  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:46:50.754  com.andtek.andphone.callrouting.Module.background(Module.java:753)
26. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:46:50.749' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:57.768  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:57.769  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
27. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.459  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
108. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.460  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
108. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.461  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.461  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
20. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.462  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
107. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.463  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
107. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.463  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.464  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.464  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
107. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.464  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.465  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.773  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.774  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
23. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:46:58.775  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:46:58.775  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
24. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:00.776  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:00.777  com.andtek.andphone.callrouting.CallbackHandlersForJtapiObserver.handleCallCtlConnOfferedEv(CallbackHandlersForJtapiObserver.java:299)
25. SELECT id FROM callList WHERE callingPartyTerminal='SEP100000009100' AND calledParty='+36110009020' 
AND ((retries > 0 AND NOT nextRetry IS NULL) OR (retries > 1000)) 
 {executed in 1 msec}

-----> 2020-02-28 07:47:01.162  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:01.175  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:01.178  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:01.178  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:01.179  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:01.196  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:01.787  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:01.788  com.andtek.andphone.callrouting.Module.background(Module.java:753)
24. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:01.786' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:01.853  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:01.869  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:02.161  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:02.162  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:02.163  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:02.163  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:02.901  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
109. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:04.014  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
110. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 2 msec}

-----> 2020-02-28 07:47:07.164  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
111. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:07.800  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:07.801  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
23. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.471  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
113. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.472  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
113. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.472  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.473  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
24. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.474  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
112. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.474  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
112. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.475  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.476  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
25. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.476  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
112. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.477  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.477  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
26. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.804  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:08.807  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
27. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 3 msec}

-----> 2020-02-28 07:47:08.807  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:08.808  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
20. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:09.795  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:09.796  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 4 msec}

-----> 2020-02-28 07:47:09.797  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:09.797  com.andtek.andphone.callrouting.CallbackHandlersForJtapiObserver.handleCallCtlConnEstablishedEv(CallbackHandlersForJtapiObserver.java:380)
22. SELECT id,retries FROM callList WHERE callingPartyTerminal='SEP100000009100' AND calledParty='+36110009020' 
AND ((retries > 0 AND NOT nextRetry IS NULL) OR (retries > 1000)) 
 {executed in 2 msec}

-----> 2020-02-28 07:47:09.801  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 4 msec}

-----> 2020-02-28 07:47:09.804  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:47:09.806  com.andtek.andphone.callrouting.CallListEntry.saveAttributes(CallListEntry.java:1264)
114. INSERT INTO callList (type, callingParty, callingPartyName, callingPartyTerminal, calledParty, 
calledPartyName, calledPartyTerminal, start, "end", nextRetry, retries, message, broadcastAnswers, 
origCallingParty, origCallingPartyName, calledEndParty, calledEndPartyName, lastRedirectingParty, 
lastRedirectingPartyName, title, eventID, gcID) VALUES (0,'+36110009100','','SEP100000009100','+36110009020','','SEPA45630BB1748','02/28/2020 
07:47:01.163','02/28/2020 07:47:09.798',NULL,0,NULL,'','+36110009100','','+36110009020','','','','',0,'21172/1') 
RETURNING id AS newid 
 {executed in 3 msec}

-----> 2020-02-28 07:47:10.298  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
117. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:10.410  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:10.662  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:12.817  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:12.820  com.andtek.andphone.callrouting.Module.background(Module.java:753)
20. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:12.816' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:13.453  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
118. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:16.602  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
119. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.835  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:17.835  com.andtek.andphone.partner.Module.getLicCount(Module.java:250)
21. SELECT COUNT(DISTINCT DN) AS lics FROM pgroupmember 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.838  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.839  com.andtek.andphone.mcast.Module.getLicCount(Module.java:270)
22. SELECT DISTINCT DN FROM mcastmember WHERE gid IN (SELECT id FROM mcastgroup) 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.839  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
120. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.840  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.840  com.andtek.andphone.desktop.Module.getLicCount(Module.java:99)
23. SELECT DISTINCT cp.clientid from desktopclientphone cp, desktopclient dc WHERE dc.id = cp.clientid 
AND dc.type=0 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.860  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.861  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
24. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:47:17.861  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:17.862  com.andtek.andphone.mcast.Module.refreshAllDynamicMembers(Module.java:1010)
25. SELECT id,grouptype,poolid FROM mcastgroup WHERE poolid>0 
 {executed in 1 msec}

-----> 2020-02-28 07:47:18.479  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
122. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.480  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
122. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.480  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.481  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
26. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:47:18.482  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
121. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.483  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
121. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:47:18.483  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.483  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
27. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.484  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
121. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:47:18.484  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.484  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
20. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.485  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:18.485  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
21. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.866  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.869  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
22. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 2 msec}

-----> 2020-02-28 07:47:18.869  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:18.870  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
23. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:19.762  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
123. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:21.263  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 7 msec}

-----> 2020-02-28 07:47:21.265  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:47:21.265  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:21.266  com.andtek.andphone.callrouting.CallListEntry.saveAttributes(CallListEntry.java:1220)
124. UPDATE callList SET type=0, callingParty='+36110009100', callingPartyName='', callingPartyTerminal='SEP100000009100', 
calledParty='+36110009020', calledPartyName='', calledPartyTerminal='SEPA45630BB1748', start='02/28/2020 
07:47:01.163', "end"='02/28/2020 07:47:21.241', origCallingParty='+36110009100', origCallingPartyName='', 
calledEndParty='+36110009020', calledEndPartyName='', lastRedirectingParty='', lastRedirectingPartyName='', 
gcID='21172/1' WHERE id=161 
 {executed in 3 msec}

-----> 2020-02-28 07:47:21.268  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:47:21.285  com.andtek.andphone.callrouting.dao.CallListHistoryDAO.insertHistoryEntries(CallListHistoryDAO.java:127)
125. INSERT INTO calllist_history (fk_calllist_id, history_sequence_id, created, callid, type, cause, 
duration_from_start, callingparty, callingparty_name, callingParty_terminal, calledparty, calledparty_name, 
calledparty_terminal) VALUES (161,1,'02/28/2020 07:47:01.165','21172/1','ringing','unknown',0,'+36110009100','','','+36110009020','','SEPA45630BB1748') 
 {executed in 17 msec}

-----> 2020-02-28 07:47:21.286  com.andtek.andphone.callrouting.dao.CallListHistoryDAO.insertHistoryEntries(CallListHistoryDAO.java:127)
125. INSERT INTO calllist_history (fk_calllist_id, history_sequence_id, created, callid, type, cause, 
duration_from_start, callingparty, callingparty_name, callingParty_terminal, calledparty, calledparty_name, 
calledparty_terminal) VALUES (161,2,'02/28/2020 07:47:09.798','21172/1','connected','unknown',9,'+36110009100','','SEP100000009100','+36110009020','','SEPA45630BB1748') 
 {executed in 1 msec}

-----> 2020-02-28 07:47:21.287  com.andtek.andphone.callrouting.dao.CallListHistoryDAO.insertHistoryEntries(CallListHistoryDAO.java:127)
125. INSERT INTO calllist_history (fk_calllist_id, history_sequence_id, created, callid, type, cause, 
duration_from_start, callingparty, callingparty_name, callingParty_terminal, calledparty, calledparty_name, 
calledparty_terminal) VALUES (161,3,'02/28/2020 07:47:21.260','21172/1','disconnected','unknown',20,'+36110009100','','SEP100000009100','+36110009020','','SEPA45630BB1748') 
 {executed in 1 msec}

-----> 2020-02-28 07:47:21.860  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:21.877  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 2 msec}

-----> 2020-02-28 07:47:22.908  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
126. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:23.886  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 4 msec}

-----> 2020-02-28 07:47:23.887  com.andtek.andphone.callrouting.Module.background(Module.java:753)
22. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:23.881' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:26.772  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
127. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:27.894  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:27.895  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
23. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.487  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
129. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.488  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
129. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.488  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.489  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
24. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.489  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
128. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.491  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1211)
24. UPDATE rec_call SET rec_password='853AE90F0351324BD73EA615E6487517', status='3',lastaction=NOW() 
WHERE status='2' AND id=104 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.540  com.avaje.ebeaninternal.server.query.CQuery.prepareBindExecuteQuery(CQuery.java:401)
130. select t0.id as c0, t0.gcid as c1, t0.custom as c2, t0.admin as c3, t0.calledparty as c4, t0.calledpartyname 
as c5, t0.callingparty as c6, t0.origcallingparty as c7, t0.origcalledparty as c8, t0.lrp as 
c9, t0.lrp_name as c10, t0.keep as c11, t0.duplicate as c12 from rec_call t0 where t0.id in 
(104 ) 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.545  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.546  com.andtek.andphone.recorder.Admin.updateStorageProfileOnRecord(Admin.java:1342)
25. UPDATE rec_call SET keep=10,lastaction=NOW() WHERE id=104 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.658  com.andtek.andphone.utils.db.DBHandler.sqlQueryRS(DBHandler.java:205)
131. SELECT val FROM config WHERE module='recorder' AND param='keyStorePassword' 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.660  com.andtek.andphone.utils.db.DBHandler.sqlUpdate(DBHandler.java:88)
132. UPDATE config SET val='ENC:RM09p1pKsNXrQ5BfvQQK5w==' WHERE module='recorder' AND param='keyStorePassword' 
 {executed in 2 msec}

-----> 2020-02-28 07:47:28.902  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.904  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
26. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 2 msec}

-----> 2020-02-28 07:47:28.905  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.905  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
27. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.967  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.969  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1276)
20. UPDATE rec_call SET status=4,lastaction=NOW(),codec=2,filesize=23760,callingpartyname='',calledpartyname='',filename='104.rec' 
WHERE id=104 
 {executed in 2 msec}

-----> 2020-02-28 07:47:28.969  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
128. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.970  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.970  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.970  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
128. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:28.971  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:28.971  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:30.773  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
133. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:32.194  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:32.195  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.hasUserSuperAdminRole(RPCrecorderServiceImpl.java:4664)
23. SELECT * FROM users WHERE username='admin' 
 {executed in 0 msec}

-----> 2020-02-28 07:47:32.196  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:32.196  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.hasUserSuperAdminRole(RPCrecorderServiceImpl.java:4682)
24. SELECT * FROM userroles WHERE uid=0 
 {executed in 0 msec}

-----> 2020-02-28 07:47:32.197  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:32.200  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.RemoteSearchRecordingFiles(RPCrecorderServiceImpl.java:2271)
25. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE (start>='02/27/2020 07:00:00.000' AND start<='02/28/2020 
08:00:00.000' AND status>=4) ORDER BY start DESC 
 {executed in 2 msec}

-----> 2020-02-28 07:47:34.769  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
134. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:34.918  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:34.919  com.andtek.andphone.callrouting.Module.background(Module.java:753)
26. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:34.917' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:37.930  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:37.931  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
27. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.770  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
135. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.934  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:38.936  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
20. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 2 msec}

-----> 2020-02-28 07:47:38.936  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.936  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
21. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.976  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
137. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.977  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
137. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:47:38.977  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.978  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
22. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:47:38.979  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
136. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:47:38.979  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
136. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.979  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.980  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
23. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:38.980  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
136. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.980  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:38.981  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
24. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:42.787  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
138. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:45.490  com.andtek.andphone.recorder.Recording.setRecPasswordFromId(Recording.java:1058)
139. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE id=104 
 {executed in 0 msec}

-----> 2020-02-28 07:47:45.951  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:45.952  com.andtek.andphone.callrouting.Module.background(Module.java:753)
25. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:45.950' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:46.786  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
140. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:47.908  com.andtek.andphone.recorder.Recording.setRecPasswordFromId(Recording.java:1058)
141. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE id=104 
 {executed in 0 msec}

-----> 2020-02-28 07:47:47.956  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:47.957  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
26. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.541  com.andtek.andphone.recorder.Recording.setRecPasswordFromId(Recording.java:1058)
142. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE id=104 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.543  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
143. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'recorder','admin','Downloaded 
: Recording id="104", status="4", start="2020-02-28 07:47:10", duration="00:00:11", lastAction="1582872441", 
callingParty="+36110009100", calledParty="+36110009020", callingPartyName="null", calledPartyName="null", 
origCallingParty="+361100091',0,0) 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.544  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
143. SELECT currval('logging_id_seq') 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.961  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.963  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
27. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.963  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.964  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
20. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.982  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
145. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.983  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
145. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.983  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.984  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
21. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:47:48.984  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
144. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.985  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
144. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.985  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.985  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
22. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.986  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
144. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.986  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:48.987  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
23. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:50.792  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
146. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:54.770  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
147. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:56.983  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:56.984  com.andtek.andphone.callrouting.Module.background(Module.java:753)
24. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:47:56.982' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:47:57.986  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:57.986  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
25. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.780  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
148. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:58.989  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.990  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
150. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.990  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
150. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.991  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.991  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
26. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:47:58.991  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.991  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
27. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.991  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
20. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.992  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
149. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:47:58.992  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
149. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.993  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:58.993  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.993  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
149. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:47:58.994  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:47:58.994  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:02.833  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
151. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:06.848  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
152. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.023  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.024  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
23. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.026  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:08.026  com.andtek.andphone.callrouting.Module.background(Module.java:753)
24. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:48:08.025' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:08.878  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.879  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.RemoteSetStorageType(RPCrecorderServiceImpl.java:3899)
25. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE id=104 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.881  com.andtek.andphone.recorder.Recording.setRecPasswordFromId(Recording.java:1058)
153. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE id=104 
 {executed in 1 msec}

-----> 2020-02-28 07:48:08.881  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:08.883  com.andtek.andphone.EventLog.logToDB(EventLog.java:239)
154. INSERT INTO logging (created,level,module,username,message,reference,related) VALUES (NOW(),3,'recorder','admin','Storage 
type set to do not delete for Recording id="104", status="4", start="2020-02-28 07:47:10", 
duration="00:00:11", lastAction="1582872488", callingParty="+36110009100", calledParty="+36110009020", 
callingPartyName="", calledPartyName="", origCalling',0,0) 
 {executed in 0 msec}

-----> 2020-02-28 07:48:08.883  com.andtek.andphone.EventLog.logToDB(EventLog.java:247)
154. SELECT currval('logging_id_seq') 
 {executed in 0 msec}

-----> 2020-02-28 07:48:08.885  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.setKeep(RPCrecorderServiceImpl.java:404)
26. UPDATE rec_call SET keep=2,lastaction=NOW() WHERE id=104 
 {executed in 2 msec}

-----> 2020-02-28 07:48:09.001  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.002  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
156. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.002  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.hasUserSuperAdminRole(RPCrecorderServiceImpl.java:4664)
27. SELECT * FROM users WHERE username='admin' 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.002  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.003  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
156. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.003  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.hasUserSuperAdminRole(RPCrecorderServiceImpl.java:4682)
20. SELECT * FROM userroles WHERE uid=0 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.003  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.004  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
21. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.004  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.006  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
155. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 2 msec}

-----> 2020-02-28 07:48:09.006  com.andtek.andphone.recorder.gwtapp.server.RPCrecorderServiceImpl.RemoteSearchRecordingFiles(RPCrecorderServiceImpl.java:2271)
22. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE (start>='02/27/2020 07:00:00.000' AND start<='02/28/2020 
08:00:00.000' AND status>=4) ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.006  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
155. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.007  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.007  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
23. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.008  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
155. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:48:09.008  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.008  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
24. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.029  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.031  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
25. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.031  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:09.031  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
26. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:10.779  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
157. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:14.910  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
158. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:18.051  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.051  com.andtek.andphone.partner.Module.getLicCount(Module.java:250)
27. SELECT COUNT(DISTINCT DN) AS lics FROM pgroupmember 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.054  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.055  com.andtek.andphone.mcast.Module.getLicCount(Module.java:270)
20. SELECT DISTINCT DN FROM mcastmember WHERE gid IN (SELECT id FROM mcastgroup) 
 {executed in 1 msec}

-----> 2020-02-28 07:48:18.055  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
159. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.056  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.057  com.andtek.andphone.desktop.Module.getLicCount(Module.java:99)
21. SELECT DISTINCT cp.clientid from desktopclientphone cp, desktopclient dc WHERE dc.id = cp.clientid 
AND dc.type=0 
 {executed in 1 msec}

-----> 2020-02-28 07:48:18.062  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:18.063  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
22. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:48:18.770  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
160. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.010  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
162. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.011  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
162. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.011  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.012  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
23. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.013  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
161. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.014  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
161. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.014  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.014  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
24. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.015  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
161. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.015  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.015  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
25. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.066  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.067  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
26. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.068  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:19.068  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
27. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.069  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:19.070  com.andtek.andphone.callrouting.Module.background(Module.java:753)
20. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:48:19.069' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:22.795  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
163. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:26.765  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
164. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:28.089  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:28.089  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
21. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.017  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
166. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.018  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
166. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.018  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.019  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
22. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:48:29.020  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
165. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.020  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
165. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.020  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.021  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
23. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.021  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
165. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.021  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.021  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
24. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.092  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.093  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
25. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:48:29.094  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:29.094  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
26. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:30.097  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:30.100  com.andtek.andphone.callrouting.Module.background(Module.java:753)
27. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:48:30.096' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:30.782  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
167. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:34.778  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
168. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:38.115  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:38.116  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
20. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:48:38.777  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
169. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.029  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
171. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.030  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
171. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.030  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.031  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
21. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.032  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
170. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.032  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
170. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.032  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.033  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
22. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.033  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
170. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.033  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.034  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
23. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.119  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.120  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
24. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:48:39.120  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:39.121  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
25. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:48:41.126  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:41.127  com.andtek.andphone.callrouting.Module.background(Module.java:753)
26. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:48:41.125' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:42.844  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
172. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:46.776  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
173. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:48.141  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:48.142  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
27. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.036  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
175. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.036  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
175. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.037  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.037  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
20. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.038  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
174. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.038  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
174. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.039  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.039  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.039  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
174. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.040  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.040  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.145  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.146  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
23. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:48:49.146  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:49.147  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
24. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 1 msec}

-----> 2020-02-28 07:48:50.785  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
176. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:52.154  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:52.154  com.andtek.andphone.callrouting.Module.background(Module.java:753)
25. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:48:52.153' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:55.193  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
177. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:58.167  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:58.168  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
26. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:48:58.773  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
178. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.042  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
180. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.042  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
180. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.043  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:59.043  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
27. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.044  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
179. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:48:59.044  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
179. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.045  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.045  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
20. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.045  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
179. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.046  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.046  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
21. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:48:59.171  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:59.172  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
22. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:48:59.173  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:48:59.173  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
23. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:02.781  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
181. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:03.182  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:03.183  com.andtek.andphone.callrouting.Module.background(Module.java:753)
24. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:49:03.181' AND type 
<= 10 
 {executed in 1 msec}

-----> 2020-02-28 07:49:06.795  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
182. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:08.192  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:08.193  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
25. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.048  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
184. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.049  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
184. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.049  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.050  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
26. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.051  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
183. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.051  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
183. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.052  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.052  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
27. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.052  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
183. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.053  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.053  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
20. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.196  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.198  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
21. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:49:09.198  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:09.198  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
22. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:10.774  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
185. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:14.209  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:14.210  com.andtek.andphone.callrouting.Module.background(Module.java:753)
23. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:49:14.208' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:14.922  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
186. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.221  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:18.222  com.andtek.andphone.partner.Module.getLicCount(Module.java:250)
24. SELECT COUNT(DISTINCT DN) AS lics FROM pgroupmember 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.224  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.225  com.andtek.andphone.mcast.Module.getLicCount(Module.java:270)
25. SELECT DISTINCT DN FROM mcastmember WHERE gid IN (SELECT id FROM mcastgroup) 
 {executed in 1 msec}

-----> 2020-02-28 07:49:18.225  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
187. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.227  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:18.227  com.andtek.andphone.desktop.Module.getLicCount(Module.java:99)
26. SELECT DISTINCT cp.clientid from desktopclientphone cp, desktopclient dc WHERE dc.id = cp.clientid 
AND dc.type=0 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.233  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.233  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
27. SELECT id FROM directories ORDER by name 
 {executed in 0 msec}

-----> 2020-02-28 07:49:18.842  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
188. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.055  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
190. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.055  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
190. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.056  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.056  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
20. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.057  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
189. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.057  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
189. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.058  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.058  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
21. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.058  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
189. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.058  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.059  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
22. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.236  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:19.237  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
23. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.238  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
24. select 1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:19.238  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
24. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:22.787  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
191. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:25.252  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
25. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:25.253  com.andtek.andphone.callrouting.Module.background(Module.java:753)
25. SELECT * FROM callList WHERE retries > 0 AND nextRetry < '02/28/2020 07:49:25.251' AND type 
<= 10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:26.999  com.andtek.andphone.recorder.services.impl.LicenseServiceImpl.usedLicenses(LicenseServiceImpl.java:49)
192. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 1 msec}

-----> 2020-02-28 07:49:28.258  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
26. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:28.259  com.andtek.andphone.directory.Directory.getDirectories(Directory.java:985)
26. SELECT id FROM directories ORDER by name 
 {executed in 1 msec}

-----> 2020-02-28 07:49:29.060  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:458)
194. SELECT * FROM rec_rulesets ORDER BY priority 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.061  com.andtek.andphone.recorder.RuleSet.loadRules(RuleSet.java:476)
194. SELECT id,type,source,value FROM rec_rules WHERE rulesetid=3 ORDER by id 
 {executed in 1 msec}

-----> 2020-02-28 07:49:29.061  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
27. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.061  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1205)
27. UPDATE rec_call SET status=2,lastaction=NOW(), rec_password='853AE90F0351324BD73EA615E6487517' 
WHERE status<=1 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction)) > 300 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.062  com.andtek.andphone.recorder.Admin.postProcessRecording(Admin.java:1206)
193. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE status=2 ORDER BY start DESC 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.062  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
193. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.063  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
20. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.063  com.andtek.andphone.recorder.AdminHelper.dbDeleteRecordingByStatusAndKeep(AdminHelper.java:119)
20. DELETE FROM rec_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.063  com.andtek.andphone.recorder.Admin.storageProfileMaintenance(Admin.java:906)
193. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM rec_call WHERE keep=12 AND (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP("end")) 
> 3600 AND status!=6 ORDER BY "end" 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.064  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
21. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.064  com.andtek.andphone.recorder.Recording.numberOfCurrentRecordings(Recording.java:1860)
21. SELECT COUNT(*) AS count FROM rec_call WHERE status=1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.261  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
22. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.262  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:295)
22. SELECT id,status,start,UNIX_TIMESTAMP(start) AS ustart,"end",UNIX_TIMESTAMP("end") AS uend,SEC_TO_TIME(UNIX_TIMESTAMP("end")-UNIX_TIMESTAMP(start)) 
AS duration,UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(lastaction) AS lastaction,UNIX_TIMESTAMP(lastaction) 
AS ulastaction,callingparty,calledparty,callingpartyname,calledpartyname,origcallingparty,origcalledparty,phoneip,remoteip,initiated,initiator,signaling,codec,keep,custom,admin,recorder,gcid,filesize, 
filename,duplicate,rec_password FROM recmgmt_call WHERE keep=10 AND (UNIX_TIMESTAMP(NOW()) 
- UNIX_TIMESTAMP(start)) > 3600 AND status!=6 ORDER BY start 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.263  com.andtek.andphone.JTAPIThread.getDbcon(JTAPIThread.java:3905)
23. select 1 
 {executed in 0 msec}

-----> 2020-02-28 07:49:29.263  com.andtek.andphone.recordermgmt.Admin.storageProfileMaintenance(Admin.java:345)
23. DELETE FROM recmgmt_call WHERE status=5 AND keep=10 
 {executed in 0 msec}

